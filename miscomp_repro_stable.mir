// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
logger::init::RttControlBlock::down_channels::{{constant}}#0: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:131:76: 131:77

    bb0: {
        _0 = const 0_usize;              // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:131:76: 131:77
                                         // ty::Const
                                         // + ty: usize
                                         // + val: Value(Scalar(0x00000000))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:131:76: 131:77
                                         // + literal: Const { ty: usize, val: Value(Scalar(0x00000000)) }
        return;                          // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:131:76: 131:77
    }
}

fn logger::<impl at src\logger.rs:19:1: 30:2>::enabled(_1: &logger::Logger, _2: &log::Metadata) -> bool {
    debug self => _1;                    // in scope 0 at src\logger.rs:20:16: 20:21
    debug metadata => _2;                // in scope 0 at src\logger.rs:20:23: 20:31
    let mut _0: bool;                    // return place in scope 0 at src\logger.rs:20:47: 20:51
    let mut _3: &log::Level;             // in scope 0 at src\logger.rs:21:9: 21:25
    let _4: log::Level;                  // in scope 0 at src\logger.rs:21:9: 21:25
    let mut _5: &log::Metadata;          // in scope 0 at src\logger.rs:21:9: 21:17
    let mut _6: &log::Level;             // in scope 0 at src\logger.rs:21:29: 21:39

    bb0: {
        StorageLive(_3);                 // scope 0 at src\logger.rs:21:9: 21:25
        StorageLive(_4);                 // scope 0 at src\logger.rs:21:9: 21:25
        StorageLive(_5);                 // scope 0 at src\logger.rs:21:9: 21:17
        _5 = _2;                         // scope 0 at src\logger.rs:21:9: 21:17
        _4 = const log::Metadata::level(move _5) -> bb1; // scope 0 at src\logger.rs:21:9: 21:25
                                         // ty::Const
                                         // + ty: for<'r> fn(&'r log::Metadata) -> log::Level {log::Metadata::level}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\logger.rs:21:18: 21:23
                                         // + literal: Const { ty: for<'r> fn(&'r log::Metadata) -> log::Level {log::Metadata::level}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _3 = &_4;                        // scope 0 at src\logger.rs:21:9: 21:25
        StorageDead(_5);                 // scope 0 at src\logger.rs:21:24: 21:25
        StorageLive(_6);                 // scope 0 at src\logger.rs:21:29: 21:39
        _6 = &((*_1).0: log::Level);     // scope 0 at src\logger.rs:21:29: 21:39
        _0 = const <log::Level as core::cmp::PartialOrd>::le(move _3, move _6) -> bb2; // scope 0 at src\logger.rs:21:9: 21:39
                                         // ty::Const
                                         // + ty: for<'r, 's> fn(&'r log::Level, &'s log::Level) -> bool {<log::Level as core::cmp::PartialOrd>::le}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\logger.rs:21:9: 21:39
                                         // + literal: Const { ty: for<'r, 's> fn(&'r log::Level, &'s log::Level) -> bool {<log::Level as core::cmp::PartialOrd>::le}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_6);                 // scope 0 at src\logger.rs:21:38: 21:39
        StorageDead(_3);                 // scope 0 at src\logger.rs:21:38: 21:39
        StorageDead(_4);                 // scope 0 at src\logger.rs:23:5: 23:6
        return;                          // scope 0 at src\logger.rs:23:6: 23:6
    }
}

fn logger::init() -> () {
    let mut _0: ();                      // return place in scope 0 at src\logger.rs:14:15: 14:15
    let _1: logger::init::Channels;      // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:183:13: 183:21
    let _2: ();                          // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:140:13: 140:63
    let mut _3: *mut logger::init::RttControlBlock; // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:140:30: 140:56
    let mut _4: &mut core::mem::MaybeUninit<logger::init::RttControlBlock>; // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:140:30: 140:43
    let mut _5: *mut core::mem::MaybeUninit<logger::init::RttControlBlock>; // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:140:30: 140:43
    let mut _7: *mut logger::init::RttControlBlock; // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:142:28: 142:54
    let mut _8: &mut core::mem::MaybeUninit<logger::init::RttControlBlock>; // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:142:28: 142:41
    let mut _9: *mut core::mem::MaybeUninit<logger::init::RttControlBlock>; // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:142:28: 142:41
    let mut _11: *const u8;              // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:27:19: 27:59
    let mut _12: &[u8];                  // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:27:19: 27:50
    let _13: &[u8];                      // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:27:19: 27:50
    let mut _14: &str;                   // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:27:19: 27:39
    let _15: &str;                       // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:27:19: 27:39
    let _17: ();                         // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:32:9: 35:11
    let mut _18: &mut rtt_target::rtt::RttChannel; // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:32:9: 32:24
    let _19: usize;                      // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:185:17: 185:18
    let mut _20: *const u8;              // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:32:30: 32:34
    let mut _21: rtt_target::ChannelMode; // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:32:36: 32:40
    let mut _22: *mut [u8];              // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:32:42: 35:10
    let mut _23: *mut [u8; 1024];        // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:34:13: 34:45
    let mut _24: &mut core::mem::MaybeUninit<[u8; 1024]>; // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:34:13: 34:32
    let mut _25: *mut core::mem::MaybeUninit<[u8; 1024]>; // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:34:13: 34:32
    let _26: ();                         // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:150:13: 150:73
    let mut _27: &mut rtt_target::rtt::RttHeader; // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:150:13: 150:22
    let mut _28: usize;                  // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:150:28: 150:48
    let mut _29: &[rtt_target::rtt::RttChannel]; // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:150:28: 150:42
    let mut _30: &[rtt_target::rtt::RttChannel; 1]; // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:150:28: 150:42
    let mut _31: usize;                  // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:150:50: 150:72
    let mut _32: &[rtt_target::rtt::RttChannel]; // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:150:50: 150:66
    let mut _33: &[rtt_target::rtt::RttChannel; 0]; // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:150:50: 150:66
    let mut _34: (rtt_target::UpChannel,); // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:57:9: 57:19
    let mut _35: rtt_target::UpChannel;  // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:52:17: 52:49
    let mut _36: *mut rtt_target::rtt::RttChannel; // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:52:23: 52:48
    let mut _37: *mut rtt_target::rtt::RttChannel; // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:52:23: 52:48
    let mut _38: &mut rtt_target::rtt::RttChannel; // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:52:23: 52:38
    let _39: usize;                      // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:185:17: 185:18
    let _40: ();                         // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:193:9: 193:49
    let mut _41: rtt_target::UpChannel;  // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:193:35: 193:48
    let _42: ();                         // in scope 0 at src\logger.rs:16:5: 16:86
    let mut _43: core::result::Result<(), log::SetLoggerError>; // in scope 0 at src\logger.rs:16:5: 16:77
    let mut _44: core::result::Result<(), log::SetLoggerError>; // in scope 0 at src\logger.rs:16:5: 16:29
    let mut _45: &dyn log::Log;          // in scope 0 at src\logger.rs:16:21: 16:28
    let mut _46: &logger::Logger;        // in scope 0 at src\logger.rs:16:21: 16:28
    let _47: &logger::Logger;            // in scope 0 at src\logger.rs:16:21: 16:28
    let _48: &logger::Logger;            // in scope 0 at src\logger.rs:16:22: 16:28
    let mut _49: [closure@src\logger.rs:16:34: 16:76]; // in scope 0 at src\logger.rs:16:34: 16:76
    scope 1 {
        debug channels => _1;            // in scope 1 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:183:13: 183:21
    }
    scope 2 {
        let _6: &mut logger::init::RttControlBlock; // in scope 2 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:142:17: 142:19
        scope 3 {
            debug cb => _6;              // in scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:142:17: 142:19
            let mut _10: *const u8;      // in scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:26:13: 26:21
            scope 4 {
                debug name => _10;       // in scope 4 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:26:13: 26:21
                let mut _16: rtt_target::ChannelMode; // in scope 4 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:29:13: 29:21
                scope 5 {
                    debug mode => _16;   // in scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:29:13: 29:21
                }
            }
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:183:13: 183:21
        StorageLive(_2);                 // scope 2 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:140:13: 140:63
        StorageLive(_3);                 // scope 2 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:140:30: 140:56
        StorageLive(_4);                 // scope 2 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:140:30: 140:43
        StorageLive(_5);                 // scope 2 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:140:30: 140:43
        _5 = const {alloc2: *mut core::mem::MaybeUninit<logger::init::RttControlBlock>}; // scope 2 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:140:30: 140:43
                                         // ty::Const
                                         // + ty: *mut core::mem::MaybeUninit<logger::init::RttControlBlock>
                                         // + val: Value(Scalar(alloc2))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:140:30: 140:43
                                         // + literal: Const { ty: *mut core::mem::MaybeUninit<logger::init::RttControlBlock>, val: Value(Scalar(alloc2)) }
        _4 = &mut (*_5);                 // scope 2 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:140:30: 140:43
        _3 = const core::mem::MaybeUninit::<logger::init::RttControlBlock>::as_mut_ptr(move _4) -> bb1; // scope 2 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:140:30: 140:56
                                         // ty::Const
                                         // + ty: for<'r> fn(&'r mut core::mem::MaybeUninit<logger::init::RttControlBlock>) -> *mut logger::init::RttControlBlock {core::mem::MaybeUninit::<logger::init::RttControlBlock>::as_mut_ptr}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:140:44: 140:54
                                         // + literal: Const { ty: for<'r> fn(&'r mut core::mem::MaybeUninit<logger::init::RttControlBlock>) -> *mut logger::init::RttControlBlock {core::mem::MaybeUninit::<logger::init::RttControlBlock>::as_mut_ptr}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_4);                 // scope 2 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:140:55: 140:56
        _2 = const core::intrinsics::write_bytes::<logger::init::RttControlBlock>(move _3, const 0_u8, const 1_usize) -> bb2; // scope 2 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:140:13: 140:63
                                         // ty::Const
                                         // + ty: unsafe fn(*mut logger::init::RttControlBlock, u8, usize) {core::intrinsics::write_bytes::<logger::init::RttControlBlock>}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:140:13: 140:29
                                         // + literal: Const { ty: unsafe fn(*mut logger::init::RttControlBlock, u8, usize) {core::intrinsics::write_bytes::<logger::init::RttControlBlock>}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: u8
                                         // + val: Value(Scalar(0x00))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:140:58: 140:59
                                         // + literal: Const { ty: u8, val: Value(Scalar(0x00)) }
                                         // ty::Const
                                         // + ty: usize
                                         // + val: Value(Scalar(0x00000001))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:140:61: 140:62
                                         // + literal: Const { ty: usize, val: Value(Scalar(0x00000001)) }
    }

    bb2: {
        StorageDead(_3);                 // scope 2 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:140:62: 140:63
        StorageDead(_5);                 // scope 2 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:140:63: 140:64
        StorageDead(_2);                 // scope 2 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:140:63: 140:64
        StorageLive(_6);                 // scope 2 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:142:17: 142:19
        StorageLive(_7);                 // scope 2 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:142:28: 142:54
        StorageLive(_8);                 // scope 2 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:142:28: 142:41
        StorageLive(_9);                 // scope 2 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:142:28: 142:41
        _9 = const {alloc2: *mut core::mem::MaybeUninit<logger::init::RttControlBlock>}; // scope 2 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:142:28: 142:41
                                         // ty::Const
                                         // + ty: *mut core::mem::MaybeUninit<logger::init::RttControlBlock>
                                         // + val: Value(Scalar(alloc2))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:142:28: 142:41
                                         // + literal: Const { ty: *mut core::mem::MaybeUninit<logger::init::RttControlBlock>, val: Value(Scalar(alloc2)) }
        _8 = &mut (*_9);                 // scope 2 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:142:28: 142:41
        _7 = const core::mem::MaybeUninit::<logger::init::RttControlBlock>::as_mut_ptr(move _8) -> bb3; // scope 2 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:142:28: 142:54
                                         // ty::Const
                                         // + ty: for<'r> fn(&'r mut core::mem::MaybeUninit<logger::init::RttControlBlock>) -> *mut logger::init::RttControlBlock {core::mem::MaybeUninit::<logger::init::RttControlBlock>::as_mut_ptr}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:142:42: 142:52
                                         // + literal: Const { ty: for<'r> fn(&'r mut core::mem::MaybeUninit<logger::init::RttControlBlock>) -> *mut logger::init::RttControlBlock {core::mem::MaybeUninit::<logger::init::RttControlBlock>::as_mut_ptr}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        StorageDead(_8);                 // scope 2 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:142:53: 142:54
        _6 = &mut (*_7);                 // scope 2 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:142:22: 142:54
        StorageDead(_9);                 // scope 2 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:142:54: 142:55
        StorageLive(_10);                // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:26:13: 26:21
        _10 = const core::ptr::null::<u8>() -> bb4; // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:26:35: 26:52
                                         // ty::Const
                                         // + ty: fn() -> *const u8 {core::ptr::null::<u8>}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:26:35: 26:50
                                         // + literal: Const { ty: fn() -> *const u8 {core::ptr::null::<u8>}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageLive(_11);                // scope 4 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:27:19: 27:59
        StorageLive(_12);                // scope 4 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:27:19: 27:50
        StorageLive(_13);                // scope 4 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:27:19: 27:50
        StorageLive(_14);                // scope 4 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:27:19: 27:39
        StorageLive(_15);                // scope 4 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:27:19: 27:39
        _15 = const "Terminal\u{0}";     // scope 4 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:27:19: 27:39
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [84, 101, 114, 109, 105, 110, 97, 108, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [511], len: Size { raw: 9 } }, size: Size { raw: 9 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 9 })
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:27:19: 27:39
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [84, 101, 114, 109, 105, 110, 97, 108, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [511], len: Size { raw: 9 } }, size: Size { raw: 9 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 9 }) }
        _14 = _15;                       // scope 4 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:27:19: 27:39
        _13 = const core::str::<impl str>::as_bytes(move _14) -> bb5; // scope 4 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:27:19: 27:50
                                         // ty::Const
                                         // + ty: for<'r> fn(&'r str) -> &'r [u8] {core::str::<impl str>::as_bytes}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:27:40: 27:48
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> &'r [u8] {core::str::<impl str>::as_bytes}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _12 = _13;                       // scope 4 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:27:19: 27:50
        StorageDead(_14);                // scope 4 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:27:49: 27:50
        _11 = const core::slice::<impl [u8]>::as_ptr(move _12) -> bb6; // scope 4 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:27:19: 27:59
                                         // ty::Const
                                         // + ty: for<'r> fn(&'r [u8]) -> *const u8 {core::slice::<impl [u8]>::as_ptr}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:27:51: 27:57
                                         // + literal: Const { ty: for<'r> fn(&'r [u8]) -> *const u8 {core::slice::<impl [u8]>::as_ptr}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        StorageDead(_12);                // scope 4 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:27:58: 27:59
        _10 = move _11;                  // scope 4 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:27:12: 27:59
        StorageDead(_11);                // scope 4 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:27:58: 27:59
        StorageDead(_15);                // scope 4 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:27:59: 27:60
        StorageDead(_13);                // scope 4 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:27:59: 27:60
        StorageLive(_16);                // scope 4 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:29:13: 29:21
        _16 = const rtt_target::ChannelMode::NoBlockSkip; // scope 4 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:29:24: 29:56
                                         // ty::Const
                                         // + ty: rtt_target::ChannelMode
                                         // + val: Value(Scalar(0x00000000))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:29:24: 29:56
                                         // + literal: Const { ty: rtt_target::ChannelMode, val: Value(Scalar(0x00000000)) }
        _16 = const rtt_target::ChannelMode::BlockIfFull; // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:30:12: 30:45
                                         // ty::Const
                                         // + ty: rtt_target::ChannelMode
                                         // + val: Value(Scalar(0x00000002))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:30:12: 30:45
                                         // + literal: Const { ty: rtt_target::ChannelMode, val: Value(Scalar(0x00000002)) }
        StorageLive(_17);                // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:32:9: 35:11
        StorageLive(_18);                // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:32:9: 32:24
        StorageLive(_19);                // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:185:17: 185:18
        _19 = const 0_usize;             // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:185:17: 185:18
                                         // ty::Const
                                         // + ty: usize
                                         // + val: Value(Scalar(0x00000000))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:185:17: 185:18
                                         // + literal: Const { ty: usize, val: Value(Scalar(0x00000000)) }
        _18 = &mut ((*_6).1: [rtt_target::rtt::RttChannel; 1])[_19]; // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:32:9: 32:24
        StorageLive(_20);                // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:32:30: 32:34
        _20 = _10;                       // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:32:30: 32:34
        StorageLive(_21);                // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:32:36: 32:40
        _21 = move _16;                  // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:32:36: 32:40
        StorageLive(_22);                // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:32:42: 35:10
        StorageLive(_23);                // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:34:13: 34:45
        StorageLive(_24);                // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:34:13: 34:32
        StorageLive(_25);                // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:34:13: 34:32
        _25 = const {alloc3: *mut core::mem::MaybeUninit<[u8; 1024]>}; // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:34:13: 34:32
                                         // ty::Const
                                         // + ty: *mut core::mem::MaybeUninit<[u8; 1024]>
                                         // + val: Value(Scalar(alloc3))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:34:13: 34:32
                                         // + literal: Const { ty: *mut core::mem::MaybeUninit<[u8; 1024]>, val: Value(Scalar(alloc3)) }
        _24 = &mut (*_25);               // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:34:13: 34:32
        _23 = const core::mem::MaybeUninit::<[u8; 1024]>::as_mut_ptr(move _24) -> bb7; // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:34:13: 34:45
                                         // ty::Const
                                         // + ty: for<'r> fn(&'r mut core::mem::MaybeUninit<[u8; 1024]>) -> *mut [u8; 1024] {core::mem::MaybeUninit::<[u8; 1024]>::as_mut_ptr}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:34:33: 34:43
                                         // + literal: Const { ty: for<'r> fn(&'r mut core::mem::MaybeUninit<[u8; 1024]>) -> *mut [u8; 1024] {core::mem::MaybeUninit::<[u8; 1024]>::as_mut_ptr}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        _22 = move _23 as *mut [u8] (Pointer(Unsize)); // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:34:13: 34:45
        StorageDead(_24);                // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:34:44: 34:45
        StorageDead(_23);                // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:34:44: 34:45
        _17 = const rtt_target::rtt::RttChannel::init(move _18, move _20, move _21, move _22) -> bb8; // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:32:9: 35:11
                                         // ty::Const
                                         // + ty: for<'r> unsafe fn(&'r mut rtt_target::rtt::RttChannel, *const u8, rtt_target::ChannelMode, *mut [u8]) {rtt_target::rtt::RttChannel::init}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:32:25: 32:29
                                         // + literal: Const { ty: for<'r> unsafe fn(&'r mut rtt_target::rtt::RttChannel, *const u8, rtt_target::ChannelMode, *mut [u8]) {rtt_target::rtt::RttChannel::init}, val: Value(Scalar(<ZST>)) }
    }

    bb8: {
        StorageDead(_22);                // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:35:10: 35:11
        StorageDead(_21);                // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:35:10: 35:11
        StorageDead(_20);                // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:35:10: 35:11
        StorageDead(_18);                // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:35:10: 35:11
        StorageDead(_25);                // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:35:11: 35:12
        StorageDead(_19);                // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:35:11: 35:12
        StorageDead(_17);                // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:35:11: 35:12
        StorageLive(_26);                // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:150:13: 150:73
        StorageLive(_27);                // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:150:13: 150:22
        _27 = &mut ((*_6).0: rtt_target::rtt::RttHeader); // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:150:13: 150:22
        StorageLive(_28);                // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:150:28: 150:48
        StorageLive(_29);                // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:150:28: 150:42
        StorageLive(_30);                // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:150:28: 150:42
        _30 = &((*_6).1: [rtt_target::rtt::RttChannel; 1]); // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:150:28: 150:42
        _29 = move _30 as &[rtt_target::rtt::RttChannel] (Pointer(Unsize)); // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:150:28: 150:42
        StorageDead(_30);                // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:150:41: 150:42
        _28 = const core::slice::<impl [rtt_target::rtt::RttChannel]>::len(move _29) -> bb9; // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:150:28: 150:48
                                         // ty::Const
                                         // + ty: for<'r> fn(&'r [rtt_target::rtt::RttChannel]) -> usize {core::slice::<impl [rtt_target::rtt::RttChannel]>::len}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:150:43: 150:46
                                         // + literal: Const { ty: for<'r> fn(&'r [rtt_target::rtt::RttChannel]) -> usize {core::slice::<impl [rtt_target::rtt::RttChannel]>::len}, val: Value(Scalar(<ZST>)) }
    }

    bb9: {
        StorageDead(_29);                // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:150:47: 150:48
        StorageLive(_31);                // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:150:50: 150:72
        StorageLive(_32);                // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:150:50: 150:66
        StorageLive(_33);                // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:150:50: 150:66
        _33 = &((*_6).2: [rtt_target::rtt::RttChannel; 0]); // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:150:50: 150:66
        _32 = move _33 as &[rtt_target::rtt::RttChannel] (Pointer(Unsize)); // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:150:50: 150:66
        StorageDead(_33);                // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:150:65: 150:66
        _31 = const core::slice::<impl [rtt_target::rtt::RttChannel]>::len(move _32) -> bb10; // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:150:50: 150:72
                                         // ty::Const
                                         // + ty: for<'r> fn(&'r [rtt_target::rtt::RttChannel]) -> usize {core::slice::<impl [rtt_target::rtt::RttChannel]>::len}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:150:67: 150:70
                                         // + literal: Const { ty: for<'r> fn(&'r [rtt_target::rtt::RttChannel]) -> usize {core::slice::<impl [rtt_target::rtt::RttChannel]>::len}, val: Value(Scalar(<ZST>)) }
    }

    bb10: {
        StorageDead(_32);                // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:150:71: 150:72
        _26 = const rtt_target::rtt::RttHeader::init(move _27, move _28, move _31) -> bb11; // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:150:13: 150:73
                                         // ty::Const
                                         // + ty: for<'r> unsafe fn(&'r mut rtt_target::rtt::RttHeader, usize, usize) {rtt_target::rtt::RttHeader::init}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:150:23: 150:27
                                         // + literal: Const { ty: for<'r> unsafe fn(&'r mut rtt_target::rtt::RttHeader, usize, usize) {rtt_target::rtt::RttHeader::init}, val: Value(Scalar(<ZST>)) }
    }

    bb11: {
        StorageDead(_31);                // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:150:72: 150:73
        StorageDead(_28);                // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:150:72: 150:73
        StorageDead(_27);                // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:150:72: 150:73
        StorageDead(_26);                // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:150:73: 150:74
        StorageLive(_34);                // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:57:9: 57:19
        StorageLive(_35);                // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:52:17: 52:49
        StorageLive(_36);                // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:52:23: 52:48
        StorageLive(_37);                // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:52:23: 52:48
        StorageLive(_38);                // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:52:23: 52:38
        StorageLive(_39);                // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:185:17: 185:18
        _39 = const 0_usize;             // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:185:17: 185:18
                                         // ty::Const
                                         // + ty: usize
                                         // + val: Value(Scalar(0x00000000))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:185:17: 185:18
                                         // + literal: Const { ty: usize, val: Value(Scalar(0x00000000)) }
        _38 = &mut ((*_6).1: [rtt_target::rtt::RttChannel; 1])[_39]; // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:52:23: 52:38
        _37 = &raw mut (*_38);           // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:52:23: 52:38
        _36 = _37;                       // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:52:23: 52:48
        _35 = const rtt_target::UpChannel::new(move _36) -> bb12; // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:52:17: 52:49
                                         // ty::Const
                                         // + ty: unsafe fn(*mut rtt_target::rtt::RttChannel) -> rtt_target::UpChannel {rtt_target::UpChannel::new}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:52:22: 52:23
                                         // + literal: Const { ty: unsafe fn(*mut rtt_target::rtt::RttChannel) -> rtt_target::UpChannel {rtt_target::UpChannel::new}, val: Value(Scalar(<ZST>)) }
    }

    bb12: {
        StorageDead(_36);                // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:52:48: 52:49
        (_34.0: rtt_target::UpChannel) = move _35; // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:57:9: 57:19
        StorageDead(_35);                // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:57:18: 57:19
        (_1.0: (rtt_target::UpChannel,)) = move _34; // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:157:13: 160:14
        StorageDead(_34);                // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:160:13: 160:14
        StorageDead(_16);                // scope 4 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:161:9: 161:10
        StorageDead(_10);                // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:161:9: 161:10
        StorageDead(_7);                 // scope 2 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:161:9: 161:10
        StorageDead(_6);                 // scope 2 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:161:9: 161:10
        StorageDead(_39);                // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:191:10: 191:11
        StorageDead(_38);                // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:191:10: 191:11
        StorageDead(_37);                // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:191:10: 191:11
        StorageLive(_40);                // scope 1 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:193:9: 193:49
        StorageLive(_41);                // scope 1 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:193:35: 193:48
        _41 = move ((_1.0: (rtt_target::UpChannel,)).0: rtt_target::UpChannel); // scope 1 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:193:35: 193:48
        _40 = const rtt_target::set_print_channel(move _41) -> bb13; // scope 1 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:193:9: 193:49
                                         // ty::Const
                                         // + ty: fn(rtt_target::UpChannel) {rtt_target::set_print_channel}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:193:9: 193:34
                                         // + literal: Const { ty: fn(rtt_target::UpChannel) {rtt_target::set_print_channel}, val: Value(Scalar(<ZST>)) }
    }

    bb13: {
        StorageDead(_41);                // scope 1 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:193:48: 193:49
        StorageDead(_40);                // scope 1 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:193:49: 193:50
        StorageLive(_42);                // scope 1 at src\logger.rs:16:5: 16:86
        StorageLive(_43);                // scope 1 at src\logger.rs:16:5: 16:77
        StorageLive(_44);                // scope 1 at src\logger.rs:16:5: 16:29
        StorageLive(_45);                // scope 1 at src\logger.rs:16:21: 16:28
        StorageLive(_46);                // scope 1 at src\logger.rs:16:21: 16:28
        StorageLive(_47);                // scope 1 at src\logger.rs:16:21: 16:28
        StorageLive(_48);                // scope 1 at src\logger.rs:16:22: 16:28
        _48 = const {alloc4: &logger::Logger}; // scope 1 at src\logger.rs:16:22: 16:28
                                         // ty::Const
                                         // + ty: &logger::Logger
                                         // + val: Value(Scalar(alloc4))
                                         // mir::Constant
                                         // + span: src\logger.rs:16:22: 16:28
                                         // + literal: Const { ty: &logger::Logger, val: Value(Scalar(alloc4)) }
        _47 = _48;                       // scope 1 at src\logger.rs:16:21: 16:28
        _46 = _47;                       // scope 1 at src\logger.rs:16:21: 16:28
        _45 = move _46 as &dyn log::Log (Pointer(Unsize)); // scope 1 at src\logger.rs:16:21: 16:28
        StorageDead(_46);                // scope 1 at src\logger.rs:16:27: 16:28
        _44 = const log::set_logger(move _45) -> bb14; // scope 1 at src\logger.rs:16:5: 16:29
                                         // ty::Const
                                         // + ty: fn(&'static (dyn log::Log + 'static)) -> core::result::Result<(), log::SetLoggerError> {log::set_logger}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\logger.rs:16:5: 16:20
                                         // + literal: Const { ty: fn(&'static (dyn log::Log + 'static)) -> core::result::Result<(), log::SetLoggerError> {log::set_logger}, val: Value(Scalar(<ZST>)) }
    }

    bb14: {
        StorageDead(_45);                // scope 1 at src\logger.rs:16:28: 16:29
        StorageLive(_49);                // scope 1 at src\logger.rs:16:34: 16:76
        _49 = const {transmute(()): [closure@src\logger.rs:16:34: 16:76]}; // scope 1 at src\logger.rs:16:34: 16:76
                                         // ty::Const
                                         // + ty: [closure@src\logger.rs:16:34: 16:76]
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\logger.rs:16:34: 16:76
                                         // + literal: Const { ty: [closure@src\logger.rs:16:34: 16:76], val: Value(Scalar(<ZST>)) }
        _43 = const core::result::Result::<(), log::SetLoggerError>::map::<(), [closure@src\logger.rs:16:34: 16:76]>(move _44, move _49) -> bb15; // scope 1 at src\logger.rs:16:5: 16:77
                                         // ty::Const
                                         // + ty: fn(core::result::Result<(), log::SetLoggerError>, [closure@src\logger.rs:16:34: 16:76]) -> core::result::Result<(), log::SetLoggerError> {core::result::Result::<(), log::SetLoggerError>::map::<(), [closure@src\logger.rs:16:34: 16:76]>}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\logger.rs:16:30: 16:33
                                         // + literal: Const { ty: fn(core::result::Result<(), log::SetLoggerError>, [closure@src\logger.rs:16:34: 16:76]) -> core::result::Result<(), log::SetLoggerError> {core::result::Result::<(), log::SetLoggerError>::map::<(), [closure@src\logger.rs:16:34: 16:76]>}, val: Value(Scalar(<ZST>)) }
    }

    bb15: {
        StorageDead(_49);                // scope 1 at src\logger.rs:16:76: 16:77
        StorageDead(_44);                // scope 1 at src\logger.rs:16:76: 16:77
        _42 = const core::result::Result::<(), log::SetLoggerError>::unwrap(move _43) -> bb16; // scope 1 at src\logger.rs:16:5: 16:86
                                         // ty::Const
                                         // + ty: fn(core::result::Result<(), log::SetLoggerError>) {core::result::Result::<(), log::SetLoggerError>::unwrap}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\logger.rs:16:78: 16:84
                                         // + literal: Const { ty: fn(core::result::Result<(), log::SetLoggerError>) {core::result::Result::<(), log::SetLoggerError>::unwrap}, val: Value(Scalar(<ZST>)) }
    }

    bb16: {
        StorageDead(_43);                // scope 1 at src\logger.rs:16:85: 16:86
        StorageDead(_48);                // scope 1 at src\logger.rs:16:86: 16:87
        StorageDead(_47);                // scope 1 at src\logger.rs:16:86: 16:87
        StorageDead(_42);                // scope 1 at src\logger.rs:16:86: 16:87
        _0 = const ();                   // scope 0 at src\logger.rs:14:15: 17:2
                                         // ty::Const
                                         // + ty: ()
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\logger.rs:14:15: 17:2
                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }
        StorageDead(_1);                 // scope 0 at src\logger.rs:17:1: 17:2
        return;                          // scope 0 at src\logger.rs:17:2: 17:2
    }
}

alloc4 (static: logger::LOGGER, size: 4, align: 4) {
    03 00 00 00                                     │ ....
}

alloc3 (static: logger::init::_RTT_CHANNEL_BUFFER, size: 1024, align: 1) {
    0x000 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x010 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x020 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x030 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x040 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x050 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x060 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x070 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x080 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x090 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x0a0 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x0b0 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x0c0 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x0d0 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x0e0 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x0f0 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x100 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x110 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x120 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x130 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x140 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x150 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x160 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x170 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x180 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x190 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x1a0 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x1b0 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x1c0 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x1d0 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x1e0 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x1f0 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x200 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x210 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x220 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x230 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x240 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x250 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x260 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x270 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x280 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x290 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x2a0 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x2b0 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x2c0 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x2d0 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x2e0 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x2f0 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x300 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x310 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x320 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x330 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x340 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x350 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x360 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x370 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x380 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x390 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x3a0 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x3b0 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x3c0 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x3d0 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x3e0 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x3f0 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
}

alloc2 (static: logger::init::CONTROL_BLOCK, size: 48, align: 4) {
    0x00 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x10 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x20 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
}

fn __cortex_m_rt_main::{{closure}}#0(_1: [closure@src\main.rs:66:31: 68:6 sdmmc:sdmmc::Sdmmc], _2: &cortex_m::interrupt::CriticalSection) -> () {
    debug cs => _2;                      // in scope 0 at src\main.rs:66:32: 66:34
    debug sdmmc => (_1.0: sdmmc::Sdmmc); // in scope 0 at src\main.rs:45:9: 45:18
    let mut _0: ();                      // return place in scope 0 at src\main.rs:66:36: 66:36
    let _3: core::option::Option<sdmmc::Sdmmc>; // in scope 0 at src\main.rs:67:9: 67:46
    let mut _4: &core::cell::RefCell<core::option::Option<sdmmc::Sdmmc>>; // in scope 0 at src\main.rs:67:9: 67:25
    let _5: &core::cell::RefCell<core::option::Option<sdmmc::Sdmmc>>; // in scope 0 at src\main.rs:67:9: 67:25
    let mut _6: &cortex_m::interrupt::Mutex<core::cell::RefCell<core::option::Option<sdmmc::Sdmmc>>>; // in scope 0 at src\main.rs:67:9: 67:14
    let _7: &cortex_m::interrupt::Mutex<core::cell::RefCell<core::option::Option<sdmmc::Sdmmc>>>; // in scope 0 at src\main.rs:67:9: 67:14
    let mut _8: &cortex_m::interrupt::CriticalSection; // in scope 0 at src\main.rs:67:22: 67:24
    let mut _9: core::option::Option<sdmmc::Sdmmc>; // in scope 0 at src\main.rs:67:34: 67:45
    let mut _10: sdmmc::Sdmmc;           // in scope 0 at src\main.rs:67:39: 67:44

    bb0: {
        StorageLive(_3);                 // scope 0 at src\main.rs:67:9: 67:46
        StorageLive(_4);                 // scope 0 at src\main.rs:67:9: 67:25
        StorageLive(_5);                 // scope 0 at src\main.rs:67:9: 67:25
        StorageLive(_6);                 // scope 0 at src\main.rs:67:9: 67:14
        StorageLive(_7);                 // scope 0 at src\main.rs:67:9: 67:14
        _7 = const {alloc1: &cortex_m::interrupt::Mutex<core::cell::RefCell<core::option::Option<sdmmc::Sdmmc>>>}; // scope 0 at src\main.rs:67:9: 67:14
                                         // ty::Const
                                         // + ty: &cortex_m::interrupt::Mutex<core::cell::RefCell<core::option::Option<sdmmc::Sdmmc>>>
                                         // + val: Value(Scalar(alloc1))
                                         // mir::Constant
                                         // + span: src\main.rs:67:9: 67:14
                                         // + literal: Const { ty: &cortex_m::interrupt::Mutex<core::cell::RefCell<core::option::Option<sdmmc::Sdmmc>>>, val: Value(Scalar(alloc1)) }
        _6 = _7;                         // scope 0 at src\main.rs:67:9: 67:14
        StorageLive(_8);                 // scope 0 at src\main.rs:67:22: 67:24
        _8 = _2;                         // scope 0 at src\main.rs:67:22: 67:24
        _5 = const cortex_m::interrupt::Mutex::<core::cell::RefCell<core::option::Option<sdmmc::Sdmmc>>>::borrow(move _6, move _8) -> bb1; // scope 0 at src\main.rs:67:9: 67:25
                                         // ty::Const
                                         // + ty: for<'cs> fn(&'cs cortex_m::interrupt::Mutex<core::cell::RefCell<core::option::Option<sdmmc::Sdmmc>>>, &'cs cortex_m::interrupt::CriticalSection) -> &'cs core::cell::RefCell<core::option::Option<sdmmc::Sdmmc>> {cortex_m::interrupt::Mutex::<core::cell::RefCell<core::option::Option<sdmmc::Sdmmc>>>::borrow}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:67:15: 67:21
                                         // + literal: Const { ty: for<'cs> fn(&'cs cortex_m::interrupt::Mutex<core::cell::RefCell<core::option::Option<sdmmc::Sdmmc>>>, &'cs cortex_m::interrupt::CriticalSection) -> &'cs core::cell::RefCell<core::option::Option<sdmmc::Sdmmc>> {cortex_m::interrupt::Mutex::<core::cell::RefCell<core::option::Option<sdmmc::Sdmmc>>>::borrow}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _4 = _5;                         // scope 0 at src\main.rs:67:9: 67:25
        StorageDead(_8);                 // scope 0 at src\main.rs:67:24: 67:25
        StorageDead(_6);                 // scope 0 at src\main.rs:67:24: 67:25
        StorageLive(_9);                 // scope 0 at src\main.rs:67:34: 67:45
        StorageLive(_10);                // scope 0 at src\main.rs:67:39: 67:44
        _10 = move (_1.0: sdmmc::Sdmmc); // scope 0 at src\main.rs:67:39: 67:44
        ((_9 as Some).0: sdmmc::Sdmmc) = move _10; // scope 0 at src\main.rs:67:34: 67:45
        discriminant(_9) = 1;            // scope 0 at src\main.rs:67:34: 67:45
        StorageDead(_10);                // scope 0 at src\main.rs:67:44: 67:45
        _3 = const core::cell::RefCell::<core::option::Option<sdmmc::Sdmmc>>::replace(move _4, move _9) -> bb2; // scope 0 at src\main.rs:67:9: 67:46
                                         // ty::Const
                                         // + ty: for<'r> fn(&'r core::cell::RefCell<core::option::Option<sdmmc::Sdmmc>>, core::option::Option<sdmmc::Sdmmc>) -> core::option::Option<sdmmc::Sdmmc> {core::cell::RefCell::<core::option::Option<sdmmc::Sdmmc>>::replace}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:67:26: 67:33
                                         // + literal: Const { ty: for<'r> fn(&'r core::cell::RefCell<core::option::Option<sdmmc::Sdmmc>>, core::option::Option<sdmmc::Sdmmc>) -> core::option::Option<sdmmc::Sdmmc> {core::cell::RefCell::<core::option::Option<sdmmc::Sdmmc>>::replace}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_9);                 // scope 0 at src\main.rs:67:45: 67:46
        StorageDead(_4);                 // scope 0 at src\main.rs:67:45: 67:46
        StorageDead(_7);                 // scope 0 at src\main.rs:67:46: 67:47
        StorageDead(_5);                 // scope 0 at src\main.rs:67:46: 67:47
        StorageDead(_3);                 // scope 0 at src\main.rs:67:46: 67:47
        _0 = const ();                   // scope 0 at src\main.rs:66:36: 68:6
                                         // ty::Const
                                         // + ty: ()
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:66:36: 68:6
                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }
        return;                          // scope 0 at src\main.rs:68:6: 68:6
    }
}

alloc1 (static: SDMMC, size: 160, align: 8) {
    0x00 │ 00 00 00 00 __ __ __ __ __ __ __ __ __ __ __ __ │ ....░░░░░░░░░░░░
    0x10 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x20 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x30 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x40 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x50 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x60 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x70 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x80 │ __ __ __ __ __ __ __ __ 03 __ __ __ __ __ __ __ │ ░░░░░░░░.░░░░░░░
    0x90 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
}

fn sdmmc::<impl at src\sdmmc.rs:11:1: 70:2>::is_detected(_1: &sdmmc::Sdmmc) -> bool {
    debug self => _1;                    // in scope 0 at src\sdmmc.rs:61:24: 61:29
    let mut _0: bool;                    // return place in scope 0 at src\sdmmc.rs:61:34: 61:38
    let mut _2: core::result::Result<bool, stm32h7xx_hal::Never>; // in scope 0 at src\sdmmc.rs:62:9: 62:30
    let mut _3: &stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>>; // in scope 0 at src\sdmmc.rs:62:9: 62:20

    bb0: {
        StorageLive(_2);                 // scope 0 at src\sdmmc.rs:62:9: 62:30
        StorageLive(_3);                 // scope 0 at src\sdmmc.rs:62:9: 62:20
        _3 = &((*_1).1: stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>>); // scope 0 at src\sdmmc.rs:62:9: 62:20
        _2 = const <stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>> as stm32h7xx_hal::embedded_hal::digital::v2::InputPin>::is_high(move _3) -> bb1; // scope 0 at src\sdmmc.rs:62:9: 62:30
                                         // ty::Const
                                         // + ty: for<'r> fn(&'r stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>>) -> core::result::Result<bool, <stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>> as stm32h7xx_hal::embedded_hal::digital::v2::InputPin>::Error> {<stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>> as stm32h7xx_hal::embedded_hal::digital::v2::InputPin>::is_high}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:62:21: 62:28
                                         // + literal: Const { ty: for<'r> fn(&'r stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>>) -> core::result::Result<bool, <stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>> as stm32h7xx_hal::embedded_hal::digital::v2::InputPin>::Error> {<stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>> as stm32h7xx_hal::embedded_hal::digital::v2::InputPin>::is_high}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_3);                 // scope 0 at src\sdmmc.rs:62:29: 62:30
        _0 = const core::result::Result::<bool, stm32h7xx_hal::Never>::unwrap(move _2) -> bb2; // scope 0 at src\sdmmc.rs:62:9: 62:39
                                         // ty::Const
                                         // + ty: fn(core::result::Result<bool, stm32h7xx_hal::Never>) -> bool {core::result::Result::<bool, stm32h7xx_hal::Never>::unwrap}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:62:31: 62:37
                                         // + literal: Const { ty: fn(core::result::Result<bool, stm32h7xx_hal::Never>) -> bool {core::result::Result::<bool, stm32h7xx_hal::Never>::unwrap}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_2);                 // scope 0 at src\sdmmc.rs:62:38: 62:39
        return;                          // scope 0 at src\sdmmc.rs:63:6: 63:6
    }
}

logger::init::_RTT_CHANNEL_BUFFER::{{constant}}#0: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:197:40: 197:44

    bb0: {
        _0 = const 1024_usize;           // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:197:40: 197:44
                                         // ty::Const
                                         // + ty: usize
                                         // + val: Value(Scalar(0x00000400))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:197:40: 197:44
                                         // + literal: Const { ty: usize, val: Value(Scalar(0x00000400)) }
        return;                          // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:197:40: 197:44
    }
}

fn logger::<impl at src\logger.rs:19:1: 30:2>::flush(_1: &logger::Logger) -> () {
    debug self => _1;                    // in scope 0 at src\logger.rs:29:14: 29:19
    let mut _0: ();                      // return place in scope 0 at src\logger.rs:29:21: 29:21

    bb0: {
        _0 = const ();                   // scope 0 at src\logger.rs:29:21: 29:23
                                         // ty::Const
                                         // + ty: ()
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\logger.rs:29:21: 29:23
                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }
        return;                          // scope 0 at src\logger.rs:29:23: 29:23
    }
}

static logger::LOGGER: logger::Logger = {
    let mut _0: logger::Logger;          // return place in scope 0 at src\logger.rs:10:16: 10:22
    let mut _1: log::Level;              // in scope 0 at src\logger.rs:11:12: 11:23

    bb0: {
        StorageLive(_1);                 // scope 0 at src\logger.rs:11:12: 11:23
        discriminant(_1) = 2;            // scope 0 at src\logger.rs:11:12: 11:23
        (_0.0: log::Level) = move _1;    // scope 0 at src\logger.rs:10:25: 12:2
        return;                          // scope 0 at src\logger.rs:10:1: 12:3
    }
}

fn __cortex_m_rt_EXTI9_5() -> () {
    let mut _0: ();                      // return place in scope 0 at src\main.rs:80:14: 80:14
    let _1: ();                          // in scope 0 at src\main.rs:81:5: 92:7
    let mut _2: [closure@src\main.rs:81:31: 92:6]; // in scope 0 at src\main.rs:81:31: 92:6

    bb0: {
        StorageLive(_1);                 // scope 0 at src\main.rs:81:5: 92:7
        StorageLive(_2);                 // scope 0 at src\main.rs:81:31: 92:6
        _2 = const {transmute(()): [closure@src\main.rs:81:31: 92:6]}; // scope 0 at src\main.rs:81:31: 92:6
                                         // ty::Const
                                         // + ty: [closure@src\main.rs:81:31: 92:6]
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:81:31: 92:6
                                         // + literal: Const { ty: [closure@src\main.rs:81:31: 92:6], val: Value(Scalar(<ZST>)) }
        _1 = const cortex_m::interrupt::free::<[closure@src\main.rs:81:31: 92:6], ()>(move _2) -> bb1; // scope 0 at src\main.rs:81:5: 92:7
                                         // ty::Const
                                         // + ty: fn([closure@src\main.rs:81:31: 92:6]) {cortex_m::interrupt::free::<[closure@src\main.rs:81:31: 92:6], ()>}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:81:5: 81:30
                                         // + literal: Const { ty: fn([closure@src\main.rs:81:31: 92:6]) {cortex_m::interrupt::free::<[closure@src\main.rs:81:31: 92:6], ()>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_2);                 // scope 0 at src\main.rs:92:6: 92:7
        StorageDead(_1);                 // scope 0 at src\main.rs:92:7: 92:8
        _0 = const ();                   // scope 0 at src\main.rs:80:14: 93:2
                                         // ty::Const
                                         // + ty: ()
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:80:14: 93:2
                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }
        return;                          // scope 0 at src\main.rs:93:2: 93:2
    }
}

fn __cortex_m_rt_main() -> ! {
    let mut _0: !;                       // return place in scope 0 at src\main.rs:20:14: 20:15
    let _1: ();                          // in scope 0 at src\main.rs:21:5: 21:19
    let _2: cortex_m::Peripherals;       // in scope 0 at src\main.rs:22:9: 22:12
    let mut _3: core::option::Option<cortex_m::Peripherals>; // in scope 0 at src\main.rs:22:15: 22:44
    let mut _5: core::option::Option<stm32h7xx_hal::stm32::Peripherals>; // in scope 0 at src\main.rs:23:18: 23:42
    let mut _7: bool;                    // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:73
    let mut _8: bool;                    // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:43
    let mut _9: &log::Level;             // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:15
    let mut _10: &log::LevelFilter;      // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:19: 34:43
    let mut _11: bool;                   // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:47: 34:73
    let mut _12: &log::Level;            // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:47: 34:50
    let mut _13: &log::LevelFilter;      // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:54: 34:73
    let _14: log::LevelFilter;           // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:54: 34:73
    let mut _15: core::fmt::Arguments;   // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
    let mut _16: &[&str];                // in scope 0 at src\main.rs:26:11: 26:43
    let mut _17: &[&str; 1];             // in scope 0 at src\main.rs:26:11: 26:43
    let _18: &[&str; 1];                 // in scope 0 at src\main.rs:26:11: 26:43
    let mut _19: &[core::fmt::ArgumentV1]; // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
    let mut _20: &[core::fmt::ArgumentV1; 0]; // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
    let _21: &[core::fmt::ArgumentV1; 0]; // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
    let _22: ();                         // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:37:13: 41:14
    let mut _23: &str;                   // in scope 0 at src\main.rs:26:11: 26:43
    let _24: &str;                       // in scope 0 at src\main.rs:26:11: 26:43
    let mut _25: log::Level;             // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:39:17: 39:20
    let mut _26: &(&str, &str, &str, u32); // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:17: 40:79
    let _27: &(&str, &str, &str, u32);   // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:17: 40:79
    let mut _29: stm32h7xx_hal::stm32::PWR; // in scope 0 at src\main.rs:27:15: 27:21
    let mut _31: stm32h7xx_hal::pwr::Pwr; // in scope 0 at src\main.rs:28:18: 28:21
    let mut _33: bool;                   // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:73
    let mut _34: bool;                   // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:43
    let mut _35: &log::Level;            // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:15
    let mut _36: &log::LevelFilter;      // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:19: 34:43
    let mut _37: bool;                   // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:47: 34:73
    let mut _38: &log::Level;            // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:47: 34:50
    let mut _39: &log::LevelFilter;      // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:54: 34:73
    let _40: log::LevelFilter;           // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:54: 34:73
    let mut _41: core::fmt::Arguments;   // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
    let mut _42: &[&str];                // in scope 0 at src\main.rs:31:11: 31:43
    let mut _43: &[&str; 1];             // in scope 0 at src\main.rs:31:11: 31:43
    let _44: &[&str; 1];                 // in scope 0 at src\main.rs:31:11: 31:43
    let mut _45: &[core::fmt::ArgumentV1]; // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
    let mut _46: &[core::fmt::ArgumentV1; 0]; // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
    let _47: &[core::fmt::ArgumentV1; 0]; // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
    let _48: ();                         // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:37:13: 41:14
    let mut _49: &str;                   // in scope 0 at src\main.rs:31:11: 31:43
    let _50: &str;                       // in scope 0 at src\main.rs:31:11: 31:43
    let mut _51: log::Level;             // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:39:17: 39:20
    let mut _52: &(&str, &str, &str, u32); // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:17: 40:79
    let _53: &(&str, &str, &str, u32);   // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:17: 40:79
    let mut _55: stm32h7xx_hal::stm32::RCC; // in scope 0 at src\main.rs:32:15: 32:21
    let mut _57: stm32h7xx_hal::rcc::Rcc; // in scope 0 at src\main.rs:34:16: 36:30
    let mut _58: stm32h7xx_hal::rcc::Rcc; // in scope 0 at src\main.rs:34:16: 35:27
    let mut _59: stm32h7xx_hal::rcc::Rcc; // in scope 0 at src\main.rs:34:16: 34:19
    let mut _60: stm32h7xx_hal::time::MegaHertz; // in scope 0 at src\main.rs:35:17: 35:26
    let mut _61: stm32h7xx_hal::time::MegaHertz; // in scope 0 at src\main.rs:36:20: 36:29
    let mut _62: stm32h7xx_hal::pwr::PowerConfiguration; // in scope 0 at src\main.rs:37:17: 37:23
    let mut _63: &stm32h7xx_hal::stm32::SYSCFG; // in scope 0 at src\main.rs:37:25: 37:35
    let _64: &stm32h7xx_hal::stm32::SYSCFG; // in scope 0 at src\main.rs:37:25: 37:35
    let mut _66: stm32h7xx_hal::stm32::GPIOA; // in scope 0 at src\main.rs:39:17: 39:25
    let mut _67: stm32h7xx_hal::rcc::rec::Gpioa; // in scope 0 at src\main.rs:39:32: 39:53
    let mut _69: stm32h7xx_hal::stm32::GPIOB; // in scope 0 at src\main.rs:40:17: 40:25
    let mut _70: stm32h7xx_hal::rcc::rec::Gpiob; // in scope 0 at src\main.rs:40:32: 40:53
    let _71: stm32h7xx_hal::gpio::gpiob::PB3<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF0>>; // in scope 0 at src\main.rs:41:5: 41:35
    let mut _72: stm32h7xx_hal::gpio::gpiob::PB3<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF0>>; // in scope 0 at src\main.rs:41:5: 41:14
    let mut _74: stm32h7xx_hal::stm32::GPIOC; // in scope 0 at src\main.rs:42:17: 42:25
    let mut _75: stm32h7xx_hal::rcc::rec::Gpioc; // in scope 0 at src\main.rs:42:32: 42:53
    let mut _77: stm32h7xx_hal::stm32::GPIOD; // in scope 0 at src\main.rs:43:17: 43:25
    let mut _78: stm32h7xx_hal::rcc::rec::Gpiod; // in scope 0 at src\main.rs:43:32: 43:53
    let mut _80: stm32h7xx_hal::gpio::gpioc::PC12<stm32h7xx_hal::gpio::Analog>; // in scope 0 at src\main.rs:46:9: 46:19
    let mut _81: stm32h7xx_hal::gpio::gpiod::PD2<stm32h7xx_hal::gpio::Analog>; // in scope 0 at src\main.rs:47:9: 47:18
    let mut _82: stm32h7xx_hal::gpio::gpioc::PC8<stm32h7xx_hal::gpio::Analog>; // in scope 0 at src\main.rs:48:9: 48:18
    let mut _83: stm32h7xx_hal::gpio::gpioc::PC9<stm32h7xx_hal::gpio::Analog>; // in scope 0 at src\main.rs:49:9: 49:18
    let mut _84: stm32h7xx_hal::gpio::gpioc::PC10<stm32h7xx_hal::gpio::Analog>; // in scope 0 at src\main.rs:50:9: 50:19
    let mut _85: stm32h7xx_hal::gpio::gpioc::PC11<stm32h7xx_hal::gpio::Analog>; // in scope 0 at src\main.rs:51:9: 51:19
    let mut _86: stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Analog>; // in scope 0 at src\main.rs:52:9: 52:18
    let mut _87: stm32h7xx_hal::gpio::gpioa::PA11<stm32h7xx_hal::gpio::Analog>; // in scope 0 at src\main.rs:53:9: 53:19
    let mut _88: stm32h7xx_hal::stm32::SDMMC1; // in scope 0 at src\main.rs:54:9: 54:18
    let mut _89: stm32h7xx_hal::rcc::rec::Sdmmc1; // in scope 0 at src\main.rs:55:9: 55:31
    let mut _90: &mut stm32h7xx_hal::stm32::SYSCFG; // in scope 0 at src\main.rs:56:9: 56:23
    let mut _91: &mut stm32h7xx_hal::stm32::SYSCFG; // in scope 0 at src\main.rs:56:9: 56:23
    let mut _92: &mut stm32h7xx_hal::stm32::EXTI; // in scope 0 at src\main.rs:57:9: 57:21
    let mut _93: &mut stm32h7xx_hal::stm32::EXTI; // in scope 0 at src\main.rs:57:9: 57:21
    let mut _94: &stm32h7xx_hal::rcc::CoreClocks; // in scope 0 at src\main.rs:58:9: 58:21
    let _95: &stm32h7xx_hal::rcc::CoreClocks; // in scope 0 at src\main.rs:58:9: 58:21
    let mut _96: bool;                   // in scope 0 at src\main.rs:60:8: 60:27
    let mut _97: &sdmmc::Sdmmc;          // in scope 0 at src\main.rs:60:8: 60:13
    let mut _98: core::result::Result<(), stm32h7xx_hal::sdmmc::Error>; // in scope 0 at src\main.rs:61:25: 61:42
    let mut _99: &mut sdmmc::Sdmmc;      // in scope 0 at src\main.rs:61:25: 61:30
    let mut _100: isize;                 // in scope 0 at src\main.rs:61:16: 61:22
    let mut _103: bool;                  // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:12: 46:73
    let mut _104: bool;                  // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:12: 46:43
    let mut _105: &log::Level;           // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:12: 46:15
    let mut _106: &log::LevelFilter;     // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:19: 46:43
    let mut _107: bool;                  // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:47: 46:73
    let mut _108: &log::Level;           // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:47: 46:50
    let mut _109: &log::LevelFilter;     // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:54: 46:73
    let _110: log::LevelFilter;          // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:54: 46:73
    let _111: ();                        // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:47:13: 51:14
    let mut _112: core::fmt::Arguments;  // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
    let mut _113: &[&str];               // in scope 0 at src\main.rs:62:20: 62:61
    let mut _114: &[&str; 1];            // in scope 0 at src\main.rs:62:20: 62:61
    let _115: &[&str; 1];                // in scope 0 at src\main.rs:62:20: 62:61
    let mut _116: &[core::fmt::ArgumentV1]; // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
    let mut _117: &[core::fmt::ArgumentV1; 1]; // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
    let _118: &[core::fmt::ArgumentV1; 1]; // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
    let _119: [core::fmt::ArgumentV1; 1]; // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
    let mut _120: (&stm32h7xx_hal::sdmmc::Error,); // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
    let mut _121: &stm32h7xx_hal::sdmmc::Error; // in scope 0 at src\main.rs:62:63: 62:64
    let mut _123: core::fmt::ArgumentV1; // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
    let mut _124: &stm32h7xx_hal::sdmmc::Error; // in scope 0 at src\main.rs:62:63: 62:64
    let mut _125: for<'r, 's, 't0> fn(&'r stm32h7xx_hal::sdmmc::Error, &'s mut core::fmt::Formatter<'t0>) -> core::result::Result<(), core::fmt::Error>; // in scope 0 at src\main.rs:62:63: 62:64
    let mut _126: log::Level;            // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:49:17: 49:20
    let mut _127: &(&str, &str, &str, u32); // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:50:17: 50:79
    let _128: &(&str, &str, &str, u32);  // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:50:17: 50:79
    let _129: ();                        // in scope 0 at src\main.rs:66:5: 68:7
    let mut _130: [closure@src\main.rs:66:31: 68:6 sdmmc:sdmmc::Sdmmc]; // in scope 0 at src\main.rs:66:31: 68:6
    let _131: ();                        // in scope 0 at src\main.rs:71:9: 71:46
    let mut _132: stm32h7xx_hal::interrupt; // in scope 0 at src\main.rs:71:27: 71:45
    let _133: ();                        // in scope 0 at src\main.rs:75:9: 75:19
    scope 1 {
        debug _cp => _2;                 // in scope 1 at src\main.rs:22:9: 22:12
        let mut _4: stm32h7xx_hal::stm32::Peripherals; // in scope 1 at src\main.rs:23:9: 23:15
        scope 2 {
            debug dp => _4;              // in scope 2 at src\main.rs:23:9: 23:15
            let _6: log::Level;          // in scope 2 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:33:13: 33:16
            let _28: stm32h7xx_hal::pwr::Pwr; // in scope 2 at src\main.rs:27:9: 27:12
            scope 3 {
                debug lvl => _6;         // in scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:33:13: 33:16
                let mut _142: &[core::fmt::ArgumentV1; 0]; // in scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
                let mut _143: &[&str; 1]; // in scope 3 at src\main.rs:26:11: 26:43
                let mut _144: &log::LevelFilter; // in scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:19: 34:43
                scope 4 {
                    let mut _141: &(&str, &str, &str, u32); // in scope 4 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:17: 40:79
                }
            }
            scope 5 {
                debug pwr => _28;        // in scope 5 at src\main.rs:27:9: 27:12
                let _30: stm32h7xx_hal::pwr::PowerConfiguration; // in scope 5 at src\main.rs:28:9: 28:15
                scope 6 {
                    debug pwrcfg => _30; // in scope 6 at src\main.rs:28:9: 28:15
                    let _32: log::Level; // in scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:33:13: 33:16
                    let _54: stm32h7xx_hal::rcc::Rcc; // in scope 6 at src\main.rs:32:9: 32:12
                    scope 7 {
                        debug lvl => _32; // in scope 7 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:33:13: 33:16
                        let mut _138: &[core::fmt::ArgumentV1; 0]; // in scope 7 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
                        let mut _139: &[&str; 1]; // in scope 7 at src\main.rs:31:11: 31:43
                        let mut _140: &log::LevelFilter; // in scope 7 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:19: 34:43
                        scope 8 {
                            let mut _137: &(&str, &str, &str, u32); // in scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:17: 40:79
                        }
                    }
                    scope 9 {
                        debug rcc => _54; // in scope 9 at src\main.rs:32:9: 32:12
                        let _56: stm32h7xx_hal::rcc::Ccdr; // in scope 9 at src\main.rs:34:9: 34:13
                        scope 10 {
                            debug ccdr => _56; // in scope 10 at src\main.rs:34:9: 34:13
                            let _65: stm32h7xx_hal::gpio::gpioa::Parts; // in scope 10 at src\main.rs:39:9: 39:14
                            scope 11 {
                                debug gpioa => _65; // in scope 11 at src\main.rs:39:9: 39:14
                                let _68: stm32h7xx_hal::gpio::gpiob::Parts; // in scope 11 at src\main.rs:40:9: 40:14
                                scope 12 {
                                    debug gpiob => _68; // in scope 12 at src\main.rs:40:9: 40:14
                                    let _73: stm32h7xx_hal::gpio::gpioc::Parts; // in scope 12 at src\main.rs:42:9: 42:14
                                    scope 13 {
                                        debug gpioc => _73; // in scope 13 at src\main.rs:42:9: 42:14
                                        let _76: stm32h7xx_hal::gpio::gpiod::Parts; // in scope 13 at src\main.rs:43:9: 43:14
                                        scope 14 {
                                            debug gpiod => _76; // in scope 14 at src\main.rs:43:9: 43:14
                                            let mut _79: sdmmc::Sdmmc; // in scope 14 at src\main.rs:45:9: 45:18
                                            scope 15 {
                                                debug sdmmc => _79; // in scope 15 at src\main.rs:45:9: 45:18
                                                let _101: stm32h7xx_hal::sdmmc::Error; // in scope 15 at src\main.rs:61:20: 61:21
                                                scope 16 {
                                                    debug e => _101; // in scope 16 at src\main.rs:61:20: 61:21
                                                    let _102: log::Level; // in scope 16 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:45:13: 45:16
                                                    scope 17 {
                                                        debug lvl => _102; // in scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:45:13: 45:16
                                                        let _122: &stm32h7xx_hal::sdmmc::Error; // in scope 17 at src\main.rs:62:63: 62:64
                                                        let mut _134: &(&str, &str, &str, u32); // in scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:50:17: 50:79
                                                        let mut _135: &[&str; 1]; // in scope 17 at src\main.rs:62:20: 62:61
                                                        let mut _136: &log::LevelFilter; // in scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:19: 46:43
                                                        scope 18 {
                                                            debug arg0 => _122; // in scope 18 at src\main.rs:62:63: 62:64
                                                        }
                                                    }
                                                }
                                                scope 19 {
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at src\main.rs:21:5: 21:19
        _1 = const logger::init() -> bb1; // scope 0 at src\main.rs:21:5: 21:19
                                         // ty::Const
                                         // + ty: fn() {logger::init}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:21:5: 21:17
                                         // + literal: Const { ty: fn() {logger::init}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_1);                 // scope 0 at src\main.rs:21:19: 21:20
        StorageLive(_2);                 // scope 0 at src\main.rs:22:9: 22:12
        StorageLive(_3);                 // scope 0 at src\main.rs:22:15: 22:44
        _3 = const cortex_m::Peripherals::take() -> bb2; // scope 0 at src\main.rs:22:15: 22:44
                                         // ty::Const
                                         // + ty: fn() -> core::option::Option<cortex_m::Peripherals> {cortex_m::Peripherals::take}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:22:15: 22:42
                                         // + literal: Const { ty: fn() -> core::option::Option<cortex_m::Peripherals> {cortex_m::Peripherals::take}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = const core::option::Option::<cortex_m::Peripherals>::unwrap(move _3) -> bb3; // scope 0 at src\main.rs:22:15: 22:53
                                         // ty::Const
                                         // + ty: fn(core::option::Option<cortex_m::Peripherals>) -> cortex_m::Peripherals {core::option::Option::<cortex_m::Peripherals>::unwrap}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:22:45: 22:51
                                         // + literal: Const { ty: fn(core::option::Option<cortex_m::Peripherals>) -> cortex_m::Peripherals {core::option::Option::<cortex_m::Peripherals>::unwrap}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at src\main.rs:22:52: 22:53
        StorageLive(_4);                 // scope 1 at src\main.rs:23:9: 23:15
        StorageLive(_5);                 // scope 1 at src\main.rs:23:18: 23:42
        _5 = const stm32h7xx_hal::stm32::Peripherals::take() -> bb4; // scope 1 at src\main.rs:23:18: 23:42
                                         // ty::Const
                                         // + ty: fn() -> core::option::Option<stm32h7xx_hal::stm32::Peripherals> {stm32h7xx_hal::stm32::Peripherals::take}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:23:18: 23:40
                                         // + literal: Const { ty: fn() -> core::option::Option<stm32h7xx_hal::stm32::Peripherals> {stm32h7xx_hal::stm32::Peripherals::take}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _4 = const core::option::Option::<stm32h7xx_hal::stm32::Peripherals>::unwrap(move _5) -> bb5; // scope 1 at src\main.rs:23:18: 23:51
                                         // ty::Const
                                         // + ty: fn(core::option::Option<stm32h7xx_hal::stm32::Peripherals>) -> stm32h7xx_hal::stm32::Peripherals {core::option::Option::<stm32h7xx_hal::stm32::Peripherals>::unwrap}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:23:43: 23:49
                                         // + literal: Const { ty: fn(core::option::Option<stm32h7xx_hal::stm32::Peripherals>) -> stm32h7xx_hal::stm32::Peripherals {core::option::Option::<stm32h7xx_hal::stm32::Peripherals>::unwrap}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        StorageDead(_5);                 // scope 1 at src\main.rs:23:50: 23:51
        StorageLive(_6);                 // scope 2 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:33:13: 33:16
        _6 = const log::Level::Info;     // scope 2 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:127:14: 127:33
                                         // ty::Const
                                         // + ty: log::Level
                                         // + val: Value(Scalar(0x00000003))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:127:14: 127:33
                                         // + literal: Const { ty: log::Level, val: Value(Scalar(0x00000003)) }
        StorageLive(_7);                 // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:73
        StorageLive(_8);                 // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:43
        StorageLive(_9);                 // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:15
        _9 = &_6;                        // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:15
        StorageLive(_10);                // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:19: 34:43
        _144 = const __cortex_m_rt_main::promoted[10]; // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:19: 34:43
                                         // ty::Const
                                         // + ty: &log::LevelFilter
                                         // + val: Unevaluated(DefId(0:74 ~ miscomp_repro[978e]::__cortex_m_rt_main[0]), [], Some(promoted[10]))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:19: 34:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(DefId(0:74 ~ miscomp_repro[978e]::__cortex_m_rt_main[0]), [], Some(promoted[10])) }
        _10 = _144;                      // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:19: 34:43
        _8 = const <log::Level as core::cmp::PartialOrd<log::LevelFilter>>::le(move _9, move _10) -> bb10; // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:43
                                         // ty::Const
                                         // + ty: for<'r, 's> fn(&'r log::Level, &'s log::LevelFilter) -> bool {<log::Level as core::cmp::PartialOrd<log::LevelFilter>>::le}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:43
                                         // + literal: Const { ty: for<'r, 's> fn(&'r log::Level, &'s log::LevelFilter) -> bool {<log::Level as core::cmp::PartialOrd<log::LevelFilter>>::le}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        _7 = const true;                 // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:73
                                         // ty::Const
                                         // + ty: bool
                                         // + val: Value(Scalar(0x01))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:73
                                         // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }
        goto -> bb9;                     // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:73
    }

    bb7: {
        _7 = const false;                // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:73
                                         // ty::Const
                                         // + ty: bool
                                         // + val: Value(Scalar(0x00))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:73
                                         // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }
        goto -> bb9;                     // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:73
    }

    bb8: {
        StorageLive(_11);                // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:47: 34:73
        StorageLive(_12);                // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:47: 34:50
        _12 = &_6;                       // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:47: 34:50
        StorageLive(_13);                // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:54: 34:73
        StorageLive(_14);                // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:54: 34:73
        _14 = const log::max_level() -> bb11; // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:54: 34:73
                                         // ty::Const
                                         // + ty: fn() -> log::LevelFilter {log::max_level}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:54: 34:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(Scalar(<ZST>)) }
    }

    bb9: {
        StorageDead(_11);                // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:72: 34:73
        StorageDead(_8);                 // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:72: 34:73
        switchInt(_7) -> [false: bb13, otherwise: bb14]; // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:9: 42:10
    }

    bb10: {
        StorageDead(_10);                // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:42: 34:43
        StorageDead(_9);                 // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:42: 34:43
        switchInt(move _8) -> [false: bb7, otherwise: bb8]; // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:73
    }

    bb11: {
        _13 = &_14;                      // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:54: 34:73
        _11 = const <log::Level as core::cmp::PartialOrd<log::LevelFilter>>::le(move _12, move _13) -> bb12; // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:47: 34:73
                                         // ty::Const
                                         // + ty: for<'r, 's> fn(&'r log::Level, &'s log::LevelFilter) -> bool {<log::Level as core::cmp::PartialOrd<log::LevelFilter>>::le}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:47: 34:73
                                         // + literal: Const { ty: for<'r, 's> fn(&'r log::Level, &'s log::LevelFilter) -> bool {<log::Level as core::cmp::PartialOrd<log::LevelFilter>>::le}, val: Value(Scalar(<ZST>)) }
    }

    bb12: {
        StorageDead(_14);                // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:72: 34:73
        StorageDead(_13);                // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:72: 34:73
        StorageDead(_12);                // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:72: 34:73
        switchInt(move _11) -> [false: bb7, otherwise: bb6]; // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:73
    }

    bb13: {
        goto -> bb17;                    // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:9: 42:10
    }

    bb14: {
        StorageLive(_15);                // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        StorageLive(_16);                // scope 3 at src\main.rs:26:11: 26:43
        StorageLive(_17);                // scope 3 at src\main.rs:26:11: 26:43
        StorageLive(_18);                // scope 3 at src\main.rs:26:11: 26:43
        _143 = const __cortex_m_rt_main::promoted[9]; // scope 3 at src\main.rs:26:11: 26:43
                                         // ty::Const
                                         // + ty: &[&str; 1]
                                         // + val: Unevaluated(DefId(0:74 ~ miscomp_repro[978e]::__cortex_m_rt_main[0]), [], Some(promoted[9]))
                                         // mir::Constant
                                         // + span: src\main.rs:26:11: 26:43
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(DefId(0:74 ~ miscomp_repro[978e]::__cortex_m_rt_main[0]), [], Some(promoted[9])) }
        _18 = _143;                      // scope 3 at src\main.rs:26:11: 26:43
        _17 = _18;                       // scope 3 at src\main.rs:26:11: 26:43
        _16 = move _17 as &[&str] (Pointer(Unsize)); // scope 3 at src\main.rs:26:11: 26:43
        StorageDead(_17);                // scope 3 at src\main.rs:26:42: 26:43
        StorageLive(_19);                // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        StorageLive(_20);                // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        StorageLive(_21);                // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        _142 = const __cortex_m_rt_main::promoted[8]; // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
                                         // ty::Const
                                         // + ty: &[core::fmt::ArgumentV1; 0]
                                         // + val: Unevaluated(DefId(0:74 ~ miscomp_repro[978e]::__cortex_m_rt_main[0]), [], Some(promoted[8]))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
                                         // + literal: Const { ty: &[core::fmt::ArgumentV1; 0], val: Unevaluated(DefId(0:74 ~ miscomp_repro[978e]::__cortex_m_rt_main[0]), [], Some(promoted[8])) }
        _21 = _142;                      // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        _20 = _21;                       // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        _19 = move _20 as &[core::fmt::ArgumentV1] (Pointer(Unsize)); // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        StorageDead(_20);                // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:31: 236:32
        _15 = const core::fmt::Arguments::new_v1(move _16, move _19) -> bb15; // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
                                         // ty::Const
                                         // + ty: fn(&[&str], &[core::fmt::ArgumentV1]) -> core::fmt::Arguments {core::fmt::Arguments::new_v1}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&str], &[core::fmt::ArgumentV1]) -> core::fmt::Arguments {core::fmt::Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
    }

    bb15: {
        StorageDead(_19);                // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:31: 236:32
        StorageDead(_16);                // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:31: 236:32
        StorageDead(_21);                // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:36:49: 36:50
        StorageDead(_18);                // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:36:49: 36:50
        StorageDead(_15);                // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:36:49: 36:50
        StorageLive(_22);                // scope 4 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:37:13: 41:14
        StorageLive(_23);                // scope 4 at src\main.rs:26:11: 26:43
        StorageLive(_24);                // scope 4 at src\main.rs:26:11: 26:43
        _24 = const "Setup PWR...                  "; // scope 4 at src\main.rs:26:11: 26:43
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [83, 101, 116, 117, 112, 32, 80, 87, 82, 46, 46, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1073741823], len: Size { raw: 30 } }, size: Size { raw: 30 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 30 })
                                         // mir::Constant
                                         // + span: src\main.rs:26:11: 26:43
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [83, 101, 116, 117, 112, 32, 80, 87, 82, 46, 46, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1073741823], len: Size { raw: 30 } }, size: Size { raw: 30 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 30 }) }
        _23 = _24;                       // scope 4 at src\main.rs:26:11: 26:43
        StorageLive(_25);                // scope 4 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:39:17: 39:20
        _25 = _6;                        // scope 4 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:39:17: 39:20
        StorageLive(_26);                // scope 4 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:17: 40:79
        StorageLive(_27);                // scope 4 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:17: 40:79
        _141 = const __cortex_m_rt_main::promoted[7]; // scope 4 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:17: 40:79
                                         // ty::Const
                                         // + ty: &(&str, &str, &str, u32)
                                         // + val: Unevaluated(DefId(0:74 ~ miscomp_repro[978e]::__cortex_m_rt_main[0]), [], Some(promoted[7]))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(DefId(0:74 ~ miscomp_repro[978e]::__cortex_m_rt_main[0]), [], Some(promoted[7])) }
        _27 = _141;                      // scope 4 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:17: 40:79
        _26 = _27;                       // scope 4 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:17: 40:79
        _22 = const log::__private_api_log_lit(move _23, move _25, move _26) -> bb16; // scope 4 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:37:13: 41:14
                                         // ty::Const
                                         // + ty: for<'r, 's, 't0> fn(&'r str, log::Level, &'s (&'t0 str, &'static str, &'static str, u32)) {log::__private_api_log_lit}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:37:13: 37:42
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r str, log::Level, &'s (&'t0 str, &'static str, &'static str, u32)) {log::__private_api_log_lit}, val: Value(Scalar(<ZST>)) }
    }

    bb16: {
        StorageDead(_26);                // scope 4 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:41:13: 41:14
        StorageDead(_25);                // scope 4 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:41:13: 41:14
        StorageDead(_23);                // scope 4 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:41:13: 41:14
        StorageDead(_27);                // scope 4 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:41:14: 41:15
        StorageDead(_24);                // scope 4 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:41:14: 41:15
        StorageDead(_22);                // scope 4 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:41:14: 41:15
        goto -> bb17;                    // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:9: 42:10
    }

    bb17: {
        StorageDead(_6);                 // scope 2 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:43:5: 43:6
        StorageDead(_7);                 // scope 2 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:43:5: 43:6
        StorageLive(_28);                // scope 2 at src\main.rs:27:9: 27:12
        StorageLive(_29);                // scope 2 at src\main.rs:27:15: 27:21
        _29 = const stm32h7xx_hal::stm32::PWR { _marker: core::marker::PhantomData::<*const ()> }; // scope 2 at src\main.rs:27:15: 27:21
                                         // ty::Const
                                         // + ty: stm32h7xx_hal::stm32::PWR
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:27:15: 27:21
                                         // + literal: Const { ty: stm32h7xx_hal::stm32::PWR, val: Value(Scalar(<ZST>)) }
        _28 = const <stm32h7xx_hal::stm32::PWR as stm32h7xx_hal::prelude::_stm32h7xx_hal_pwr_PwrExt>::constrain(move _29) -> bb18; // scope 2 at src\main.rs:27:15: 27:33
                                         // ty::Const
                                         // + ty: fn(stm32h7xx_hal::stm32::PWR) -> stm32h7xx_hal::pwr::Pwr {<stm32h7xx_hal::stm32::PWR as stm32h7xx_hal::prelude::_stm32h7xx_hal_pwr_PwrExt>::constrain}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:27:22: 27:31
                                         // + literal: Const { ty: fn(stm32h7xx_hal::stm32::PWR) -> stm32h7xx_hal::pwr::Pwr {<stm32h7xx_hal::stm32::PWR as stm32h7xx_hal::prelude::_stm32h7xx_hal_pwr_PwrExt>::constrain}, val: Value(Scalar(<ZST>)) }
    }

    bb18: {
        StorageDead(_29);                // scope 2 at src\main.rs:27:32: 27:33
        StorageLive(_30);                // scope 5 at src\main.rs:28:9: 28:15
        StorageLive(_31);                // scope 5 at src\main.rs:28:18: 28:21
        _31 = move _28;                  // scope 5 at src\main.rs:28:18: 28:21
        _30 = const stm32h7xx_hal::pwr::Pwr::freeze(move _31) -> bb19; // scope 5 at src\main.rs:28:18: 28:30
                                         // ty::Const
                                         // + ty: fn(stm32h7xx_hal::pwr::Pwr) -> stm32h7xx_hal::pwr::PowerConfiguration {stm32h7xx_hal::pwr::Pwr::freeze}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:28:22: 28:28
                                         // + literal: Const { ty: fn(stm32h7xx_hal::pwr::Pwr) -> stm32h7xx_hal::pwr::PowerConfiguration {stm32h7xx_hal::pwr::Pwr::freeze}, val: Value(Scalar(<ZST>)) }
    }

    bb19: {
        StorageDead(_31);                // scope 5 at src\main.rs:28:29: 28:30
        StorageLive(_32);                // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:33:13: 33:16
        _32 = const log::Level::Info;    // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:127:14: 127:33
                                         // ty::Const
                                         // + ty: log::Level
                                         // + val: Value(Scalar(0x00000003))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:127:14: 127:33
                                         // + literal: Const { ty: log::Level, val: Value(Scalar(0x00000003)) }
        StorageLive(_33);                // scope 7 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:73
        StorageLive(_34);                // scope 7 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:43
        StorageLive(_35);                // scope 7 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:15
        _35 = &_32;                      // scope 7 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:15
        StorageLive(_36);                // scope 7 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:19: 34:43
        _140 = const __cortex_m_rt_main::promoted[6]; // scope 7 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:19: 34:43
                                         // ty::Const
                                         // + ty: &log::LevelFilter
                                         // + val: Unevaluated(DefId(0:74 ~ miscomp_repro[978e]::__cortex_m_rt_main[0]), [], Some(promoted[6]))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:19: 34:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(DefId(0:74 ~ miscomp_repro[978e]::__cortex_m_rt_main[0]), [], Some(promoted[6])) }
        _36 = _140;                      // scope 7 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:19: 34:43
        _34 = const <log::Level as core::cmp::PartialOrd<log::LevelFilter>>::le(move _35, move _36) -> bb24; // scope 7 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:43
                                         // ty::Const
                                         // + ty: for<'r, 's> fn(&'r log::Level, &'s log::LevelFilter) -> bool {<log::Level as core::cmp::PartialOrd<log::LevelFilter>>::le}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:43
                                         // + literal: Const { ty: for<'r, 's> fn(&'r log::Level, &'s log::LevelFilter) -> bool {<log::Level as core::cmp::PartialOrd<log::LevelFilter>>::le}, val: Value(Scalar(<ZST>)) }
    }

    bb20: {
        _33 = const true;                // scope 7 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:73
                                         // ty::Const
                                         // + ty: bool
                                         // + val: Value(Scalar(0x01))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:73
                                         // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }
        goto -> bb23;                    // scope 7 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:73
    }

    bb21: {
        _33 = const false;               // scope 7 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:73
                                         // ty::Const
                                         // + ty: bool
                                         // + val: Value(Scalar(0x00))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:73
                                         // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }
        goto -> bb23;                    // scope 7 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:73
    }

    bb22: {
        StorageLive(_37);                // scope 7 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:47: 34:73
        StorageLive(_38);                // scope 7 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:47: 34:50
        _38 = &_32;                      // scope 7 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:47: 34:50
        StorageLive(_39);                // scope 7 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:54: 34:73
        StorageLive(_40);                // scope 7 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:54: 34:73
        _40 = const log::max_level() -> bb25; // scope 7 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:54: 34:73
                                         // ty::Const
                                         // + ty: fn() -> log::LevelFilter {log::max_level}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:54: 34:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(Scalar(<ZST>)) }
    }

    bb23: {
        StorageDead(_37);                // scope 7 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:72: 34:73
        StorageDead(_34);                // scope 7 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:72: 34:73
        switchInt(_33) -> [false: bb27, otherwise: bb28]; // scope 7 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:9: 42:10
    }

    bb24: {
        StorageDead(_36);                // scope 7 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:42: 34:43
        StorageDead(_35);                // scope 7 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:42: 34:43
        switchInt(move _34) -> [false: bb21, otherwise: bb22]; // scope 7 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:73
    }

    bb25: {
        _39 = &_40;                      // scope 7 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:54: 34:73
        _37 = const <log::Level as core::cmp::PartialOrd<log::LevelFilter>>::le(move _38, move _39) -> bb26; // scope 7 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:47: 34:73
                                         // ty::Const
                                         // + ty: for<'r, 's> fn(&'r log::Level, &'s log::LevelFilter) -> bool {<log::Level as core::cmp::PartialOrd<log::LevelFilter>>::le}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:47: 34:73
                                         // + literal: Const { ty: for<'r, 's> fn(&'r log::Level, &'s log::LevelFilter) -> bool {<log::Level as core::cmp::PartialOrd<log::LevelFilter>>::le}, val: Value(Scalar(<ZST>)) }
    }

    bb26: {
        StorageDead(_40);                // scope 7 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:72: 34:73
        StorageDead(_39);                // scope 7 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:72: 34:73
        StorageDead(_38);                // scope 7 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:72: 34:73
        switchInt(move _37) -> [false: bb21, otherwise: bb20]; // scope 7 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:73
    }

    bb27: {
        goto -> bb31;                    // scope 7 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:9: 42:10
    }

    bb28: {
        StorageLive(_41);                // scope 7 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        StorageLive(_42);                // scope 7 at src\main.rs:31:11: 31:43
        StorageLive(_43);                // scope 7 at src\main.rs:31:11: 31:43
        StorageLive(_44);                // scope 7 at src\main.rs:31:11: 31:43
        _139 = const __cortex_m_rt_main::promoted[5]; // scope 7 at src\main.rs:31:11: 31:43
                                         // ty::Const
                                         // + ty: &[&str; 1]
                                         // + val: Unevaluated(DefId(0:74 ~ miscomp_repro[978e]::__cortex_m_rt_main[0]), [], Some(promoted[5]))
                                         // mir::Constant
                                         // + span: src\main.rs:31:11: 31:43
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(DefId(0:74 ~ miscomp_repro[978e]::__cortex_m_rt_main[0]), [], Some(promoted[5])) }
        _44 = _139;                      // scope 7 at src\main.rs:31:11: 31:43
        _43 = _44;                       // scope 7 at src\main.rs:31:11: 31:43
        _42 = move _43 as &[&str] (Pointer(Unsize)); // scope 7 at src\main.rs:31:11: 31:43
        StorageDead(_43);                // scope 7 at src\main.rs:31:42: 31:43
        StorageLive(_45);                // scope 7 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        StorageLive(_46);                // scope 7 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        StorageLive(_47);                // scope 7 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        _138 = const __cortex_m_rt_main::promoted[4]; // scope 7 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
                                         // ty::Const
                                         // + ty: &[core::fmt::ArgumentV1; 0]
                                         // + val: Unevaluated(DefId(0:74 ~ miscomp_repro[978e]::__cortex_m_rt_main[0]), [], Some(promoted[4]))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
                                         // + literal: Const { ty: &[core::fmt::ArgumentV1; 0], val: Unevaluated(DefId(0:74 ~ miscomp_repro[978e]::__cortex_m_rt_main[0]), [], Some(promoted[4])) }
        _47 = _138;                      // scope 7 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        _46 = _47;                       // scope 7 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        _45 = move _46 as &[core::fmt::ArgumentV1] (Pointer(Unsize)); // scope 7 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        StorageDead(_46);                // scope 7 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:31: 236:32
        _41 = const core::fmt::Arguments::new_v1(move _42, move _45) -> bb29; // scope 7 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
                                         // ty::Const
                                         // + ty: fn(&[&str], &[core::fmt::ArgumentV1]) -> core::fmt::Arguments {core::fmt::Arguments::new_v1}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&[&str], &[core::fmt::ArgumentV1]) -> core::fmt::Arguments {core::fmt::Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
    }

    bb29: {
        StorageDead(_45);                // scope 7 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:31: 236:32
        StorageDead(_42);                // scope 7 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:31: 236:32
        StorageDead(_47);                // scope 7 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:36:49: 36:50
        StorageDead(_44);                // scope 7 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:36:49: 36:50
        StorageDead(_41);                // scope 7 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:36:49: 36:50
        StorageLive(_48);                // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:37:13: 41:14
        StorageLive(_49);                // scope 8 at src\main.rs:31:11: 31:43
        StorageLive(_50);                // scope 8 at src\main.rs:31:11: 31:43
        _50 = const "Setup RCC...                  "; // scope 8 at src\main.rs:31:11: 31:43
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [83, 101, 116, 117, 112, 32, 82, 67, 67, 46, 46, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1073741823], len: Size { raw: 30 } }, size: Size { raw: 30 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 30 })
                                         // mir::Constant
                                         // + span: src\main.rs:31:11: 31:43
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [83, 101, 116, 117, 112, 32, 82, 67, 67, 46, 46, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1073741823], len: Size { raw: 30 } }, size: Size { raw: 30 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 30 }) }
        _49 = _50;                       // scope 8 at src\main.rs:31:11: 31:43
        StorageLive(_51);                // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:39:17: 39:20
        _51 = _32;                       // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:39:17: 39:20
        StorageLive(_52);                // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:17: 40:79
        StorageLive(_53);                // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:17: 40:79
        _137 = const __cortex_m_rt_main::promoted[3]; // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:17: 40:79
                                         // ty::Const
                                         // + ty: &(&str, &str, &str, u32)
                                         // + val: Unevaluated(DefId(0:74 ~ miscomp_repro[978e]::__cortex_m_rt_main[0]), [], Some(promoted[3]))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(DefId(0:74 ~ miscomp_repro[978e]::__cortex_m_rt_main[0]), [], Some(promoted[3])) }
        _53 = _137;                      // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:17: 40:79
        _52 = _53;                       // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:17: 40:79
        _48 = const log::__private_api_log_lit(move _49, move _51, move _52) -> bb30; // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:37:13: 41:14
                                         // ty::Const
                                         // + ty: for<'r, 's, 't0> fn(&'r str, log::Level, &'s (&'t0 str, &'static str, &'static str, u32)) {log::__private_api_log_lit}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:37:13: 37:42
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r str, log::Level, &'s (&'t0 str, &'static str, &'static str, u32)) {log::__private_api_log_lit}, val: Value(Scalar(<ZST>)) }
    }

    bb30: {
        StorageDead(_52);                // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:41:13: 41:14
        StorageDead(_51);                // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:41:13: 41:14
        StorageDead(_49);                // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:41:13: 41:14
        StorageDead(_53);                // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:41:14: 41:15
        StorageDead(_50);                // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:41:14: 41:15
        StorageDead(_48);                // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:41:14: 41:15
        goto -> bb31;                    // scope 7 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:9: 42:10
    }

    bb31: {
        StorageDead(_32);                // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:43:5: 43:6
        StorageDead(_33);                // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:43:5: 43:6
        StorageLive(_54);                // scope 6 at src\main.rs:32:9: 32:12
        StorageLive(_55);                // scope 6 at src\main.rs:32:15: 32:21
        _55 = const stm32h7xx_hal::stm32::RCC { _marker: core::marker::PhantomData::<*const ()> }; // scope 6 at src\main.rs:32:15: 32:21
                                         // ty::Const
                                         // + ty: stm32h7xx_hal::stm32::RCC
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:32:15: 32:21
                                         // + literal: Const { ty: stm32h7xx_hal::stm32::RCC, val: Value(Scalar(<ZST>)) }
        _54 = const <stm32h7xx_hal::stm32::RCC as stm32h7xx_hal::prelude::_stm32h7xx_hal_rcc_RccExt>::constrain(move _55) -> bb32; // scope 6 at src\main.rs:32:15: 32:33
                                         // ty::Const
                                         // + ty: fn(stm32h7xx_hal::stm32::RCC) -> stm32h7xx_hal::rcc::Rcc {<stm32h7xx_hal::stm32::RCC as stm32h7xx_hal::prelude::_stm32h7xx_hal_rcc_RccExt>::constrain}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:32:22: 32:31
                                         // + literal: Const { ty: fn(stm32h7xx_hal::stm32::RCC) -> stm32h7xx_hal::rcc::Rcc {<stm32h7xx_hal::stm32::RCC as stm32h7xx_hal::prelude::_stm32h7xx_hal_rcc_RccExt>::constrain}, val: Value(Scalar(<ZST>)) }
    }

    bb32: {
        StorageDead(_55);                // scope 6 at src\main.rs:32:32: 32:33
        StorageLive(_56);                // scope 9 at src\main.rs:34:9: 34:13
        StorageLive(_57);                // scope 9 at src\main.rs:34:16: 36:30
        StorageLive(_58);                // scope 9 at src\main.rs:34:16: 35:27
        StorageLive(_59);                // scope 9 at src\main.rs:34:16: 34:19
        _59 = move _54;                  // scope 9 at src\main.rs:34:16: 34:19
        StorageLive(_60);                // scope 9 at src\main.rs:35:17: 35:26
        _60 = const <u32 as stm32h7xx_hal::prelude::_stm32h7xx_hal_time_U32Ext>::mhz(const 400_u32) -> bb33; // scope 9 at src\main.rs:35:17: 35:26
                                         // ty::Const
                                         // + ty: fn(u32) -> stm32h7xx_hal::time::MegaHertz {<u32 as stm32h7xx_hal::prelude::_stm32h7xx_hal_time_U32Ext>::mhz}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:35:21: 35:24
                                         // + literal: Const { ty: fn(u32) -> stm32h7xx_hal::time::MegaHertz {<u32 as stm32h7xx_hal::prelude::_stm32h7xx_hal_time_U32Ext>::mhz}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: u32
                                         // + val: Value(Scalar(0x00000190))
                                         // mir::Constant
                                         // + span: src\main.rs:35:17: 35:20
                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000190)) }
    }

    bb33: {
        _58 = const stm32h7xx_hal::rcc::Rcc::sys_ck::<stm32h7xx_hal::time::MegaHertz>(move _59, move _60) -> bb34; // scope 9 at src\main.rs:34:16: 35:27
                                         // ty::Const
                                         // + ty: fn(stm32h7xx_hal::rcc::Rcc, stm32h7xx_hal::time::MegaHertz) -> stm32h7xx_hal::rcc::Rcc {stm32h7xx_hal::rcc::Rcc::sys_ck::<stm32h7xx_hal::time::MegaHertz>}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:35:10: 35:16
                                         // + literal: Const { ty: fn(stm32h7xx_hal::rcc::Rcc, stm32h7xx_hal::time::MegaHertz) -> stm32h7xx_hal::rcc::Rcc {stm32h7xx_hal::rcc::Rcc::sys_ck::<stm32h7xx_hal::time::MegaHertz>}, val: Value(Scalar(<ZST>)) }
    }

    bb34: {
        StorageDead(_60);                // scope 9 at src\main.rs:35:26: 35:27
        StorageDead(_59);                // scope 9 at src\main.rs:35:26: 35:27
        StorageLive(_61);                // scope 9 at src\main.rs:36:20: 36:29
        _61 = const <u32 as stm32h7xx_hal::prelude::_stm32h7xx_hal_time_U32Ext>::mhz(const 100_u32) -> bb35; // scope 9 at src\main.rs:36:20: 36:29
                                         // ty::Const
                                         // + ty: fn(u32) -> stm32h7xx_hal::time::MegaHertz {<u32 as stm32h7xx_hal::prelude::_stm32h7xx_hal_time_U32Ext>::mhz}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:36:24: 36:27
                                         // + literal: Const { ty: fn(u32) -> stm32h7xx_hal::time::MegaHertz {<u32 as stm32h7xx_hal::prelude::_stm32h7xx_hal_time_U32Ext>::mhz}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: u32
                                         // + val: Value(Scalar(0x00000064))
                                         // mir::Constant
                                         // + span: src\main.rs:36:20: 36:23
                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000064)) }
    }

    bb35: {
        _57 = const stm32h7xx_hal::rcc::Rcc::pll1_q_ck::<stm32h7xx_hal::time::MegaHertz>(move _58, move _61) -> bb36; // scope 9 at src\main.rs:34:16: 36:30
                                         // ty::Const
                                         // + ty: fn(stm32h7xx_hal::rcc::Rcc, stm32h7xx_hal::time::MegaHertz) -> stm32h7xx_hal::rcc::Rcc {stm32h7xx_hal::rcc::Rcc::pll1_q_ck::<stm32h7xx_hal::time::MegaHertz>}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:36:10: 36:19
                                         // + literal: Const { ty: fn(stm32h7xx_hal::rcc::Rcc, stm32h7xx_hal::time::MegaHertz) -> stm32h7xx_hal::rcc::Rcc {stm32h7xx_hal::rcc::Rcc::pll1_q_ck::<stm32h7xx_hal::time::MegaHertz>}, val: Value(Scalar(<ZST>)) }
    }

    bb36: {
        StorageDead(_61);                // scope 9 at src\main.rs:36:29: 36:30
        StorageDead(_58);                // scope 9 at src\main.rs:36:29: 36:30
        StorageLive(_62);                // scope 9 at src\main.rs:37:17: 37:23
        _62 = move _30;                  // scope 9 at src\main.rs:37:17: 37:23
        StorageLive(_63);                // scope 9 at src\main.rs:37:25: 37:35
        StorageLive(_64);                // scope 9 at src\main.rs:37:25: 37:35
        _64 = &(_4.61: stm32h7xx_hal::stm32::SYSCFG); // scope 9 at src\main.rs:37:25: 37:35
        _63 = _64;                       // scope 9 at src\main.rs:37:25: 37:35
        _56 = const stm32h7xx_hal::rcc::Rcc::freeze(move _57, move _62, move _63) -> bb37; // scope 9 at src\main.rs:34:16: 37:36
                                         // ty::Const
                                         // + ty: for<'r> fn(stm32h7xx_hal::rcc::Rcc, stm32h7xx_hal::pwr::PowerConfiguration, &'r stm32h7xx_hal::stm32::SYSCFG) -> stm32h7xx_hal::rcc::Ccdr {stm32h7xx_hal::rcc::Rcc::freeze}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:37:10: 37:16
                                         // + literal: Const { ty: for<'r> fn(stm32h7xx_hal::rcc::Rcc, stm32h7xx_hal::pwr::PowerConfiguration, &'r stm32h7xx_hal::stm32::SYSCFG) -> stm32h7xx_hal::rcc::Ccdr {stm32h7xx_hal::rcc::Rcc::freeze}, val: Value(Scalar(<ZST>)) }
    }

    bb37: {
        StorageDead(_63);                // scope 9 at src\main.rs:37:35: 37:36
        StorageDead(_62);                // scope 9 at src\main.rs:37:35: 37:36
        StorageDead(_57);                // scope 9 at src\main.rs:37:35: 37:36
        StorageDead(_64);                // scope 9 at src\main.rs:37:36: 37:37
        StorageLive(_65);                // scope 10 at src\main.rs:39:9: 39:14
        StorageLive(_66);                // scope 10 at src\main.rs:39:17: 39:25
        _66 = const stm32h7xx_hal::stm32::GPIOA { _marker: core::marker::PhantomData::<*const ()> }; // scope 10 at src\main.rs:39:17: 39:25
                                         // ty::Const
                                         // + ty: stm32h7xx_hal::stm32::GPIOA
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:39:17: 39:25
                                         // + literal: Const { ty: stm32h7xx_hal::stm32::GPIOA, val: Value(Scalar(<ZST>)) }
        StorageLive(_67);                // scope 10 at src\main.rs:39:32: 39:53
        _67 = move ((_56.1: stm32h7xx_hal::rcc::PeripheralREC).18: stm32h7xx_hal::rcc::rec::Gpioa); // scope 10 at src\main.rs:39:32: 39:53
        _65 = const <stm32h7xx_hal::stm32::GPIOA as stm32h7xx_hal::gpio::GpioExt>::split(move _66, move _67) -> bb38; // scope 10 at src\main.rs:39:17: 39:54
                                         // ty::Const
                                         // + ty: fn(stm32h7xx_hal::stm32::GPIOA, <stm32h7xx_hal::stm32::GPIOA as stm32h7xx_hal::gpio::GpioExt>::Rec) -> <stm32h7xx_hal::stm32::GPIOA as stm32h7xx_hal::gpio::GpioExt>::Parts {<stm32h7xx_hal::stm32::GPIOA as stm32h7xx_hal::gpio::GpioExt>::split}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:39:26: 39:31
                                         // + literal: Const { ty: fn(stm32h7xx_hal::stm32::GPIOA, <stm32h7xx_hal::stm32::GPIOA as stm32h7xx_hal::gpio::GpioExt>::Rec) -> <stm32h7xx_hal::stm32::GPIOA as stm32h7xx_hal::gpio::GpioExt>::Parts {<stm32h7xx_hal::stm32::GPIOA as stm32h7xx_hal::gpio::GpioExt>::split}, val: Value(Scalar(<ZST>)) }
    }

    bb38: {
        StorageDead(_67);                // scope 10 at src\main.rs:39:53: 39:54
        StorageDead(_66);                // scope 10 at src\main.rs:39:53: 39:54
        StorageLive(_68);                // scope 11 at src\main.rs:40:9: 40:14
        StorageLive(_69);                // scope 11 at src\main.rs:40:17: 40:25
        _69 = const stm32h7xx_hal::stm32::GPIOB { _marker: core::marker::PhantomData::<*const ()> }; // scope 11 at src\main.rs:40:17: 40:25
                                         // ty::Const
                                         // + ty: stm32h7xx_hal::stm32::GPIOB
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:40:17: 40:25
                                         // + literal: Const { ty: stm32h7xx_hal::stm32::GPIOB, val: Value(Scalar(<ZST>)) }
        StorageLive(_70);                // scope 11 at src\main.rs:40:32: 40:53
        _70 = move ((_56.1: stm32h7xx_hal::rcc::PeripheralREC).19: stm32h7xx_hal::rcc::rec::Gpiob); // scope 11 at src\main.rs:40:32: 40:53
        _68 = const <stm32h7xx_hal::stm32::GPIOB as stm32h7xx_hal::gpio::GpioExt>::split(move _69, move _70) -> bb39; // scope 11 at src\main.rs:40:17: 40:54
                                         // ty::Const
                                         // + ty: fn(stm32h7xx_hal::stm32::GPIOB, <stm32h7xx_hal::stm32::GPIOB as stm32h7xx_hal::gpio::GpioExt>::Rec) -> <stm32h7xx_hal::stm32::GPIOB as stm32h7xx_hal::gpio::GpioExt>::Parts {<stm32h7xx_hal::stm32::GPIOB as stm32h7xx_hal::gpio::GpioExt>::split}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:40:26: 40:31
                                         // + literal: Const { ty: fn(stm32h7xx_hal::stm32::GPIOB, <stm32h7xx_hal::stm32::GPIOB as stm32h7xx_hal::gpio::GpioExt>::Rec) -> <stm32h7xx_hal::stm32::GPIOB as stm32h7xx_hal::gpio::GpioExt>::Parts {<stm32h7xx_hal::stm32::GPIOB as stm32h7xx_hal::gpio::GpioExt>::split}, val: Value(Scalar(<ZST>)) }
    }

    bb39: {
        StorageDead(_70);                // scope 11 at src\main.rs:40:53: 40:54
        StorageDead(_69);                // scope 11 at src\main.rs:40:53: 40:54
        StorageLive(_71);                // scope 12 at src\main.rs:41:5: 41:35
        StorageLive(_72);                // scope 12 at src\main.rs:41:5: 41:14
        _72 = const stm32h7xx_hal::gpio::gpiob::PB3::<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF0>> { _mode: core::marker::PhantomData::<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF0>> }; // scope 12 at src\main.rs:41:5: 41:14
                                         // ty::Const
                                         // + ty: stm32h7xx_hal::gpio::gpiob::PB3<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF0>>
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:41:5: 41:14
                                         // + literal: Const { ty: stm32h7xx_hal::gpio::gpiob::PB3<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF0>>, val: Value(Scalar(<ZST>)) }
        _71 = const stm32h7xx_hal::gpio::gpiob::PB3::<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF0>>::into_alternate_af0(move _72) -> bb40; // scope 12 at src\main.rs:41:5: 41:35
                                         // ty::Const
                                         // + ty: fn(stm32h7xx_hal::gpio::gpiob::PB3<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF0>>) -> stm32h7xx_hal::gpio::gpiob::PB3<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF0>> {stm32h7xx_hal::gpio::gpiob::PB3::<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF0>>::into_alternate_af0}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:41:15: 41:33
                                         // + literal: Const { ty: fn(stm32h7xx_hal::gpio::gpiob::PB3<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF0>>) -> stm32h7xx_hal::gpio::gpiob::PB3<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF0>> {stm32h7xx_hal::gpio::gpiob::PB3::<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF0>>::into_alternate_af0}, val: Value(Scalar(<ZST>)) }
    }

    bb40: {
        StorageDead(_72);                // scope 12 at src\main.rs:41:34: 41:35
        StorageDead(_71);                // scope 12 at src\main.rs:41:35: 41:36
        StorageLive(_73);                // scope 12 at src\main.rs:42:9: 42:14
        StorageLive(_74);                // scope 12 at src\main.rs:42:17: 42:25
        _74 = const stm32h7xx_hal::stm32::GPIOC { _marker: core::marker::PhantomData::<*const ()> }; // scope 12 at src\main.rs:42:17: 42:25
                                         // ty::Const
                                         // + ty: stm32h7xx_hal::stm32::GPIOC
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:42:17: 42:25
                                         // + literal: Const { ty: stm32h7xx_hal::stm32::GPIOC, val: Value(Scalar(<ZST>)) }
        StorageLive(_75);                // scope 12 at src\main.rs:42:32: 42:53
        _75 = move ((_56.1: stm32h7xx_hal::rcc::PeripheralREC).20: stm32h7xx_hal::rcc::rec::Gpioc); // scope 12 at src\main.rs:42:32: 42:53
        _73 = const <stm32h7xx_hal::stm32::GPIOC as stm32h7xx_hal::gpio::GpioExt>::split(move _74, move _75) -> bb41; // scope 12 at src\main.rs:42:17: 42:54
                                         // ty::Const
                                         // + ty: fn(stm32h7xx_hal::stm32::GPIOC, <stm32h7xx_hal::stm32::GPIOC as stm32h7xx_hal::gpio::GpioExt>::Rec) -> <stm32h7xx_hal::stm32::GPIOC as stm32h7xx_hal::gpio::GpioExt>::Parts {<stm32h7xx_hal::stm32::GPIOC as stm32h7xx_hal::gpio::GpioExt>::split}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:42:26: 42:31
                                         // + literal: Const { ty: fn(stm32h7xx_hal::stm32::GPIOC, <stm32h7xx_hal::stm32::GPIOC as stm32h7xx_hal::gpio::GpioExt>::Rec) -> <stm32h7xx_hal::stm32::GPIOC as stm32h7xx_hal::gpio::GpioExt>::Parts {<stm32h7xx_hal::stm32::GPIOC as stm32h7xx_hal::gpio::GpioExt>::split}, val: Value(Scalar(<ZST>)) }
    }

    bb41: {
        StorageDead(_75);                // scope 12 at src\main.rs:42:53: 42:54
        StorageDead(_74);                // scope 12 at src\main.rs:42:53: 42:54
        StorageLive(_76);                // scope 13 at src\main.rs:43:9: 43:14
        StorageLive(_77);                // scope 13 at src\main.rs:43:17: 43:25
        _77 = const stm32h7xx_hal::stm32::GPIOD { _marker: core::marker::PhantomData::<*const ()> }; // scope 13 at src\main.rs:43:17: 43:25
                                         // ty::Const
                                         // + ty: stm32h7xx_hal::stm32::GPIOD
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:43:17: 43:25
                                         // + literal: Const { ty: stm32h7xx_hal::stm32::GPIOD, val: Value(Scalar(<ZST>)) }
        StorageLive(_78);                // scope 13 at src\main.rs:43:32: 43:53
        _78 = move ((_56.1: stm32h7xx_hal::rcc::PeripheralREC).21: stm32h7xx_hal::rcc::rec::Gpiod); // scope 13 at src\main.rs:43:32: 43:53
        _76 = const <stm32h7xx_hal::stm32::GPIOD as stm32h7xx_hal::gpio::GpioExt>::split(move _77, move _78) -> bb42; // scope 13 at src\main.rs:43:17: 43:54
                                         // ty::Const
                                         // + ty: fn(stm32h7xx_hal::stm32::GPIOD, <stm32h7xx_hal::stm32::GPIOD as stm32h7xx_hal::gpio::GpioExt>::Rec) -> <stm32h7xx_hal::stm32::GPIOD as stm32h7xx_hal::gpio::GpioExt>::Parts {<stm32h7xx_hal::stm32::GPIOD as stm32h7xx_hal::gpio::GpioExt>::split}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:43:26: 43:31
                                         // + literal: Const { ty: fn(stm32h7xx_hal::stm32::GPIOD, <stm32h7xx_hal::stm32::GPIOD as stm32h7xx_hal::gpio::GpioExt>::Rec) -> <stm32h7xx_hal::stm32::GPIOD as stm32h7xx_hal::gpio::GpioExt>::Parts {<stm32h7xx_hal::stm32::GPIOD as stm32h7xx_hal::gpio::GpioExt>::split}, val: Value(Scalar(<ZST>)) }
    }

    bb42: {
        StorageDead(_78);                // scope 13 at src\main.rs:43:53: 43:54
        StorageDead(_77);                // scope 13 at src\main.rs:43:53: 43:54
        StorageLive(_79);                // scope 14 at src\main.rs:45:9: 45:18
        StorageLive(_80);                // scope 14 at src\main.rs:46:9: 46:19
        _80 = const stm32h7xx_hal::gpio::gpioc::PC12::<stm32h7xx_hal::gpio::Analog> { _mode: core::marker::PhantomData::<stm32h7xx_hal::gpio::Analog> }; // scope 14 at src\main.rs:46:9: 46:19
                                         // ty::Const
                                         // + ty: stm32h7xx_hal::gpio::gpioc::PC12<stm32h7xx_hal::gpio::Analog>
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:46:9: 46:19
                                         // + literal: Const { ty: stm32h7xx_hal::gpio::gpioc::PC12<stm32h7xx_hal::gpio::Analog>, val: Value(Scalar(<ZST>)) }
        StorageLive(_81);                // scope 14 at src\main.rs:47:9: 47:18
        _81 = const stm32h7xx_hal::gpio::gpiod::PD2::<stm32h7xx_hal::gpio::Analog> { _mode: core::marker::PhantomData::<stm32h7xx_hal::gpio::Analog> }; // scope 14 at src\main.rs:47:9: 47:18
                                         // ty::Const
                                         // + ty: stm32h7xx_hal::gpio::gpiod::PD2<stm32h7xx_hal::gpio::Analog>
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:47:9: 47:18
                                         // + literal: Const { ty: stm32h7xx_hal::gpio::gpiod::PD2<stm32h7xx_hal::gpio::Analog>, val: Value(Scalar(<ZST>)) }
        StorageLive(_82);                // scope 14 at src\main.rs:48:9: 48:18
        _82 = const stm32h7xx_hal::gpio::gpioc::PC8::<stm32h7xx_hal::gpio::Analog> { _mode: core::marker::PhantomData::<stm32h7xx_hal::gpio::Analog> }; // scope 14 at src\main.rs:48:9: 48:18
                                         // ty::Const
                                         // + ty: stm32h7xx_hal::gpio::gpioc::PC8<stm32h7xx_hal::gpio::Analog>
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:48:9: 48:18
                                         // + literal: Const { ty: stm32h7xx_hal::gpio::gpioc::PC8<stm32h7xx_hal::gpio::Analog>, val: Value(Scalar(<ZST>)) }
        StorageLive(_83);                // scope 14 at src\main.rs:49:9: 49:18
        _83 = const stm32h7xx_hal::gpio::gpioc::PC9::<stm32h7xx_hal::gpio::Analog> { _mode: core::marker::PhantomData::<stm32h7xx_hal::gpio::Analog> }; // scope 14 at src\main.rs:49:9: 49:18
                                         // ty::Const
                                         // + ty: stm32h7xx_hal::gpio::gpioc::PC9<stm32h7xx_hal::gpio::Analog>
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:49:9: 49:18
                                         // + literal: Const { ty: stm32h7xx_hal::gpio::gpioc::PC9<stm32h7xx_hal::gpio::Analog>, val: Value(Scalar(<ZST>)) }
        StorageLive(_84);                // scope 14 at src\main.rs:50:9: 50:19
        _84 = const stm32h7xx_hal::gpio::gpioc::PC10::<stm32h7xx_hal::gpio::Analog> { _mode: core::marker::PhantomData::<stm32h7xx_hal::gpio::Analog> }; // scope 14 at src\main.rs:50:9: 50:19
                                         // ty::Const
                                         // + ty: stm32h7xx_hal::gpio::gpioc::PC10<stm32h7xx_hal::gpio::Analog>
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:50:9: 50:19
                                         // + literal: Const { ty: stm32h7xx_hal::gpio::gpioc::PC10<stm32h7xx_hal::gpio::Analog>, val: Value(Scalar(<ZST>)) }
        StorageLive(_85);                // scope 14 at src\main.rs:51:9: 51:19
        _85 = const stm32h7xx_hal::gpio::gpioc::PC11::<stm32h7xx_hal::gpio::Analog> { _mode: core::marker::PhantomData::<stm32h7xx_hal::gpio::Analog> }; // scope 14 at src\main.rs:51:9: 51:19
                                         // ty::Const
                                         // + ty: stm32h7xx_hal::gpio::gpioc::PC11<stm32h7xx_hal::gpio::Analog>
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:51:9: 51:19
                                         // + literal: Const { ty: stm32h7xx_hal::gpio::gpioc::PC11<stm32h7xx_hal::gpio::Analog>, val: Value(Scalar(<ZST>)) }
        StorageLive(_86);                // scope 14 at src\main.rs:52:9: 52:18
        _86 = const stm32h7xx_hal::gpio::gpioc::PC6::<stm32h7xx_hal::gpio::Analog> { _mode: core::marker::PhantomData::<stm32h7xx_hal::gpio::Analog> }; // scope 14 at src\main.rs:52:9: 52:18
                                         // ty::Const
                                         // + ty: stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Analog>
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:52:9: 52:18
                                         // + literal: Const { ty: stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Analog>, val: Value(Scalar(<ZST>)) }
        StorageLive(_87);                // scope 14 at src\main.rs:53:9: 53:19
        _87 = const stm32h7xx_hal::gpio::gpioa::PA11::<stm32h7xx_hal::gpio::Analog> { _mode: core::marker::PhantomData::<stm32h7xx_hal::gpio::Analog> }; // scope 14 at src\main.rs:53:9: 53:19
                                         // ty::Const
                                         // + ty: stm32h7xx_hal::gpio::gpioa::PA11<stm32h7xx_hal::gpio::Analog>
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:53:9: 53:19
                                         // + literal: Const { ty: stm32h7xx_hal::gpio::gpioa::PA11<stm32h7xx_hal::gpio::Analog>, val: Value(Scalar(<ZST>)) }
        StorageLive(_88);                // scope 14 at src\main.rs:54:9: 54:18
        _88 = const stm32h7xx_hal::stm32::SDMMC1 { _marker: core::marker::PhantomData::<*const ()> }; // scope 14 at src\main.rs:54:9: 54:18
                                         // ty::Const
                                         // + ty: stm32h7xx_hal::stm32::SDMMC1
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:54:9: 54:18
                                         // + literal: Const { ty: stm32h7xx_hal::stm32::SDMMC1, val: Value(Scalar(<ZST>)) }
        StorageLive(_89);                // scope 14 at src\main.rs:55:9: 55:31
        _89 = move ((_56.1: stm32h7xx_hal::rcc::PeripheralREC).8: stm32h7xx_hal::rcc::rec::Sdmmc1); // scope 14 at src\main.rs:55:9: 55:31
        StorageLive(_90);                // scope 14 at src\main.rs:56:9: 56:23
        StorageLive(_91);                // scope 14 at src\main.rs:56:9: 56:23
        _91 = &mut (_4.61: stm32h7xx_hal::stm32::SYSCFG); // scope 14 at src\main.rs:56:9: 56:23
        _90 = &mut (*_91);               // scope 14 at src\main.rs:56:9: 56:23
        StorageLive(_92);                // scope 14 at src\main.rs:57:9: 57:21
        StorageLive(_93);                // scope 14 at src\main.rs:57:9: 57:21
        _93 = &mut (_4.62: stm32h7xx_hal::stm32::EXTI); // scope 14 at src\main.rs:57:9: 57:21
        _92 = &mut (*_93);               // scope 14 at src\main.rs:57:9: 57:21
        StorageLive(_94);                // scope 14 at src\main.rs:58:9: 58:21
        StorageLive(_95);                // scope 14 at src\main.rs:58:9: 58:21
        _95 = &(_56.0: stm32h7xx_hal::rcc::CoreClocks); // scope 14 at src\main.rs:58:9: 58:21
        _94 = _95;                       // scope 14 at src\main.rs:58:9: 58:21
        _79 = const sdmmc::Sdmmc::new(move _80, move _81, move _82, move _83, move _84, move _85, move _86, move _87, move _88, move _89, move _90, move _92, move _94) -> bb43; // scope 14 at src\main.rs:45:21: 59:6
                                         // ty::Const
                                         // + ty: for<'r, 's, 't0> fn(stm32h7xx_hal::gpio::gpioc::PC12<stm32h7xx_hal::gpio::Analog>, stm32h7xx_hal::gpio::gpiod::PD2<stm32h7xx_hal::gpio::Analog>, stm32h7xx_hal::gpio::gpioc::PC8<stm32h7xx_hal::gpio::Analog>, stm32h7xx_hal::gpio::gpioc::PC9<stm32h7xx_hal::gpio::Analog>, stm32h7xx_hal::gpio::gpioc::PC10<stm32h7xx_hal::gpio::Analog>, stm32h7xx_hal::gpio::gpioc::PC11<stm32h7xx_hal::gpio::Analog>, stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Analog>, stm32h7xx_hal::gpio::gpioa::PA11<stm32h7xx_hal::gpio::Analog>, stm32h7xx_hal::stm32::SDMMC1, stm32h7xx_hal::rcc::rec::Sdmmc1, &'r mut stm32h7xx_hal::stm32::SYSCFG, &'s mut stm32h7xx_hal::stm32::EXTI, &'t0 stm32h7xx_hal::rcc::CoreClocks) -> sdmmc::Sdmmc {sdmmc::Sdmmc::new}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:45:21: 45:38
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(stm32h7xx_hal::gpio::gpioc::PC12<stm32h7xx_hal::gpio::Analog>, stm32h7xx_hal::gpio::gpiod::PD2<stm32h7xx_hal::gpio::Analog>, stm32h7xx_hal::gpio::gpioc::PC8<stm32h7xx_hal::gpio::Analog>, stm32h7xx_hal::gpio::gpioc::PC9<stm32h7xx_hal::gpio::Analog>, stm32h7xx_hal::gpio::gpioc::PC10<stm32h7xx_hal::gpio::Analog>, stm32h7xx_hal::gpio::gpioc::PC11<stm32h7xx_hal::gpio::Analog>, stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Analog>, stm32h7xx_hal::gpio::gpioa::PA11<stm32h7xx_hal::gpio::Analog>, stm32h7xx_hal::stm32::SDMMC1, stm32h7xx_hal::rcc::rec::Sdmmc1, &'r mut stm32h7xx_hal::stm32::SYSCFG, &'s mut stm32h7xx_hal::stm32::EXTI, &'t0 stm32h7xx_hal::rcc::CoreClocks) -> sdmmc::Sdmmc {sdmmc::Sdmmc::new}, val: Value(Scalar(<ZST>)) }
    }

    bb43: {
        StorageDead(_94);                // scope 14 at src\main.rs:59:5: 59:6
        StorageDead(_92);                // scope 14 at src\main.rs:59:5: 59:6
        StorageDead(_90);                // scope 14 at src\main.rs:59:5: 59:6
        StorageDead(_89);                // scope 14 at src\main.rs:59:5: 59:6
        StorageDead(_88);                // scope 14 at src\main.rs:59:5: 59:6
        StorageDead(_87);                // scope 14 at src\main.rs:59:5: 59:6
        StorageDead(_86);                // scope 14 at src\main.rs:59:5: 59:6
        StorageDead(_85);                // scope 14 at src\main.rs:59:5: 59:6
        StorageDead(_84);                // scope 14 at src\main.rs:59:5: 59:6
        StorageDead(_83);                // scope 14 at src\main.rs:59:5: 59:6
        StorageDead(_82);                // scope 14 at src\main.rs:59:5: 59:6
        StorageDead(_81);                // scope 14 at src\main.rs:59:5: 59:6
        StorageDead(_80);                // scope 14 at src\main.rs:59:5: 59:6
        StorageDead(_95);                // scope 14 at src\main.rs:59:6: 59:7
        StorageDead(_93);                // scope 14 at src\main.rs:59:6: 59:7
        StorageDead(_91);                // scope 14 at src\main.rs:59:6: 59:7
        StorageLive(_96);                // scope 15 at src\main.rs:60:8: 60:27
        StorageLive(_97);                // scope 15 at src\main.rs:60:8: 60:13
        _97 = &_79;                      // scope 15 at src\main.rs:60:8: 60:13
        _96 = const sdmmc::Sdmmc::is_detected(move _97) -> bb44; // scope 15 at src\main.rs:60:8: 60:27
                                         // ty::Const
                                         // + ty: for<'r> fn(&'r sdmmc::Sdmmc) -> bool {sdmmc::Sdmmc::is_detected}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:60:14: 60:25
                                         // + literal: Const { ty: for<'r> fn(&'r sdmmc::Sdmmc) -> bool {sdmmc::Sdmmc::is_detected}, val: Value(Scalar(<ZST>)) }
    }

    bb44: {
        StorageDead(_97);                // scope 15 at src\main.rs:60:26: 60:27
        switchInt(_96) -> [false: bb45, otherwise: bb46]; // scope 15 at src\main.rs:60:5: 64:6
    }

    bb45: {
        goto -> bb64;                    // scope 15 at src\main.rs:60:5: 64:6
    }

    bb46: {
        StorageLive(_98);                // scope 15 at src\main.rs:61:25: 61:42
        StorageLive(_99);                // scope 15 at src\main.rs:61:25: 61:30
        _99 = &mut _79;                  // scope 15 at src\main.rs:61:25: 61:30
        _98 = const sdmmc::Sdmmc::init_card(move _99) -> bb47; // scope 15 at src\main.rs:61:25: 61:42
                                         // ty::Const
                                         // + ty: for<'r> fn(&'r mut sdmmc::Sdmmc) -> core::result::Result<(), stm32h7xx_hal::sdmmc::Error> {sdmmc::Sdmmc::init_card}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:61:31: 61:40
                                         // + literal: Const { ty: for<'r> fn(&'r mut sdmmc::Sdmmc) -> core::result::Result<(), stm32h7xx_hal::sdmmc::Error> {sdmmc::Sdmmc::init_card}, val: Value(Scalar(<ZST>)) }
    }

    bb47: {
        StorageDead(_99);                // scope 15 at src\main.rs:61:41: 61:42
        _100 = discriminant(_98);        // scope 15 at src\main.rs:61:16: 61:22
        switchInt(move _100) -> [1_isize: bb49, otherwise: bb48]; // scope 15 at src\main.rs:61:16: 61:22
    }

    bb48: {
        goto -> bb63;                    // scope 15 at src\main.rs:61:9: 63:10
    }

    bb49: {
        StorageLive(_101);               // scope 15 at src\main.rs:61:20: 61:21
        _101 = ((_98 as Err).0: stm32h7xx_hal::sdmmc::Error); // scope 15 at src\main.rs:61:20: 61:21
        StorageLive(_102);               // scope 16 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:45:13: 45:16
        _102 = const log::Level::Error;  // scope 16 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:77:14: 77:34
                                         // ty::Const
                                         // + ty: log::Level
                                         // + val: Value(Scalar(0x00000001))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:77:14: 77:34
                                         // + literal: Const { ty: log::Level, val: Value(Scalar(0x00000001)) }
        StorageLive(_103);               // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:12: 46:73
        StorageLive(_104);               // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:12: 46:43
        StorageLive(_105);               // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:12: 46:15
        _105 = &_102;                    // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:12: 46:15
        StorageLive(_106);               // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:19: 46:43
        _136 = const __cortex_m_rt_main::promoted[2]; // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:19: 46:43
                                         // ty::Const
                                         // + ty: &log::LevelFilter
                                         // + val: Unevaluated(DefId(0:74 ~ miscomp_repro[978e]::__cortex_m_rt_main[0]), [], Some(promoted[2]))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:19: 46:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(DefId(0:74 ~ miscomp_repro[978e]::__cortex_m_rt_main[0]), [], Some(promoted[2])) }
        _106 = _136;                     // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:19: 46:43
        _104 = const <log::Level as core::cmp::PartialOrd<log::LevelFilter>>::le(move _105, move _106) -> bb54; // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:12: 46:43
                                         // ty::Const
                                         // + ty: for<'r, 's> fn(&'r log::Level, &'s log::LevelFilter) -> bool {<log::Level as core::cmp::PartialOrd<log::LevelFilter>>::le}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:12: 46:43
                                         // + literal: Const { ty: for<'r, 's> fn(&'r log::Level, &'s log::LevelFilter) -> bool {<log::Level as core::cmp::PartialOrd<log::LevelFilter>>::le}, val: Value(Scalar(<ZST>)) }
    }

    bb50: {
        _103 = const true;               // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:12: 46:73
                                         // ty::Const
                                         // + ty: bool
                                         // + val: Value(Scalar(0x01))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:12: 46:73
                                         // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }
        goto -> bb53;                    // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:12: 46:73
    }

    bb51: {
        _103 = const false;              // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:12: 46:73
                                         // ty::Const
                                         // + ty: bool
                                         // + val: Value(Scalar(0x00))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:12: 46:73
                                         // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }
        goto -> bb53;                    // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:12: 46:73
    }

    bb52: {
        StorageLive(_107);               // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:47: 46:73
        StorageLive(_108);               // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:47: 46:50
        _108 = &_102;                    // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:47: 46:50
        StorageLive(_109);               // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:54: 46:73
        StorageLive(_110);               // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:54: 46:73
        _110 = const log::max_level() -> bb55; // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:54: 46:73
                                         // ty::Const
                                         // + ty: fn() -> log::LevelFilter {log::max_level}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:54: 46:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(Scalar(<ZST>)) }
    }

    bb53: {
        StorageDead(_107);               // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:72: 46:73
        StorageDead(_104);               // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:72: 46:73
        switchInt(_103) -> [false: bb57, otherwise: bb58]; // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:9: 52:10
    }

    bb54: {
        StorageDead(_106);               // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:42: 46:43
        StorageDead(_105);               // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:42: 46:43
        switchInt(move _104) -> [false: bb51, otherwise: bb52]; // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:12: 46:73
    }

    bb55: {
        _109 = &_110;                    // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:54: 46:73
        _107 = const <log::Level as core::cmp::PartialOrd<log::LevelFilter>>::le(move _108, move _109) -> bb56; // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:47: 46:73
                                         // ty::Const
                                         // + ty: for<'r, 's> fn(&'r log::Level, &'s log::LevelFilter) -> bool {<log::Level as core::cmp::PartialOrd<log::LevelFilter>>::le}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:47: 46:73
                                         // + literal: Const { ty: for<'r, 's> fn(&'r log::Level, &'s log::LevelFilter) -> bool {<log::Level as core::cmp::PartialOrd<log::LevelFilter>>::le}, val: Value(Scalar(<ZST>)) }
    }

    bb56: {
        StorageDead(_110);               // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:72: 46:73
        StorageDead(_109);               // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:72: 46:73
        StorageDead(_108);               // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:72: 46:73
        switchInt(move _107) -> [false: bb51, otherwise: bb50]; // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:12: 46:73
    }

    bb57: {
        goto -> bb62;                    // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:9: 52:10
    }

    bb58: {
        StorageLive(_111);               // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:47:13: 51:14
        StorageLive(_112);               // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        StorageLive(_113);               // scope 17 at src\main.rs:62:20: 62:61
        StorageLive(_114);               // scope 17 at src\main.rs:62:20: 62:61
        StorageLive(_115);               // scope 17 at src\main.rs:62:20: 62:61
        _135 = const __cortex_m_rt_main::promoted[1]; // scope 17 at src\main.rs:62:20: 62:61
                                         // ty::Const
                                         // + ty: &[&str; 1]
                                         // + val: Unevaluated(DefId(0:74 ~ miscomp_repro[978e]::__cortex_m_rt_main[0]), [], Some(promoted[1]))
                                         // mir::Constant
                                         // + span: src\main.rs:62:20: 62:61
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(DefId(0:74 ~ miscomp_repro[978e]::__cortex_m_rt_main[0]), [], Some(promoted[1])) }
        _115 = _135;                     // scope 17 at src\main.rs:62:20: 62:61
        _114 = _115;                     // scope 17 at src\main.rs:62:20: 62:61
        _113 = move _114 as &[&str] (Pointer(Unsize)); // scope 17 at src\main.rs:62:20: 62:61
        StorageDead(_114);               // scope 17 at src\main.rs:62:60: 62:61
        StorageLive(_116);               // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        StorageLive(_117);               // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        StorageLive(_118);               // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        StorageLive(_119);               // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        StorageLive(_120);               // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        StorageLive(_121);               // scope 17 at src\main.rs:62:63: 62:64
        _121 = &_101;                    // scope 17 at src\main.rs:62:63: 62:64
        (_120.0: &stm32h7xx_hal::sdmmc::Error) = move _121; // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        StorageDead(_121);               // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:31: 236:32
        StorageLive(_122);               // scope 17 at src\main.rs:62:63: 62:64
        _122 = (_120.0: &stm32h7xx_hal::sdmmc::Error); // scope 17 at src\main.rs:62:63: 62:64
        StorageLive(_123);               // scope 18 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        StorageLive(_124);               // scope 18 at src\main.rs:62:63: 62:64
        _124 = _122;                     // scope 18 at src\main.rs:62:63: 62:64
        StorageLive(_125);               // scope 18 at src\main.rs:62:63: 62:64
        _125 = const <stm32h7xx_hal::sdmmc::Error as core::fmt::Debug>::fmt as for<'r, 's, 't0> fn(&'r stm32h7xx_hal::sdmmc::Error, &'s mut core::fmt::Formatter<'t0>) -> core::result::Result<(), core::fmt::Error> (Pointer(ReifyFnPointer)); // scope 18 at src\main.rs:62:63: 62:64
                                         // ty::Const
                                         // + ty: for<'r, 's, 't0> fn(&'r stm32h7xx_hal::sdmmc::Error, &'s mut core::fmt::Formatter<'t0>) -> core::result::Result<(), core::fmt::Error> {<stm32h7xx_hal::sdmmc::Error as core::fmt::Debug>::fmt}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:62:63: 62:64
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r stm32h7xx_hal::sdmmc::Error, &'s mut core::fmt::Formatter<'t0>) -> core::result::Result<(), core::fmt::Error> {<stm32h7xx_hal::sdmmc::Error as core::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }
        _123 = const core::fmt::ArgumentV1::new::<stm32h7xx_hal::sdmmc::Error>(move _124, move _125) -> bb59; // scope 18 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
                                         // ty::Const
                                         // + ty: for<'b> fn(&'b stm32h7xx_hal::sdmmc::Error, for<'r, 's, 't0> fn(&'r stm32h7xx_hal::sdmmc::Error, &'s mut core::fmt::Formatter<'t0>) -> core::result::Result<(), core::fmt::Error>) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::new::<stm32h7xx_hal::sdmmc::Error>}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b stm32h7xx_hal::sdmmc::Error, for<'r, 's, 't0> fn(&'r stm32h7xx_hal::sdmmc::Error, &'s mut core::fmt::Formatter<'t0>) -> core::result::Result<(), core::fmt::Error>) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::new::<stm32h7xx_hal::sdmmc::Error>}, val: Value(Scalar(<ZST>)) }
    }

    bb59: {
        StorageDead(_125);               // scope 18 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:31: 236:32
        StorageDead(_124);               // scope 18 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:31: 236:32
        _119 = [move _123];              // scope 18 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        StorageDead(_123);               // scope 18 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:31: 236:32
        StorageDead(_122);               // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:31: 236:32
        _118 = &_119;                    // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        _117 = _118;                     // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        _116 = move _117 as &[core::fmt::ArgumentV1] (Pointer(Unsize)); // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        StorageDead(_117);               // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:31: 236:32
        _112 = const core::fmt::Arguments::new_v1(move _113, move _116) -> bb60; // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
                                         // ty::Const
                                         // + ty: fn(&[&str], &[core::fmt::ArgumentV1]) -> core::fmt::Arguments {core::fmt::Arguments::new_v1}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&str], &[core::fmt::ArgumentV1]) -> core::fmt::Arguments {core::fmt::Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
    }

    bb60: {
        StorageDead(_116);               // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:31: 236:32
        StorageDead(_113);               // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:31: 236:32
        StorageLive(_126);               // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:49:17: 49:20
        _126 = _102;                     // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:49:17: 49:20
        StorageLive(_127);               // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:50:17: 50:79
        StorageLive(_128);               // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:50:17: 50:79
        _134 = const __cortex_m_rt_main::promoted[0]; // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:50:17: 50:79
                                         // ty::Const
                                         // + ty: &(&str, &str, &str, u32)
                                         // + val: Unevaluated(DefId(0:74 ~ miscomp_repro[978e]::__cortex_m_rt_main[0]), [], Some(promoted[0]))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:50:17: 50:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(DefId(0:74 ~ miscomp_repro[978e]::__cortex_m_rt_main[0]), [], Some(promoted[0])) }
        _128 = _134;                     // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:50:17: 50:79
        _127 = _128;                     // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:50:17: 50:79
        _111 = const log::__private_api_log(move _112, move _126, move _127) -> bb61; // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:47:13: 51:14
                                         // ty::Const
                                         // + ty: for<'r, 's, 't0> fn(core::fmt::Arguments<'r>, log::Level, &'s (&'t0 str, &'static str, &'static str, u32)) {log::__private_api_log}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:47:13: 47:38
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(core::fmt::Arguments<'r>, log::Level, &'s (&'t0 str, &'static str, &'static str, u32)) {log::__private_api_log}, val: Value(Scalar(<ZST>)) }
    }

    bb61: {
        StorageDead(_127);               // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:51:13: 51:14
        StorageDead(_126);               // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:51:13: 51:14
        StorageDead(_112);               // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:51:13: 51:14
        StorageDead(_128);               // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:51:14: 51:15
        StorageDead(_120);               // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:51:14: 51:15
        StorageDead(_119);               // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:51:14: 51:15
        StorageDead(_118);               // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:51:14: 51:15
        StorageDead(_115);               // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:51:14: 51:15
        StorageDead(_111);               // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:51:14: 51:15
        goto -> bb62;                    // scope 17 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:9: 52:10
    }

    bb62: {
        StorageDead(_102);               // scope 16 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:53:5: 53:6
        StorageDead(_103);               // scope 16 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:53:5: 53:6
        StorageDead(_101);               // scope 15 at src\main.rs:63:9: 63:10
        goto -> bb63;                    // scope 15 at src\main.rs:61:9: 63:10
    }

    bb63: {
        StorageDead(_98);                // scope 15 at src\main.rs:64:5: 64:6
        goto -> bb64;                    // scope 15 at src\main.rs:60:5: 64:6
    }

    bb64: {
        StorageDead(_96);                // scope 15 at src\main.rs:64:5: 64:6
        StorageLive(_129);               // scope 15 at src\main.rs:66:5: 68:7
        StorageLive(_130);               // scope 15 at src\main.rs:66:31: 68:6
        (_130.0: sdmmc::Sdmmc) = move _79; // scope 15 at src\main.rs:66:31: 68:6
        _129 = const cortex_m::interrupt::free::<[closure@src\main.rs:66:31: 68:6 sdmmc:sdmmc::Sdmmc], ()>(move _130) -> bb65; // scope 15 at src\main.rs:66:5: 68:7
                                         // ty::Const
                                         // + ty: fn([closure@src\main.rs:66:31: 68:6 sdmmc:sdmmc::Sdmmc]) {cortex_m::interrupt::free::<[closure@src\main.rs:66:31: 68:6 sdmmc:sdmmc::Sdmmc], ()>}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:66:5: 66:30
                                         // + literal: Const { ty: fn([closure@src\main.rs:66:31: 68:6 sdmmc:sdmmc::Sdmmc]) {cortex_m::interrupt::free::<[closure@src\main.rs:66:31: 68:6 sdmmc:sdmmc::Sdmmc], ()>}, val: Value(Scalar(<ZST>)) }
    }

    bb65: {
        StorageDead(_130);               // scope 15 at src\main.rs:68:6: 68:7
        StorageDead(_129);               // scope 15 at src\main.rs:68:7: 68:8
        StorageLive(_131);               // scope 19 at src\main.rs:71:9: 71:46
        StorageLive(_132);               // scope 19 at src\main.rs:71:27: 71:45
        _132 = const stm32h7xx_hal::interrupt::EXTI9_5; // scope 19 at src\main.rs:71:27: 71:45
                                         // ty::Const
                                         // + ty: stm32h7xx_hal::interrupt
                                         // + val: Value(Scalar(0x17))
                                         // mir::Constant
                                         // + span: src\main.rs:71:27: 71:45
                                         // + literal: Const { ty: stm32h7xx_hal::interrupt, val: Value(Scalar(0x17)) }
        _131 = const cortex_m::peripheral::nvic::<impl cortex_m::peripheral::NVIC>::unmask::<stm32h7xx_hal::interrupt>(move _132) -> bb66; // scope 19 at src\main.rs:71:9: 71:46
                                         // ty::Const
                                         // + ty: unsafe fn(stm32h7xx_hal::interrupt) {cortex_m::peripheral::nvic::<impl cortex_m::peripheral::NVIC>::unmask::<stm32h7xx_hal::interrupt>}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:71:9: 71:26
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: unsafe fn(stm32h7xx_hal::interrupt) {cortex_m::peripheral::nvic::<impl cortex_m::peripheral::NVIC>::unmask::<stm32h7xx_hal::interrupt>}, val: Value(Scalar(<ZST>)) }
    }

    bb66: {
        StorageDead(_132);               // scope 19 at src\main.rs:71:45: 71:46
        StorageDead(_131);               // scope 19 at src\main.rs:71:46: 71:47
        goto -> bb67;                    // scope 15 at src\main.rs:74:5: 76:6
    }

    bb67: {
        StorageLive(_133);               // scope 15 at src\main.rs:75:9: 75:19
        _133 = const cortex_m::asm::wfi() -> bb68; // scope 15 at src\main.rs:75:9: 75:19
                                         // ty::Const
                                         // + ty: fn() {cortex_m::asm::wfi}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:75:9: 75:17
                                         // + literal: Const { ty: fn() {cortex_m::asm::wfi}, val: Value(Scalar(<ZST>)) }
    }

    bb68: {
        StorageDead(_133);               // scope 15 at src\main.rs:75:19: 75:20
        goto -> bb67;                    // scope 15 at src\main.rs:74:5: 76:6
    }
}

promoted[0] in __cortex_m_rt_main: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:50:17: 50:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:50:18: 50:79
    let mut _2: &str;                    // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:244:9: 244:23
    let mut _3: &str;                    // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:244:9: 244:23
    scope 1 {
        scope 2 {
            scope 3 {
                scope 4 {
                }
            }
            scope 5 {
                scope 6 {
                    scope 7 {
                        scope 8 {
                        }
                    }
                    scope 9 {
                        scope 10 {
                            scope 11 {
                                scope 12 {
                                    scope 13 {
                                        scope 14 {
                                            scope 15 {
                                                scope 16 {
                                                    scope 17 {
                                                        scope 18 {
                                                        }
                                                    }
                                                }
                                                scope 19 {
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _3 = const "miscomp_repro";      // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:244:9: 244:23
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [109, 105, 115, 99, 111, 109, 112, 95, 114, 101, 112, 114, 111], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8191], len: Size { raw: 13 } }, size: Size { raw: 13 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 13 })
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:244:9: 244:23
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [109, 105, 115, 99, 111, 109, 112, 95, 114, 101, 112, 114, 111], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8191], len: Size { raw: 13 } }, size: Size { raw: 13 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 13 }) }
        _2 = _3;                         // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:244:9: 244:23
        (_1.0: &str) = move _2;          // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:50:18: 50:79
        (_1.1: &str) = const "miscomp_repro"; // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:50:18: 50:79
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [109, 105, 115, 99, 111, 109, 112, 95, 114, 101, 112, 114, 111], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8191], len: Size { raw: 13 } }, size: Size { raw: 13 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 13 })
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:244:9: 244:23
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [109, 105, 115, 99, 111, 109, 112, 95, 114, 101, 112, 114, 111], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8191], len: Size { raw: 13 } }, size: Size { raw: 13 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 13 }) }
        (_1.2: &str) = const "src\\main.rs"; // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:50:18: 50:79
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [115, 114, 99, 92, 109, 97, 105, 110, 46, 114, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2047], len: Size { raw: 11 } }, size: Size { raw: 11 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 11 })
                                         // mir::Constant
                                         // + span: src\main.rs:62:13: 62:66
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [115, 114, 99, 92, 109, 97, 105, 110, 46, 114, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2047], len: Size { raw: 11 } }, size: Size { raw: 11 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 11 }) }
        (_1.3: u32) = const 62_u32;      // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:50:18: 50:79
                                         // ty::Const
                                         // + ty: u32
                                         // + val: Value(Scalar(0x0000003e))
                                         // mir::Constant
                                         // + span: src\main.rs:62:13: 62:66
                                         // + literal: Const { ty: u32, val: Value(Scalar(0x0000003e)) }
        _0 = &_1;                        // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:50:17: 50:79
        return;                          // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:50:17: 50:79
    }
}

promoted[1] in __cortex_m_rt_main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at src\main.rs:62:20: 62:61
    let mut _1: [&str; 1];               // in scope 0 at src\main.rs:62:20: 62:61
    let mut _2: &str;                    // in scope 0 at src\main.rs:62:20: 62:61
    let mut _3: &str;                    // in scope 0 at src\main.rs:62:20: 62:61
    scope 1 {
        scope 2 {
            scope 3 {
                scope 4 {
                }
            }
            scope 5 {
                scope 6 {
                    scope 7 {
                        scope 8 {
                        }
                    }
                    scope 9 {
                        scope 10 {
                            scope 11 {
                                scope 12 {
                                    scope 13 {
                                        scope 14 {
                                            scope 15 {
                                                scope 16 {
                                                    scope 17 {
                                                        scope 18 {
                                                        }
                                                    }
                                                }
                                                scope 19 {
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _3 = const "Unable to connect to MicroSD card: "; // scope 0 at src\main.rs:62:20: 62:61
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [85, 110, 97, 98, 108, 101, 32, 116, 111, 32, 99, 111, 110, 110, 101, 99, 116, 32, 116, 111, 32, 77, 105, 99, 114, 111, 83, 68, 32, 99, 97, 114, 100, 58, 32], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [34359738367], len: Size { raw: 35 } }, size: Size { raw: 35 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 35 })
                                         // mir::Constant
                                         // + span: src\main.rs:62:20: 62:61
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [85, 110, 97, 98, 108, 101, 32, 116, 111, 32, 99, 111, 110, 110, 101, 99, 116, 32, 116, 111, 32, 77, 105, 99, 114, 111, 83, 68, 32, 99, 97, 114, 100, 58, 32], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [34359738367], len: Size { raw: 35 } }, size: Size { raw: 35 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 35 }) }
        _2 = _3;                         // scope 0 at src\main.rs:62:20: 62:61
        _1 = [move _2];                  // scope 0 at src\main.rs:62:20: 62:61
        _0 = &_1;                        // scope 0 at src\main.rs:62:20: 62:61
        return;                          // scope 0 at src\main.rs:62:20: 62:61
    }
}

promoted[2] in __cortex_m_rt_main: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:19: 46:43
    let mut _1: log::LevelFilter;        // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:19: 46:43
    scope 1 {
        scope 2 {
            scope 3 {
                scope 4 {
                }
            }
            scope 5 {
                scope 6 {
                    scope 7 {
                        scope 8 {
                        }
                    }
                    scope 9 {
                        scope 10 {
                            scope 11 {
                                scope 12 {
                                    scope 13 {
                                        scope 14 {
                                            scope 15 {
                                                scope 16 {
                                                    scope 17 {
                                                        scope 18 {
                                                        }
                                                    }
                                                }
                                                scope 19 {
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const log::STATIC_MAX_LEVEL; // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:19: 46:43
                                         // ty::Const
                                         // + ty: log::LevelFilter
                                         // + val: Unevaluated(DefId(18:171 ~ log[9998]::STATIC_MAX_LEVEL[0]), [], None)
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:19: 46:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(DefId(18:171 ~ log[9998]::STATIC_MAX_LEVEL[0]), [], None) }
        _0 = &_1;                        // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:19: 46:43
        return;                          // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:19: 46:43
    }
}

promoted[3] in __cortex_m_rt_main: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:244:9: 244:23
    let mut _3: &str;                    // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:244:9: 244:23
    scope 1 {
        scope 2 {
            scope 3 {
                scope 4 {
                }
            }
            scope 5 {
                scope 6 {
                    scope 7 {
                        scope 8 {
                        }
                    }
                    scope 9 {
                        scope 10 {
                            scope 11 {
                                scope 12 {
                                    scope 13 {
                                        scope 14 {
                                            scope 15 {
                                                scope 16 {
                                                    scope 17 {
                                                        scope 18 {
                                                        }
                                                    }
                                                }
                                                scope 19 {
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _3 = const "miscomp_repro";      // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:244:9: 244:23
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [109, 105, 115, 99, 111, 109, 112, 95, 114, 101, 112, 114, 111], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8191], len: Size { raw: 13 } }, size: Size { raw: 13 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 13 })
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:244:9: 244:23
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [109, 105, 115, 99, 111, 109, 112, 95, 114, 101, 112, 114, 111], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8191], len: Size { raw: 13 } }, size: Size { raw: 13 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 13 }) }
        _2 = _3;                         // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:244:9: 244:23
        (_1.0: &str) = move _2;          // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:18: 40:79
        (_1.1: &str) = const "miscomp_repro"; // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:18: 40:79
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [109, 105, 115, 99, 111, 109, 112, 95, 114, 101, 112, 114, 111], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8191], len: Size { raw: 13 } }, size: Size { raw: 13 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 13 })
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:244:9: 244:23
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [109, 105, 115, 99, 111, 109, 112, 95, 114, 101, 112, 114, 111], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8191], len: Size { raw: 13 } }, size: Size { raw: 13 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 13 }) }
        (_1.2: &str) = const "src\\main.rs"; // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:18: 40:79
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [115, 114, 99, 92, 109, 97, 105, 110, 46, 114, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2047], len: Size { raw: 11 } }, size: Size { raw: 11 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 11 })
                                         // mir::Constant
                                         // + span: src\main.rs:31:5: 31:45
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [115, 114, 99, 92, 109, 97, 105, 110, 46, 114, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2047], len: Size { raw: 11 } }, size: Size { raw: 11 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 11 }) }
        (_1.3: u32) = const 31_u32;      // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:18: 40:79
                                         // ty::Const
                                         // + ty: u32
                                         // + val: Value(Scalar(0x0000001f))
                                         // mir::Constant
                                         // + span: src\main.rs:31:5: 31:45
                                         // + literal: Const { ty: u32, val: Value(Scalar(0x0000001f)) }
        _0 = &_1;                        // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:17: 40:79
        return;                          // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:17: 40:79
    }
}

promoted[4] in __cortex_m_rt_main: &[core::fmt::ArgumentV1; 0] = {
    let mut _0: &[core::fmt::ArgumentV1; 0]; // return place in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
    let mut _1: [core::fmt::ArgumentV1; 0]; // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
    scope 1 {
        scope 2 {
            scope 3 {
                scope 4 {
                }
            }
            scope 5 {
                scope 6 {
                    scope 7 {
                        scope 8 {
                        }
                    }
                    scope 9 {
                        scope 10 {
                            scope 11 {
                                scope 12 {
                                    scope 13 {
                                        scope 14 {
                                            scope 15 {
                                                scope 16 {
                                                    scope 17 {
                                                        scope 18 {
                                                        }
                                                    }
                                                }
                                                scope 19 {
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = [];                         // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        _0 = &_1;                        // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        return;                          // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
    }
}

promoted[5] in __cortex_m_rt_main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at src\main.rs:31:11: 31:43
    let mut _1: [&str; 1];               // in scope 0 at src\main.rs:31:11: 31:43
    let mut _2: &str;                    // in scope 0 at src\main.rs:31:11: 31:43
    let mut _3: &str;                    // in scope 0 at src\main.rs:31:11: 31:43
    scope 1 {
        scope 2 {
            scope 3 {
                scope 4 {
                }
            }
            scope 5 {
                scope 6 {
                    scope 7 {
                        scope 8 {
                        }
                    }
                    scope 9 {
                        scope 10 {
                            scope 11 {
                                scope 12 {
                                    scope 13 {
                                        scope 14 {
                                            scope 15 {
                                                scope 16 {
                                                    scope 17 {
                                                        scope 18 {
                                                        }
                                                    }
                                                }
                                                scope 19 {
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _3 = const "Setup RCC...                  "; // scope 0 at src\main.rs:31:11: 31:43
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [83, 101, 116, 117, 112, 32, 82, 67, 67, 46, 46, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1073741823], len: Size { raw: 30 } }, size: Size { raw: 30 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 30 })
                                         // mir::Constant
                                         // + span: src\main.rs:31:11: 31:43
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [83, 101, 116, 117, 112, 32, 82, 67, 67, 46, 46, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1073741823], len: Size { raw: 30 } }, size: Size { raw: 30 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 30 }) }
        _2 = _3;                         // scope 0 at src\main.rs:31:11: 31:43
        _1 = [move _2];                  // scope 0 at src\main.rs:31:11: 31:43
        _0 = &_1;                        // scope 0 at src\main.rs:31:11: 31:43
        return;                          // scope 0 at src\main.rs:31:11: 31:43
    }
}

promoted[6] in __cortex_m_rt_main: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:19: 34:43
    let mut _1: log::LevelFilter;        // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:19: 34:43
    scope 1 {
        scope 2 {
            scope 3 {
                scope 4 {
                }
            }
            scope 5 {
                scope 6 {
                    scope 7 {
                        scope 8 {
                        }
                    }
                    scope 9 {
                        scope 10 {
                            scope 11 {
                                scope 12 {
                                    scope 13 {
                                        scope 14 {
                                            scope 15 {
                                                scope 16 {
                                                    scope 17 {
                                                        scope 18 {
                                                        }
                                                    }
                                                }
                                                scope 19 {
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const log::STATIC_MAX_LEVEL; // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:19: 34:43
                                         // ty::Const
                                         // + ty: log::LevelFilter
                                         // + val: Unevaluated(DefId(18:171 ~ log[9998]::STATIC_MAX_LEVEL[0]), [], None)
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:19: 34:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(DefId(18:171 ~ log[9998]::STATIC_MAX_LEVEL[0]), [], None) }
        _0 = &_1;                        // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:19: 34:43
        return;                          // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:19: 34:43
    }
}

promoted[7] in __cortex_m_rt_main: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:244:9: 244:23
    let mut _3: &str;                    // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:244:9: 244:23
    scope 1 {
        scope 2 {
            scope 3 {
                scope 4 {
                }
            }
            scope 5 {
                scope 6 {
                    scope 7 {
                        scope 8 {
                        }
                    }
                    scope 9 {
                        scope 10 {
                            scope 11 {
                                scope 12 {
                                    scope 13 {
                                        scope 14 {
                                            scope 15 {
                                                scope 16 {
                                                    scope 17 {
                                                        scope 18 {
                                                        }
                                                    }
                                                }
                                                scope 19 {
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _3 = const "miscomp_repro";      // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:244:9: 244:23
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [109, 105, 115, 99, 111, 109, 112, 95, 114, 101, 112, 114, 111], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8191], len: Size { raw: 13 } }, size: Size { raw: 13 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 13 })
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:244:9: 244:23
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [109, 105, 115, 99, 111, 109, 112, 95, 114, 101, 112, 114, 111], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8191], len: Size { raw: 13 } }, size: Size { raw: 13 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 13 }) }
        _2 = _3;                         // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:244:9: 244:23
        (_1.0: &str) = move _2;          // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:18: 40:79
        (_1.1: &str) = const "miscomp_repro"; // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:18: 40:79
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [109, 105, 115, 99, 111, 109, 112, 95, 114, 101, 112, 114, 111], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8191], len: Size { raw: 13 } }, size: Size { raw: 13 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 13 })
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:244:9: 244:23
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [109, 105, 115, 99, 111, 109, 112, 95, 114, 101, 112, 114, 111], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8191], len: Size { raw: 13 } }, size: Size { raw: 13 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 13 }) }
        (_1.2: &str) = const "src\\main.rs"; // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:18: 40:79
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [115, 114, 99, 92, 109, 97, 105, 110, 46, 114, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2047], len: Size { raw: 11 } }, size: Size { raw: 11 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 11 })
                                         // mir::Constant
                                         // + span: src\main.rs:26:5: 26:45
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [115, 114, 99, 92, 109, 97, 105, 110, 46, 114, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2047], len: Size { raw: 11 } }, size: Size { raw: 11 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 11 }) }
        (_1.3: u32) = const 26_u32;      // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:18: 40:79
                                         // ty::Const
                                         // + ty: u32
                                         // + val: Value(Scalar(0x0000001a))
                                         // mir::Constant
                                         // + span: src\main.rs:26:5: 26:45
                                         // + literal: Const { ty: u32, val: Value(Scalar(0x0000001a)) }
        _0 = &_1;                        // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:17: 40:79
        return;                          // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:17: 40:79
    }
}

promoted[8] in __cortex_m_rt_main: &[core::fmt::ArgumentV1; 0] = {
    let mut _0: &[core::fmt::ArgumentV1; 0]; // return place in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
    let mut _1: [core::fmt::ArgumentV1; 0]; // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
    scope 1 {
        scope 2 {
            scope 3 {
                scope 4 {
                }
            }
            scope 5 {
                scope 6 {
                    scope 7 {
                        scope 8 {
                        }
                    }
                    scope 9 {
                        scope 10 {
                            scope 11 {
                                scope 12 {
                                    scope 13 {
                                        scope 14 {
                                            scope 15 {
                                                scope 16 {
                                                    scope 17 {
                                                        scope 18 {
                                                        }
                                                    }
                                                }
                                                scope 19 {
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = [];                         // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        _0 = &_1;                        // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        return;                          // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
    }
}

promoted[9] in __cortex_m_rt_main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at src\main.rs:26:11: 26:43
    let mut _1: [&str; 1];               // in scope 0 at src\main.rs:26:11: 26:43
    let mut _2: &str;                    // in scope 0 at src\main.rs:26:11: 26:43
    let mut _3: &str;                    // in scope 0 at src\main.rs:26:11: 26:43
    scope 1 {
        scope 2 {
            scope 3 {
                scope 4 {
                }
            }
            scope 5 {
                scope 6 {
                    scope 7 {
                        scope 8 {
                        }
                    }
                    scope 9 {
                        scope 10 {
                            scope 11 {
                                scope 12 {
                                    scope 13 {
                                        scope 14 {
                                            scope 15 {
                                                scope 16 {
                                                    scope 17 {
                                                        scope 18 {
                                                        }
                                                    }
                                                }
                                                scope 19 {
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _3 = const "Setup PWR...                  "; // scope 0 at src\main.rs:26:11: 26:43
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [83, 101, 116, 117, 112, 32, 80, 87, 82, 46, 46, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1073741823], len: Size { raw: 30 } }, size: Size { raw: 30 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 30 })
                                         // mir::Constant
                                         // + span: src\main.rs:26:11: 26:43
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [83, 101, 116, 117, 112, 32, 80, 87, 82, 46, 46, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1073741823], len: Size { raw: 30 } }, size: Size { raw: 30 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 30 }) }
        _2 = _3;                         // scope 0 at src\main.rs:26:11: 26:43
        _1 = [move _2];                  // scope 0 at src\main.rs:26:11: 26:43
        _0 = &_1;                        // scope 0 at src\main.rs:26:11: 26:43
        return;                          // scope 0 at src\main.rs:26:11: 26:43
    }
}

promoted[10] in __cortex_m_rt_main: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:19: 34:43
    let mut _1: log::LevelFilter;        // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:19: 34:43
    scope 1 {
        scope 2 {
            scope 3 {
                scope 4 {
                }
            }
            scope 5 {
                scope 6 {
                    scope 7 {
                        scope 8 {
                        }
                    }
                    scope 9 {
                        scope 10 {
                            scope 11 {
                                scope 12 {
                                    scope 13 {
                                        scope 14 {
                                            scope 15 {
                                                scope 16 {
                                                    scope 17 {
                                                        scope 18 {
                                                        }
                                                    }
                                                }
                                                scope 19 {
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const log::STATIC_MAX_LEVEL; // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:19: 34:43
                                         // ty::Const
                                         // + ty: log::LevelFilter
                                         // + val: Unevaluated(DefId(18:171 ~ log[9998]::STATIC_MAX_LEVEL[0]), [], None)
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:19: 34:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(DefId(18:171 ~ log[9998]::STATIC_MAX_LEVEL[0]), [], None) }
        _0 = &_1;                        // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:19: 34:43
        return;                          // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:19: 34:43
    }
}

fn sdmmc::<impl at src\sdmmc.rs:11:1: 70:2>::init_card(_1: &mut sdmmc::Sdmmc) -> core::result::Result<(), stm32h7xx_hal::sdmmc::Error> {
    debug self => _1;                    // in scope 0 at src\sdmmc.rs:48:22: 48:31
    let mut _0: core::result::Result<(), stm32h7xx_hal::sdmmc::Error>; // return place in scope 0 at src\sdmmc.rs:48:36: 48:60
    let _2: ();                          // in scope 0 at src\sdmmc.rs:49:9: 49:37
    let mut _3: core::result::Result<(), stm32h7xx_hal::Never>; // in scope 0 at src\sdmmc.rs:49:9: 49:28
    let mut _4: &mut stm32h7xx_hal::gpio::gpioa::PA11<stm32h7xx_hal::gpio::Output<stm32h7xx_hal::gpio::OpenDrain>>; // in scope 0 at src\sdmmc.rs:49:9: 49:17
    let mut _5: bool;                    // in scope 0 at src\sdmmc.rs:50:12: 50:41
    let mut _6: core::result::Result<bool, stm32h7xx_hal::Never>; // in scope 0 at src\sdmmc.rs:50:12: 50:32
    let mut _7: &stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>>; // in scope 0 at src\sdmmc.rs:50:12: 50:23
    let mut _8: core::result::Result<(), stm32h7xx_hal::sdmmc::Error>; // in scope 0 at src\sdmmc.rs:53:9: 53:40
    let mut _9: core::result::Result<(), stm32h7xx_hal::sdmmc::Error>; // in scope 0 at src\sdmmc.rs:53:9: 53:39
    let mut _10: &mut stm32h7xx_hal::sdmmc::Sdmmc<stm32h7xx_hal::stm32::SDMMC1>; // in scope 0 at src\sdmmc.rs:53:9: 53:19
    let mut _11: stm32h7xx_hal::time::MegaHertz; // in scope 0 at src\sdmmc.rs:53:30: 53:38
    let mut _12: isize;                  // in scope 0 at src\sdmmc.rs:53:39: 53:40
    let _13: stm32h7xx_hal::sdmmc::Error; // in scope 0 at src\sdmmc.rs:53:39: 53:40
    let mut _14: stm32h7xx_hal::sdmmc::Error; // in scope 0 at src\sdmmc.rs:53:39: 53:40
    let mut _15: stm32h7xx_hal::sdmmc::Error; // in scope 0 at src\sdmmc.rs:53:39: 53:40
    let _16: ();                         // in scope 0 at src\sdmmc.rs:53:9: 53:40
    let _17: &stm32h7xx_hal::sdmmc::Card; // in scope 0 at src\sdmmc.rs:54:13: 54:22
    let mut _18: core::result::Result<&stm32h7xx_hal::sdmmc::Card, stm32h7xx_hal::sdmmc::Error>; // in scope 0 at src\sdmmc.rs:54:25: 54:43
    let mut _19: core::result::Result<&stm32h7xx_hal::sdmmc::Card, stm32h7xx_hal::sdmmc::Error>; // in scope 0 at src\sdmmc.rs:54:25: 54:42
    let mut _20: &stm32h7xx_hal::sdmmc::Sdmmc<stm32h7xx_hal::stm32::SDMMC1>; // in scope 0 at src\sdmmc.rs:54:25: 54:35
    let mut _21: isize;                  // in scope 0 at src\sdmmc.rs:54:42: 54:43
    let _22: stm32h7xx_hal::sdmmc::Error; // in scope 0 at src\sdmmc.rs:54:42: 54:43
    let mut _23: stm32h7xx_hal::sdmmc::Error; // in scope 0 at src\sdmmc.rs:54:42: 54:43
    let mut _24: stm32h7xx_hal::sdmmc::Error; // in scope 0 at src\sdmmc.rs:54:42: 54:43
    let _25: &stm32h7xx_hal::sdmmc::Card; // in scope 0 at src\sdmmc.rs:54:25: 54:43
    let _26: ();                         // in scope 0 at src\sdmmc.rs:55:9: 55:36
    let mut _27: core::result::Result<(), stm32h7xx_hal::Never>; // in scope 0 at src\sdmmc.rs:55:9: 55:27
    let mut _28: &mut stm32h7xx_hal::gpio::gpioa::PA11<stm32h7xx_hal::gpio::Output<stm32h7xx_hal::gpio::OpenDrain>>; // in scope 0 at src\sdmmc.rs:55:9: 55:17
    let mut _30: bool;                   // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:12: 46:73
    let mut _31: bool;                   // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:12: 46:43
    let mut _32: &log::Level;            // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:12: 46:15
    let mut _33: &log::LevelFilter;      // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:19: 46:43
    let mut _34: bool;                   // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:47: 46:73
    let mut _35: &log::Level;            // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:47: 46:50
    let mut _36: &log::LevelFilter;      // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:54: 46:73
    let _37: log::LevelFilter;           // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:54: 46:73
    let _38: ();                         // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:47:13: 51:14
    let mut _39: core::fmt::Arguments;   // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
    let mut _40: &[&str];                // in scope 0 at src\sdmmc.rs:56:15: 56:45
    let mut _41: &[&str; 1];             // in scope 0 at src\sdmmc.rs:56:15: 56:45
    let _42: &[&str; 1];                 // in scope 0 at src\sdmmc.rs:56:15: 56:45
    let mut _43: &[core::fmt::ArgumentV1]; // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
    let mut _44: &[core::fmt::ArgumentV1; 1]; // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
    let _45: &[core::fmt::ArgumentV1; 1]; // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
    let _46: [core::fmt::ArgumentV1; 1]; // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
    let mut _47: (&&stm32h7xx_hal::sdmmc::Card,); // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
    let mut _48: &&stm32h7xx_hal::sdmmc::Card; // in scope 0 at src\sdmmc.rs:56:47: 56:56
    let mut _50: core::fmt::ArgumentV1;  // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
    let mut _51: &&stm32h7xx_hal::sdmmc::Card; // in scope 0 at src\sdmmc.rs:56:47: 56:56
    let mut _52: for<'r, 's, 't0> fn(&'r &stm32h7xx_hal::sdmmc::Card, &'s mut core::fmt::Formatter<'t0>) -> core::result::Result<(), core::fmt::Error>; // in scope 0 at src\sdmmc.rs:56:47: 56:56
    let mut _53: log::Level;             // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:49:17: 49:20
    let mut _54: &(&str, &str, &str, u32); // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:50:17: 50:79
    let _55: &(&str, &str, &str, u32);   // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:50:17: 50:79
    scope 1 {
        debug err => _13;                // in scope 1 at src\sdmmc.rs:53:39: 53:40
        scope 2 {
        }
    }
    scope 3 {
        debug val => _16;                // in scope 3 at src\sdmmc.rs:53:9: 53:40
        scope 4 {
        }
    }
    scope 5 {
        debug card_info => _17;          // in scope 5 at src\sdmmc.rs:54:13: 54:22
        let _29: log::Level;             // in scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:45:13: 45:16
        scope 10 {
            debug lvl => _29;            // in scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:45:13: 45:16
            let _49: &&stm32h7xx_hal::sdmmc::Card; // in scope 10 at src\sdmmc.rs:56:47: 56:56
            let mut _56: &(&str, &str, &str, u32); // in scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:50:17: 50:79
            let mut _57: &[&str; 1];     // in scope 10 at src\sdmmc.rs:56:15: 56:45
            let mut _58: &log::LevelFilter; // in scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:19: 46:43
            scope 11 {
                debug arg0 => _49;       // in scope 11 at src\sdmmc.rs:56:47: 56:56
            }
        }
    }
    scope 6 {
        debug err => _22;                // in scope 6 at src\sdmmc.rs:54:42: 54:43
        scope 7 {
        }
    }
    scope 8 {
        debug val => _25;                // in scope 8 at src\sdmmc.rs:54:25: 54:43
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at src\sdmmc.rs:49:9: 49:37
        StorageLive(_3);                 // scope 0 at src\sdmmc.rs:49:9: 49:28
        StorageLive(_4);                 // scope 0 at src\sdmmc.rs:49:9: 49:17
        _4 = &mut ((*_1).2: stm32h7xx_hal::gpio::gpioa::PA11<stm32h7xx_hal::gpio::Output<stm32h7xx_hal::gpio::OpenDrain>>); // scope 0 at src\sdmmc.rs:49:9: 49:17
        _3 = const <stm32h7xx_hal::gpio::gpioa::PA11<stm32h7xx_hal::gpio::Output<stm32h7xx_hal::gpio::OpenDrain>> as stm32h7xx_hal::embedded_hal::digital::v2::OutputPin>::set_high(move _4) -> bb1; // scope 0 at src\sdmmc.rs:49:9: 49:28
                                         // ty::Const
                                         // + ty: for<'r> fn(&'r mut stm32h7xx_hal::gpio::gpioa::PA11<stm32h7xx_hal::gpio::Output<stm32h7xx_hal::gpio::OpenDrain>>) -> core::result::Result<(), <stm32h7xx_hal::gpio::gpioa::PA11<stm32h7xx_hal::gpio::Output<stm32h7xx_hal::gpio::OpenDrain>> as stm32h7xx_hal::embedded_hal::digital::v2::OutputPin>::Error> {<stm32h7xx_hal::gpio::gpioa::PA11<stm32h7xx_hal::gpio::Output<stm32h7xx_hal::gpio::OpenDrain>> as stm32h7xx_hal::embedded_hal::digital::v2::OutputPin>::set_high}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:49:18: 49:26
                                         // + literal: Const { ty: for<'r> fn(&'r mut stm32h7xx_hal::gpio::gpioa::PA11<stm32h7xx_hal::gpio::Output<stm32h7xx_hal::gpio::OpenDrain>>) -> core::result::Result<(), <stm32h7xx_hal::gpio::gpioa::PA11<stm32h7xx_hal::gpio::Output<stm32h7xx_hal::gpio::OpenDrain>> as stm32h7xx_hal::embedded_hal::digital::v2::OutputPin>::Error> {<stm32h7xx_hal::gpio::gpioa::PA11<stm32h7xx_hal::gpio::Output<stm32h7xx_hal::gpio::OpenDrain>> as stm32h7xx_hal::embedded_hal::digital::v2::OutputPin>::set_high}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_4);                 // scope 0 at src\sdmmc.rs:49:27: 49:28
        _2 = const core::result::Result::<(), stm32h7xx_hal::Never>::unwrap(move _3) -> bb2; // scope 0 at src\sdmmc.rs:49:9: 49:37
                                         // ty::Const
                                         // + ty: fn(core::result::Result<(), stm32h7xx_hal::Never>) {core::result::Result::<(), stm32h7xx_hal::Never>::unwrap}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:49:29: 49:35
                                         // + literal: Const { ty: fn(core::result::Result<(), stm32h7xx_hal::Never>) {core::result::Result::<(), stm32h7xx_hal::Never>::unwrap}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_3);                 // scope 0 at src\sdmmc.rs:49:36: 49:37
        StorageDead(_2);                 // scope 0 at src\sdmmc.rs:49:37: 49:38
        StorageLive(_5);                 // scope 0 at src\sdmmc.rs:50:12: 50:41
        StorageLive(_6);                 // scope 0 at src\sdmmc.rs:50:12: 50:32
        StorageLive(_7);                 // scope 0 at src\sdmmc.rs:50:12: 50:23
        _7 = &((*_1).1: stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>>); // scope 0 at src\sdmmc.rs:50:12: 50:23
        _6 = const <stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>> as stm32h7xx_hal::embedded_hal::digital::v2::InputPin>::is_low(move _7) -> bb3; // scope 0 at src\sdmmc.rs:50:12: 50:32
                                         // ty::Const
                                         // + ty: for<'r> fn(&'r stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>>) -> core::result::Result<bool, <stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>> as stm32h7xx_hal::embedded_hal::digital::v2::InputPin>::Error> {<stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>> as stm32h7xx_hal::embedded_hal::digital::v2::InputPin>::is_low}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:50:24: 50:30
                                         // + literal: Const { ty: for<'r> fn(&'r stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>>) -> core::result::Result<bool, <stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>> as stm32h7xx_hal::embedded_hal::digital::v2::InputPin>::Error> {<stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>> as stm32h7xx_hal::embedded_hal::digital::v2::InputPin>::is_low}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        StorageDead(_7);                 // scope 0 at src\sdmmc.rs:50:31: 50:32
        _5 = const core::result::Result::<bool, stm32h7xx_hal::Never>::unwrap(move _6) -> bb4; // scope 0 at src\sdmmc.rs:50:12: 50:41
                                         // ty::Const
                                         // + ty: fn(core::result::Result<bool, stm32h7xx_hal::Never>) -> bool {core::result::Result::<bool, stm32h7xx_hal::Never>::unwrap}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:50:33: 50:39
                                         // + literal: Const { ty: fn(core::result::Result<bool, stm32h7xx_hal::Never>) -> bool {core::result::Result::<bool, stm32h7xx_hal::Never>::unwrap}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_6);                 // scope 0 at src\sdmmc.rs:50:40: 50:41
        switchInt(_5) -> [false: bb5, otherwise: bb6]; // scope 0 at src\sdmmc.rs:50:9: 52:10
    }

    bb5: {
        StorageDead(_5);                 // scope 0 at src\sdmmc.rs:52:9: 52:10
        StorageLive(_8);                 // scope 0 at src\sdmmc.rs:53:9: 53:40
        StorageLive(_9);                 // scope 0 at src\sdmmc.rs:53:9: 53:39
        StorageLive(_10);                // scope 0 at src\sdmmc.rs:53:9: 53:19
        _10 = &mut ((*_1).0: stm32h7xx_hal::sdmmc::Sdmmc<stm32h7xx_hal::stm32::SDMMC1>); // scope 0 at src\sdmmc.rs:53:9: 53:19
        StorageLive(_11);                // scope 0 at src\sdmmc.rs:53:30: 53:38
        _11 = const <u32 as stm32h7xx_hal::prelude::_stm32h7xx_hal_time_U32Ext>::mhz(const 50_u32) -> bb8; // scope 0 at src\sdmmc.rs:53:30: 53:38
                                         // ty::Const
                                         // + ty: fn(u32) -> stm32h7xx_hal::time::MegaHertz {<u32 as stm32h7xx_hal::prelude::_stm32h7xx_hal_time_U32Ext>::mhz}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:53:33: 53:36
                                         // + literal: Const { ty: fn(u32) -> stm32h7xx_hal::time::MegaHertz {<u32 as stm32h7xx_hal::prelude::_stm32h7xx_hal_time_U32Ext>::mhz}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: u32
                                         // + val: Value(Scalar(0x00000032))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:53:30: 53:32
                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000032)) }
    }

    bb6: {
        _0 = const core::result::Result::<(), stm32h7xx_hal::sdmmc::Error>::Err(stm32h7xx_hal::sdmmc::Error::NoCard); // scope 0 at src\sdmmc.rs:51:20: 51:45
                                         // ty::Const
                                         // + ty: core::result::Result<(), stm32h7xx_hal::sdmmc::Error>
                                         // + val: Value(Scalar(0x07))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:51:20: 51:45
                                         // + literal: Const { ty: core::result::Result<(), stm32h7xx_hal::sdmmc::Error>, val: Value(Scalar(0x07)) }
        StorageDead(_5);                 // scope 0 at src\sdmmc.rs:52:9: 52:10
        goto -> bb7;                     // scope 0 at src\sdmmc.rs:51:13: 51:45
    }

    bb7: {
        return;                          // scope 0 at src\sdmmc.rs:59:6: 59:6
    }

    bb8: {
        _9 = const stm32h7xx_hal::sdmmc::Sdmmc::<stm32h7xx_hal::stm32::SDMMC1>::init_card::<stm32h7xx_hal::time::MegaHertz>(move _10, move _11) -> bb9; // scope 0 at src\sdmmc.rs:53:9: 53:39
                                         // ty::Const
                                         // + ty: for<'r> fn(&'r mut stm32h7xx_hal::sdmmc::Sdmmc<stm32h7xx_hal::stm32::SDMMC1>, stm32h7xx_hal::time::MegaHertz) -> core::result::Result<(), stm32h7xx_hal::sdmmc::Error> {stm32h7xx_hal::sdmmc::Sdmmc::<stm32h7xx_hal::stm32::SDMMC1>::init_card::<stm32h7xx_hal::time::MegaHertz>}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:53:20: 53:29
                                         // + literal: Const { ty: for<'r> fn(&'r mut stm32h7xx_hal::sdmmc::Sdmmc<stm32h7xx_hal::stm32::SDMMC1>, stm32h7xx_hal::time::MegaHertz) -> core::result::Result<(), stm32h7xx_hal::sdmmc::Error> {stm32h7xx_hal::sdmmc::Sdmmc::<stm32h7xx_hal::stm32::SDMMC1>::init_card::<stm32h7xx_hal::time::MegaHertz>}, val: Value(Scalar(<ZST>)) }
    }

    bb9: {
        StorageDead(_11);                // scope 0 at src\sdmmc.rs:53:38: 53:39
        StorageDead(_10);                // scope 0 at src\sdmmc.rs:53:38: 53:39
        _8 = const <core::result::Result<(), stm32h7xx_hal::sdmmc::Error> as core::ops::Try>::into_result(move _9) -> bb10; // scope 0 at src\sdmmc.rs:53:9: 53:40
                                         // ty::Const
                                         // + ty: fn(core::result::Result<(), stm32h7xx_hal::sdmmc::Error>) -> core::result::Result<<core::result::Result<(), stm32h7xx_hal::sdmmc::Error> as core::ops::Try>::Ok, <core::result::Result<(), stm32h7xx_hal::sdmmc::Error> as core::ops::Try>::Error> {<core::result::Result<(), stm32h7xx_hal::sdmmc::Error> as core::ops::Try>::into_result}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:53:9: 53:40
                                         // + literal: Const { ty: fn(core::result::Result<(), stm32h7xx_hal::sdmmc::Error>) -> core::result::Result<<core::result::Result<(), stm32h7xx_hal::sdmmc::Error> as core::ops::Try>::Ok, <core::result::Result<(), stm32h7xx_hal::sdmmc::Error> as core::ops::Try>::Error> {<core::result::Result<(), stm32h7xx_hal::sdmmc::Error> as core::ops::Try>::into_result}, val: Value(Scalar(<ZST>)) }
    }

    bb10: {
        StorageDead(_9);                 // scope 0 at src\sdmmc.rs:53:39: 53:40
        _12 = discriminant(_8);          // scope 0 at src\sdmmc.rs:53:39: 53:40
        switchInt(move _12) -> [0_isize: bb11, 1_isize: bb13, otherwise: bb12]; // scope 0 at src\sdmmc.rs:53:39: 53:40
    }

    bb11: {
        StorageLive(_16);                // scope 0 at src\sdmmc.rs:53:9: 53:40
        _16 = ((_8 as Ok).0: ());        // scope 0 at src\sdmmc.rs:53:9: 53:40
        StorageDead(_16);                // scope 0 at src\sdmmc.rs:53:39: 53:40
        StorageDead(_8);                 // scope 0 at src\sdmmc.rs:53:40: 53:41
        StorageLive(_17);                // scope 0 at src\sdmmc.rs:54:13: 54:22
        StorageLive(_18);                // scope 0 at src\sdmmc.rs:54:25: 54:43
        StorageLive(_19);                // scope 0 at src\sdmmc.rs:54:25: 54:42
        StorageLive(_20);                // scope 0 at src\sdmmc.rs:54:25: 54:35
        _20 = &((*_1).0: stm32h7xx_hal::sdmmc::Sdmmc<stm32h7xx_hal::stm32::SDMMC1>); // scope 0 at src\sdmmc.rs:54:25: 54:35
        _19 = const stm32h7xx_hal::sdmmc::Sdmmc::<stm32h7xx_hal::stm32::SDMMC1>::card(move _20) -> bb16; // scope 0 at src\sdmmc.rs:54:25: 54:42
                                         // ty::Const
                                         // + ty: for<'r> fn(&'r stm32h7xx_hal::sdmmc::Sdmmc<stm32h7xx_hal::stm32::SDMMC1>) -> core::result::Result<&'r stm32h7xx_hal::sdmmc::Card, stm32h7xx_hal::sdmmc::Error> {stm32h7xx_hal::sdmmc::Sdmmc::<stm32h7xx_hal::stm32::SDMMC1>::card}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:54:36: 54:40
                                         // + literal: Const { ty: for<'r> fn(&'r stm32h7xx_hal::sdmmc::Sdmmc<stm32h7xx_hal::stm32::SDMMC1>) -> core::result::Result<&'r stm32h7xx_hal::sdmmc::Card, stm32h7xx_hal::sdmmc::Error> {stm32h7xx_hal::sdmmc::Sdmmc::<stm32h7xx_hal::stm32::SDMMC1>::card}, val: Value(Scalar(<ZST>)) }
    }

    bb12: {
        unreachable;                     // scope 0 at src\sdmmc.rs:53:9: 53:40
    }

    bb13: {
        StorageLive(_13);                // scope 0 at src\sdmmc.rs:53:39: 53:40
        _13 = ((_8 as Err).0: stm32h7xx_hal::sdmmc::Error); // scope 0 at src\sdmmc.rs:53:39: 53:40
        StorageLive(_14);                // scope 2 at src\sdmmc.rs:53:39: 53:40
        StorageLive(_15);                // scope 2 at src\sdmmc.rs:53:39: 53:40
        _15 = _13;                       // scope 2 at src\sdmmc.rs:53:39: 53:40
        _14 = const <stm32h7xx_hal::sdmmc::Error as core::convert::From<stm32h7xx_hal::sdmmc::Error>>::from(move _15) -> bb14; // scope 2 at src\sdmmc.rs:53:39: 53:40
                                         // ty::Const
                                         // + ty: fn(stm32h7xx_hal::sdmmc::Error) -> stm32h7xx_hal::sdmmc::Error {<stm32h7xx_hal::sdmmc::Error as core::convert::From<stm32h7xx_hal::sdmmc::Error>>::from}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:53:39: 53:40
                                         // + literal: Const { ty: fn(stm32h7xx_hal::sdmmc::Error) -> stm32h7xx_hal::sdmmc::Error {<stm32h7xx_hal::sdmmc::Error as core::convert::From<stm32h7xx_hal::sdmmc::Error>>::from}, val: Value(Scalar(<ZST>)) }
    }

    bb14: {
        StorageDead(_15);                // scope 2 at src\sdmmc.rs:53:39: 53:40
        _0 = const <core::result::Result<(), stm32h7xx_hal::sdmmc::Error> as core::ops::Try>::from_error(move _14) -> bb15; // scope 2 at src\sdmmc.rs:53:39: 53:40
                                         // ty::Const
                                         // + ty: fn(<core::result::Result<(), stm32h7xx_hal::sdmmc::Error> as core::ops::Try>::Error) -> core::result::Result<(), stm32h7xx_hal::sdmmc::Error> {<core::result::Result<(), stm32h7xx_hal::sdmmc::Error> as core::ops::Try>::from_error}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:53:9: 53:40
                                         // + literal: Const { ty: fn(<core::result::Result<(), stm32h7xx_hal::sdmmc::Error> as core::ops::Try>::Error) -> core::result::Result<(), stm32h7xx_hal::sdmmc::Error> {<core::result::Result<(), stm32h7xx_hal::sdmmc::Error> as core::ops::Try>::from_error}, val: Value(Scalar(<ZST>)) }
    }

    bb15: {
        StorageDead(_14);                // scope 2 at src\sdmmc.rs:53:39: 53:40
        StorageDead(_13);                // scope 0 at src\sdmmc.rs:53:39: 53:40
        StorageDead(_8);                 // scope 0 at src\sdmmc.rs:53:40: 53:41
        goto -> bb7;                     // scope 0 at src\sdmmc.rs:53:39: 53:40
    }

    bb16: {
        StorageDead(_20);                // scope 0 at src\sdmmc.rs:54:41: 54:42
        _18 = const <core::result::Result<&stm32h7xx_hal::sdmmc::Card, stm32h7xx_hal::sdmmc::Error> as core::ops::Try>::into_result(move _19) -> bb17; // scope 0 at src\sdmmc.rs:54:25: 54:43
                                         // ty::Const
                                         // + ty: fn(core::result::Result<&stm32h7xx_hal::sdmmc::Card, stm32h7xx_hal::sdmmc::Error>) -> core::result::Result<<core::result::Result<&stm32h7xx_hal::sdmmc::Card, stm32h7xx_hal::sdmmc::Error> as core::ops::Try>::Ok, <core::result::Result<&stm32h7xx_hal::sdmmc::Card, stm32h7xx_hal::sdmmc::Error> as core::ops::Try>::Error> {<core::result::Result<&stm32h7xx_hal::sdmmc::Card, stm32h7xx_hal::sdmmc::Error> as core::ops::Try>::into_result}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:54:25: 54:43
                                         // + literal: Const { ty: fn(core::result::Result<&stm32h7xx_hal::sdmmc::Card, stm32h7xx_hal::sdmmc::Error>) -> core::result::Result<<core::result::Result<&stm32h7xx_hal::sdmmc::Card, stm32h7xx_hal::sdmmc::Error> as core::ops::Try>::Ok, <core::result::Result<&stm32h7xx_hal::sdmmc::Card, stm32h7xx_hal::sdmmc::Error> as core::ops::Try>::Error> {<core::result::Result<&stm32h7xx_hal::sdmmc::Card, stm32h7xx_hal::sdmmc::Error> as core::ops::Try>::into_result}, val: Value(Scalar(<ZST>)) }
    }

    bb17: {
        StorageDead(_19);                // scope 0 at src\sdmmc.rs:54:42: 54:43
        _21 = discriminant(_18);         // scope 0 at src\sdmmc.rs:54:42: 54:43
        switchInt(move _21) -> [0_isize: bb18, 1_isize: bb20, otherwise: bb19]; // scope 0 at src\sdmmc.rs:54:42: 54:43
    }

    bb18: {
        StorageLive(_25);                // scope 0 at src\sdmmc.rs:54:25: 54:43
        _25 = ((_18 as Ok).0: &stm32h7xx_hal::sdmmc::Card); // scope 0 at src\sdmmc.rs:54:25: 54:43
        _17 = _25;                       // scope 9 at src\sdmmc.rs:54:25: 54:43
        StorageDead(_25);                // scope 0 at src\sdmmc.rs:54:42: 54:43
        StorageDead(_18);                // scope 0 at src\sdmmc.rs:54:43: 54:44
        StorageLive(_26);                // scope 5 at src\sdmmc.rs:55:9: 55:36
        StorageLive(_27);                // scope 5 at src\sdmmc.rs:55:9: 55:27
        StorageLive(_28);                // scope 5 at src\sdmmc.rs:55:9: 55:17
        _28 = &mut ((*_1).2: stm32h7xx_hal::gpio::gpioa::PA11<stm32h7xx_hal::gpio::Output<stm32h7xx_hal::gpio::OpenDrain>>); // scope 5 at src\sdmmc.rs:55:9: 55:17
        _27 = const <stm32h7xx_hal::gpio::gpioa::PA11<stm32h7xx_hal::gpio::Output<stm32h7xx_hal::gpio::OpenDrain>> as stm32h7xx_hal::embedded_hal::digital::v2::OutputPin>::set_low(move _28) -> bb23; // scope 5 at src\sdmmc.rs:55:9: 55:27
                                         // ty::Const
                                         // + ty: for<'r> fn(&'r mut stm32h7xx_hal::gpio::gpioa::PA11<stm32h7xx_hal::gpio::Output<stm32h7xx_hal::gpio::OpenDrain>>) -> core::result::Result<(), <stm32h7xx_hal::gpio::gpioa::PA11<stm32h7xx_hal::gpio::Output<stm32h7xx_hal::gpio::OpenDrain>> as stm32h7xx_hal::embedded_hal::digital::v2::OutputPin>::Error> {<stm32h7xx_hal::gpio::gpioa::PA11<stm32h7xx_hal::gpio::Output<stm32h7xx_hal::gpio::OpenDrain>> as stm32h7xx_hal::embedded_hal::digital::v2::OutputPin>::set_low}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:55:18: 55:25
                                         // + literal: Const { ty: for<'r> fn(&'r mut stm32h7xx_hal::gpio::gpioa::PA11<stm32h7xx_hal::gpio::Output<stm32h7xx_hal::gpio::OpenDrain>>) -> core::result::Result<(), <stm32h7xx_hal::gpio::gpioa::PA11<stm32h7xx_hal::gpio::Output<stm32h7xx_hal::gpio::OpenDrain>> as stm32h7xx_hal::embedded_hal::digital::v2::OutputPin>::Error> {<stm32h7xx_hal::gpio::gpioa::PA11<stm32h7xx_hal::gpio::Output<stm32h7xx_hal::gpio::OpenDrain>> as stm32h7xx_hal::embedded_hal::digital::v2::OutputPin>::set_low}, val: Value(Scalar(<ZST>)) }
    }

    bb19: {
        unreachable;                     // scope 0 at src\sdmmc.rs:54:25: 54:43
    }

    bb20: {
        StorageLive(_22);                // scope 0 at src\sdmmc.rs:54:42: 54:43
        _22 = ((_18 as Err).0: stm32h7xx_hal::sdmmc::Error); // scope 0 at src\sdmmc.rs:54:42: 54:43
        StorageLive(_23);                // scope 7 at src\sdmmc.rs:54:42: 54:43
        StorageLive(_24);                // scope 7 at src\sdmmc.rs:54:42: 54:43
        _24 = _22;                       // scope 7 at src\sdmmc.rs:54:42: 54:43
        _23 = const <stm32h7xx_hal::sdmmc::Error as core::convert::From<stm32h7xx_hal::sdmmc::Error>>::from(move _24) -> bb21; // scope 7 at src\sdmmc.rs:54:42: 54:43
                                         // ty::Const
                                         // + ty: fn(stm32h7xx_hal::sdmmc::Error) -> stm32h7xx_hal::sdmmc::Error {<stm32h7xx_hal::sdmmc::Error as core::convert::From<stm32h7xx_hal::sdmmc::Error>>::from}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:54:42: 54:43
                                         // + literal: Const { ty: fn(stm32h7xx_hal::sdmmc::Error) -> stm32h7xx_hal::sdmmc::Error {<stm32h7xx_hal::sdmmc::Error as core::convert::From<stm32h7xx_hal::sdmmc::Error>>::from}, val: Value(Scalar(<ZST>)) }
    }

    bb21: {
        StorageDead(_24);                // scope 7 at src\sdmmc.rs:54:42: 54:43
        _0 = const <core::result::Result<(), stm32h7xx_hal::sdmmc::Error> as core::ops::Try>::from_error(move _23) -> bb22; // scope 7 at src\sdmmc.rs:54:42: 54:43
                                         // ty::Const
                                         // + ty: fn(<core::result::Result<(), stm32h7xx_hal::sdmmc::Error> as core::ops::Try>::Error) -> core::result::Result<(), stm32h7xx_hal::sdmmc::Error> {<core::result::Result<(), stm32h7xx_hal::sdmmc::Error> as core::ops::Try>::from_error}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:54:25: 54:43
                                         // + literal: Const { ty: fn(<core::result::Result<(), stm32h7xx_hal::sdmmc::Error> as core::ops::Try>::Error) -> core::result::Result<(), stm32h7xx_hal::sdmmc::Error> {<core::result::Result<(), stm32h7xx_hal::sdmmc::Error> as core::ops::Try>::from_error}, val: Value(Scalar(<ZST>)) }
    }

    bb22: {
        StorageDead(_23);                // scope 7 at src\sdmmc.rs:54:42: 54:43
        StorageDead(_22);                // scope 0 at src\sdmmc.rs:54:42: 54:43
        StorageDead(_18);                // scope 0 at src\sdmmc.rs:54:43: 54:44
        StorageDead(_17);                // scope 0 at src\sdmmc.rs:59:5: 59:6
        goto -> bb7;                     // scope 0 at src\sdmmc.rs:54:42: 54:43
    }

    bb23: {
        StorageDead(_28);                // scope 5 at src\sdmmc.rs:55:26: 55:27
        _26 = const core::result::Result::<(), stm32h7xx_hal::Never>::unwrap(move _27) -> bb24; // scope 5 at src\sdmmc.rs:55:9: 55:36
                                         // ty::Const
                                         // + ty: fn(core::result::Result<(), stm32h7xx_hal::Never>) {core::result::Result::<(), stm32h7xx_hal::Never>::unwrap}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:55:28: 55:34
                                         // + literal: Const { ty: fn(core::result::Result<(), stm32h7xx_hal::Never>) {core::result::Result::<(), stm32h7xx_hal::Never>::unwrap}, val: Value(Scalar(<ZST>)) }
    }

    bb24: {
        StorageDead(_27);                // scope 5 at src\sdmmc.rs:55:35: 55:36
        StorageDead(_26);                // scope 5 at src\sdmmc.rs:55:36: 55:37
        StorageLive(_29);                // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:45:13: 45:16
        _29 = const log::Level::Info;    // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:127:14: 127:33
                                         // ty::Const
                                         // + ty: log::Level
                                         // + val: Value(Scalar(0x00000003))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:127:14: 127:33
                                         // + literal: Const { ty: log::Level, val: Value(Scalar(0x00000003)) }
        StorageLive(_30);                // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:12: 46:73
        StorageLive(_31);                // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:12: 46:43
        StorageLive(_32);                // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:12: 46:15
        _32 = &_29;                      // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:12: 46:15
        StorageLive(_33);                // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:19: 46:43
        _58 = const sdmmc::Sdmmc::init_card::promoted[2]; // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:19: 46:43
                                         // ty::Const
                                         // + ty: &log::LevelFilter
                                         // + val: Unevaluated(DefId(0:42 ~ miscomp_repro[978e]::sdmmc[0]::{{impl}}[0]::init_card[0]), [], Some(promoted[2]))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:19: 46:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(DefId(0:42 ~ miscomp_repro[978e]::sdmmc[0]::{{impl}}[0]::init_card[0]), [], Some(promoted[2])) }
        _33 = _58;                       // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:19: 46:43
        _31 = const <log::Level as core::cmp::PartialOrd<log::LevelFilter>>::le(move _32, move _33) -> bb29; // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:12: 46:43
                                         // ty::Const
                                         // + ty: for<'r, 's> fn(&'r log::Level, &'s log::LevelFilter) -> bool {<log::Level as core::cmp::PartialOrd<log::LevelFilter>>::le}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:12: 46:43
                                         // + literal: Const { ty: for<'r, 's> fn(&'r log::Level, &'s log::LevelFilter) -> bool {<log::Level as core::cmp::PartialOrd<log::LevelFilter>>::le}, val: Value(Scalar(<ZST>)) }
    }

    bb25: {
        _30 = const true;                // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:12: 46:73
                                         // ty::Const
                                         // + ty: bool
                                         // + val: Value(Scalar(0x01))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:12: 46:73
                                         // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }
        goto -> bb28;                    // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:12: 46:73
    }

    bb26: {
        _30 = const false;               // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:12: 46:73
                                         // ty::Const
                                         // + ty: bool
                                         // + val: Value(Scalar(0x00))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:12: 46:73
                                         // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }
        goto -> bb28;                    // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:12: 46:73
    }

    bb27: {
        StorageLive(_34);                // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:47: 46:73
        StorageLive(_35);                // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:47: 46:50
        _35 = &_29;                      // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:47: 46:50
        StorageLive(_36);                // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:54: 46:73
        StorageLive(_37);                // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:54: 46:73
        _37 = const log::max_level() -> bb30; // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:54: 46:73
                                         // ty::Const
                                         // + ty: fn() -> log::LevelFilter {log::max_level}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:54: 46:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(Scalar(<ZST>)) }
    }

    bb28: {
        StorageDead(_34);                // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:72: 46:73
        StorageDead(_31);                // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:72: 46:73
        switchInt(_30) -> [false: bb32, otherwise: bb33]; // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:9: 52:10
    }

    bb29: {
        StorageDead(_33);                // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:42: 46:43
        StorageDead(_32);                // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:42: 46:43
        switchInt(move _31) -> [false: bb26, otherwise: bb27]; // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:12: 46:73
    }

    bb30: {
        _36 = &_37;                      // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:54: 46:73
        _34 = const <log::Level as core::cmp::PartialOrd<log::LevelFilter>>::le(move _35, move _36) -> bb31; // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:47: 46:73
                                         // ty::Const
                                         // + ty: for<'r, 's> fn(&'r log::Level, &'s log::LevelFilter) -> bool {<log::Level as core::cmp::PartialOrd<log::LevelFilter>>::le}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:47: 46:73
                                         // + literal: Const { ty: for<'r, 's> fn(&'r log::Level, &'s log::LevelFilter) -> bool {<log::Level as core::cmp::PartialOrd<log::LevelFilter>>::le}, val: Value(Scalar(<ZST>)) }
    }

    bb31: {
        StorageDead(_37);                // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:72: 46:73
        StorageDead(_36);                // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:72: 46:73
        StorageDead(_35);                // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:72: 46:73
        switchInt(move _34) -> [false: bb26, otherwise: bb25]; // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:12: 46:73
    }

    bb32: {
        goto -> bb37;                    // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:9: 52:10
    }

    bb33: {
        StorageLive(_38);                // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:47:13: 51:14
        StorageLive(_39);                // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        StorageLive(_40);                // scope 10 at src\sdmmc.rs:56:15: 56:45
        StorageLive(_41);                // scope 10 at src\sdmmc.rs:56:15: 56:45
        StorageLive(_42);                // scope 10 at src\sdmmc.rs:56:15: 56:45
        _57 = const sdmmc::Sdmmc::init_card::promoted[1]; // scope 10 at src\sdmmc.rs:56:15: 56:45
                                         // ty::Const
                                         // + ty: &[&str; 1]
                                         // + val: Unevaluated(DefId(0:42 ~ miscomp_repro[978e]::sdmmc[0]::{{impl}}[0]::init_card[0]), [], Some(promoted[1]))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:56:15: 56:45
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(DefId(0:42 ~ miscomp_repro[978e]::sdmmc[0]::{{impl}}[0]::init_card[0]), [], Some(promoted[1])) }
        _42 = _57;                       // scope 10 at src\sdmmc.rs:56:15: 56:45
        _41 = _42;                       // scope 10 at src\sdmmc.rs:56:15: 56:45
        _40 = move _41 as &[&str] (Pointer(Unsize)); // scope 10 at src\sdmmc.rs:56:15: 56:45
        StorageDead(_41);                // scope 10 at src\sdmmc.rs:56:44: 56:45
        StorageLive(_43);                // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        StorageLive(_44);                // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        StorageLive(_45);                // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        StorageLive(_46);                // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        StorageLive(_47);                // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        StorageLive(_48);                // scope 10 at src\sdmmc.rs:56:47: 56:56
        _48 = &_17;                      // scope 10 at src\sdmmc.rs:56:47: 56:56
        (_47.0: &&stm32h7xx_hal::sdmmc::Card) = move _48; // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        StorageDead(_48);                // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:31: 236:32
        StorageLive(_49);                // scope 10 at src\sdmmc.rs:56:47: 56:56
        _49 = (_47.0: &&stm32h7xx_hal::sdmmc::Card); // scope 10 at src\sdmmc.rs:56:47: 56:56
        StorageLive(_50);                // scope 11 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        StorageLive(_51);                // scope 11 at src\sdmmc.rs:56:47: 56:56
        _51 = _49;                       // scope 11 at src\sdmmc.rs:56:47: 56:56
        StorageLive(_52);                // scope 11 at src\sdmmc.rs:56:47: 56:56
        _52 = const <&stm32h7xx_hal::sdmmc::Card as core::fmt::Debug>::fmt as for<'r, 's, 't0> fn(&'r &stm32h7xx_hal::sdmmc::Card, &'s mut core::fmt::Formatter<'t0>) -> core::result::Result<(), core::fmt::Error> (Pointer(ReifyFnPointer)); // scope 11 at src\sdmmc.rs:56:47: 56:56
                                         // ty::Const
                                         // + ty: for<'r, 's, 't0> fn(&'r &stm32h7xx_hal::sdmmc::Card, &'s mut core::fmt::Formatter<'t0>) -> core::result::Result<(), core::fmt::Error> {<&stm32h7xx_hal::sdmmc::Card as core::fmt::Debug>::fmt}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:56:47: 56:56
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &stm32h7xx_hal::sdmmc::Card, &'s mut core::fmt::Formatter<'t0>) -> core::result::Result<(), core::fmt::Error> {<&stm32h7xx_hal::sdmmc::Card as core::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }
        _50 = const core::fmt::ArgumentV1::new::<&stm32h7xx_hal::sdmmc::Card>(move _51, move _52) -> bb34; // scope 11 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
                                         // ty::Const
                                         // + ty: for<'b> fn(&'b &stm32h7xx_hal::sdmmc::Card, for<'r, 's, 't0> fn(&'r &stm32h7xx_hal::sdmmc::Card, &'s mut core::fmt::Formatter<'t0>) -> core::result::Result<(), core::fmt::Error>) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::new::<&stm32h7xx_hal::sdmmc::Card>}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b &stm32h7xx_hal::sdmmc::Card, for<'r, 's, 't0> fn(&'r &stm32h7xx_hal::sdmmc::Card, &'s mut core::fmt::Formatter<'t0>) -> core::result::Result<(), core::fmt::Error>) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::new::<&stm32h7xx_hal::sdmmc::Card>}, val: Value(Scalar(<ZST>)) }
    }

    bb34: {
        StorageDead(_52);                // scope 11 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:31: 236:32
        StorageDead(_51);                // scope 11 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:31: 236:32
        _46 = [move _50];                // scope 11 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        StorageDead(_50);                // scope 11 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:31: 236:32
        StorageDead(_49);                // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:31: 236:32
        _45 = &_46;                      // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        _44 = _45;                       // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        _43 = move _44 as &[core::fmt::ArgumentV1] (Pointer(Unsize)); // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        StorageDead(_44);                // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:31: 236:32
        _39 = const core::fmt::Arguments::new_v1(move _40, move _43) -> bb35; // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
                                         // ty::Const
                                         // + ty: fn(&[&str], &[core::fmt::ArgumentV1]) -> core::fmt::Arguments {core::fmt::Arguments::new_v1}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&str], &[core::fmt::ArgumentV1]) -> core::fmt::Arguments {core::fmt::Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
    }

    bb35: {
        StorageDead(_43);                // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:31: 236:32
        StorageDead(_40);                // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:31: 236:32
        StorageLive(_53);                // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:49:17: 49:20
        _53 = _29;                       // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:49:17: 49:20
        StorageLive(_54);                // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:50:17: 50:79
        StorageLive(_55);                // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:50:17: 50:79
        _56 = const sdmmc::Sdmmc::init_card::promoted[0]; // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:50:17: 50:79
                                         // ty::Const
                                         // + ty: &(&str, &str, &str, u32)
                                         // + val: Unevaluated(DefId(0:42 ~ miscomp_repro[978e]::sdmmc[0]::{{impl}}[0]::init_card[0]), [], Some(promoted[0]))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:50:17: 50:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(DefId(0:42 ~ miscomp_repro[978e]::sdmmc[0]::{{impl}}[0]::init_card[0]), [], Some(promoted[0])) }
        _55 = _56;                       // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:50:17: 50:79
        _54 = _55;                       // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:50:17: 50:79
        _38 = const log::__private_api_log(move _39, move _53, move _54) -> bb36; // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:47:13: 51:14
                                         // ty::Const
                                         // + ty: for<'r, 's, 't0> fn(core::fmt::Arguments<'r>, log::Level, &'s (&'t0 str, &'static str, &'static str, u32)) {log::__private_api_log}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:47:13: 47:38
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(core::fmt::Arguments<'r>, log::Level, &'s (&'t0 str, &'static str, &'static str, u32)) {log::__private_api_log}, val: Value(Scalar(<ZST>)) }
    }

    bb36: {
        StorageDead(_54);                // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:51:13: 51:14
        StorageDead(_53);                // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:51:13: 51:14
        StorageDead(_39);                // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:51:13: 51:14
        StorageDead(_55);                // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:51:14: 51:15
        StorageDead(_47);                // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:51:14: 51:15
        StorageDead(_46);                // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:51:14: 51:15
        StorageDead(_45);                // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:51:14: 51:15
        StorageDead(_42);                // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:51:14: 51:15
        StorageDead(_38);                // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:51:14: 51:15
        goto -> bb37;                    // scope 10 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:9: 52:10
    }

    bb37: {
        StorageDead(_29);                // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:53:5: 53:6
        StorageDead(_30);                // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:53:5: 53:6
        _0 = const core::result::Result::<(), stm32h7xx_hal::sdmmc::Error>::Ok(()); // scope 5 at src\sdmmc.rs:58:9: 58:15
                                         // ty::Const
                                         // + ty: core::result::Result<(), stm32h7xx_hal::sdmmc::Error>
                                         // + val: Value(Scalar(0x0a))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:58:9: 58:15
                                         // + literal: Const { ty: core::result::Result<(), stm32h7xx_hal::sdmmc::Error>, val: Value(Scalar(0x0a)) }
        StorageDead(_17);                // scope 0 at src\sdmmc.rs:59:5: 59:6
        goto -> bb7;                     // scope 0 at src\sdmmc.rs:59:6: 59:6
    }
}

promoted[0] in sdmmc::<impl at src\sdmmc.rs:11:1: 70:2>::init_card: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:50:17: 50:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:50:18: 50:79
    let mut _2: &str;                    // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:244:9: 244:23
    let mut _3: &str;                    // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:244:9: 244:23
    scope 1 {
        scope 2 {
        }
    }
    scope 3 {
        scope 4 {
        }
    }
    scope 5 {
        scope 10 {
            scope 11 {
            }
        }
    }
    scope 6 {
        scope 7 {
        }
    }
    scope 8 {
        scope 9 {
        }
    }

    bb0: {
        _3 = const "miscomp_repro::sdmmc"; // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:244:9: 244:23
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [109, 105, 115, 99, 111, 109, 112, 95, 114, 101, 112, 114, 111, 58, 58, 115, 100, 109, 109, 99], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1048575], len: Size { raw: 20 } }, size: Size { raw: 20 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 20 })
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:244:9: 244:23
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [109, 105, 115, 99, 111, 109, 112, 95, 114, 101, 112, 114, 111, 58, 58, 115, 100, 109, 109, 99], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1048575], len: Size { raw: 20 } }, size: Size { raw: 20 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 20 }) }
        _2 = _3;                         // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:244:9: 244:23
        (_1.0: &str) = move _2;          // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:50:18: 50:79
        (_1.1: &str) = const "miscomp_repro::sdmmc"; // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:50:18: 50:79
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [109, 105, 115, 99, 111, 109, 112, 95, 114, 101, 112, 114, 111, 58, 58, 115, 100, 109, 109, 99], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1048575], len: Size { raw: 20 } }, size: Size { raw: 20 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 20 })
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:244:9: 244:23
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [109, 105, 115, 99, 111, 109, 112, 95, 114, 101, 112, 114, 111, 58, 58, 115, 100, 109, 109, 99], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1048575], len: Size { raw: 20 } }, size: Size { raw: 20 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 20 }) }
        (_1.2: &str) = const "src\\sdmmc.rs"; // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:50:18: 50:79
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [115, 114, 99, 92, 115, 100, 109, 109, 99, 46, 114, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [4095], len: Size { raw: 12 } }, size: Size { raw: 12 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 12 })
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:56:9: 56:58
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [115, 114, 99, 92, 115, 100, 109, 109, 99, 46, 114, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [4095], len: Size { raw: 12 } }, size: Size { raw: 12 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 12 }) }
        (_1.3: u32) = const 56_u32;      // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:50:18: 50:79
                                         // ty::Const
                                         // + ty: u32
                                         // + val: Value(Scalar(0x00000038))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:56:9: 56:58
                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000038)) }
        _0 = &_1;                        // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:50:17: 50:79
        return;                          // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:50:17: 50:79
    }
}

promoted[1] in sdmmc::<impl at src\sdmmc.rs:11:1: 70:2>::init_card: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at src\sdmmc.rs:56:15: 56:45
    let mut _1: [&str; 1];               // in scope 0 at src\sdmmc.rs:56:15: 56:45
    let mut _2: &str;                    // in scope 0 at src\sdmmc.rs:56:15: 56:45
    let mut _3: &str;                    // in scope 0 at src\sdmmc.rs:56:15: 56:45
    scope 1 {
        scope 2 {
        }
    }
    scope 3 {
        scope 4 {
        }
    }
    scope 5 {
        scope 10 {
            scope 11 {
            }
        }
    }
    scope 6 {
        scope 7 {
        }
    }
    scope 8 {
        scope 9 {
        }
    }

    bb0: {
        _3 = const "MicroSD Card connected: "; // scope 0 at src\sdmmc.rs:56:15: 56:45
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [77, 105, 99, 114, 111, 83, 68, 32, 67, 97, 114, 100, 32, 99, 111, 110, 110, 101, 99, 116, 101, 100, 58, 32], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [16777215], len: Size { raw: 24 } }, size: Size { raw: 24 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 24 })
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:56:15: 56:45
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [77, 105, 99, 114, 111, 83, 68, 32, 67, 97, 114, 100, 32, 99, 111, 110, 110, 101, 99, 116, 101, 100, 58, 32], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [16777215], len: Size { raw: 24 } }, size: Size { raw: 24 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 24 }) }
        _2 = _3;                         // scope 0 at src\sdmmc.rs:56:15: 56:45
        _1 = [move _2];                  // scope 0 at src\sdmmc.rs:56:15: 56:45
        _0 = &_1;                        // scope 0 at src\sdmmc.rs:56:15: 56:45
        return;                          // scope 0 at src\sdmmc.rs:56:15: 56:45
    }
}

promoted[2] in sdmmc::<impl at src\sdmmc.rs:11:1: 70:2>::init_card: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:19: 46:43
    let mut _1: log::LevelFilter;        // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:19: 46:43
    scope 1 {
        scope 2 {
        }
    }
    scope 3 {
        scope 4 {
        }
    }
    scope 5 {
        scope 10 {
            scope 11 {
            }
        }
    }
    scope 6 {
        scope 7 {
        }
    }
    scope 8 {
        scope 9 {
        }
    }

    bb0: {
        _1 = const log::STATIC_MAX_LEVEL; // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:19: 46:43
                                         // ty::Const
                                         // + ty: log::LevelFilter
                                         // + val: Unevaluated(DefId(18:171 ~ log[9998]::STATIC_MAX_LEVEL[0]), [], None)
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:19: 46:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(DefId(18:171 ~ log[9998]::STATIC_MAX_LEVEL[0]), [], None) }
        _0 = &_1;                        // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:19: 46:43
        return;                          // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:19: 46:43
    }
}

static mut logger::init::_RTT_CHANNEL_BUFFER: core::mem::MaybeUninit<[u8; 1024]> = {
    let mut _0: core::mem::MaybeUninit<[u8; 1024]>; // return place in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:33:45: 33:69

    bb0: {
        _0 = const core::mem::MaybeUninit::<[u8; 1024]>::uninit() -> bb1; // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:33:72: 33:93
                                         // ty::Const
                                         // + ty: fn() -> core::mem::MaybeUninit<[u8; 1024]> {core::mem::MaybeUninit::<[u8; 1024]>::uninit}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:33:72: 33:91
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> core::mem::MaybeUninit<[u8; 1024]> {core::mem::MaybeUninit::<[u8; 1024]>::uninit}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:33:13: 33:94
    }
}

logger::init::RttControlBlock::up_channels::{{constant}}#0: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:130:66: 130:75
    let mut _1: (usize, bool);           // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:130:66: 130:75

    bb0: {
        _1 = CheckedAdd(const 1_usize, const 0_usize); // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:130:66: 130:75
                                         // ty::Const
                                         // + ty: usize
                                         // + val: Value(Scalar(0x00000001))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:130:66: 130:67
                                         // + literal: Const { ty: usize, val: Value(Scalar(0x00000001)) }
                                         // ty::Const
                                         // + ty: usize
                                         // + val: Value(Scalar(0x00000000))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:130:74: 130:75
                                         // + literal: Const { ty: usize, val: Value(Scalar(0x00000000)) }
        assert(!move (_1.1: bool), "attempt to compute `{} + {}` which would overflow", const 1_usize, const 0_usize) -> bb1; // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:130:66: 130:75
                                         // ty::Const
                                         // + ty: usize
                                         // + val: Value(Scalar(0x00000001))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:130:66: 130:67
                                         // + literal: Const { ty: usize, val: Value(Scalar(0x00000001)) }
                                         // ty::Const
                                         // + ty: usize
                                         // + val: Value(Scalar(0x00000000))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:130:74: 130:75
                                         // + literal: Const { ty: usize, val: Value(Scalar(0x00000000)) }
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:130:66: 130:75
        return;                          // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:130:66: 130:75
    }
}

static mut logger::init::CONTROL_BLOCK: core::mem::MaybeUninit<logger::init::RttControlBlock> = {
    let mut _0: core::mem::MaybeUninit<logger::init::RttControlBlock>; // return place in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:137:39: 137:67

    bb0: {
        _0 = const core::mem::MaybeUninit::<logger::init::RttControlBlock>::uninit() -> bb1; // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:137:70: 137:91
                                         // ty::Const
                                         // + ty: fn() -> core::mem::MaybeUninit<logger::init::RttControlBlock> {core::mem::MaybeUninit::<logger::init::RttControlBlock>::uninit}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:137:70: 137:89
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> core::mem::MaybeUninit<logger::init::RttControlBlock> {core::mem::MaybeUninit::<logger::init::RttControlBlock>::uninit}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\init.rs:137:9: 137:92
    }
}

static SDMMC: cortex_m::interrupt::Mutex<core::cell::RefCell<core::option::Option<sdmmc::Sdmmc>>> = {
    let mut _0: cortex_m::interrupt::Mutex<core::cell::RefCell<core::option::Option<sdmmc::Sdmmc>>>; // return place in scope 0 at src\main.rs:17:15: 17:51
    let mut _1: core::cell::RefCell<core::option::Option<sdmmc::Sdmmc>>; // in scope 0 at src\main.rs:17:65: 17:83
    let mut _2: core::option::Option<sdmmc::Sdmmc>; // in scope 0 at src\main.rs:17:78: 17:82

    bb0: {
        StorageLive(_1);                 // scope 0 at src\main.rs:17:65: 17:83
        StorageLive(_2);                 // scope 0 at src\main.rs:17:78: 17:82
        discriminant(_2) = 0;            // scope 0 at src\main.rs:17:78: 17:82
        _1 = const core::cell::RefCell::<core::option::Option<sdmmc::Sdmmc>>::new(move _2) -> bb1; // scope 0 at src\main.rs:17:65: 17:83
                                         // ty::Const
                                         // + ty: fn(core::option::Option<sdmmc::Sdmmc>) -> core::cell::RefCell<core::option::Option<sdmmc::Sdmmc>> {core::cell::RefCell::<core::option::Option<sdmmc::Sdmmc>>::new}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:17:65: 17:77
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(core::option::Option<sdmmc::Sdmmc>) -> core::cell::RefCell<core::option::Option<sdmmc::Sdmmc>> {core::cell::RefCell::<core::option::Option<sdmmc::Sdmmc>>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = const cortex_m::interrupt::Mutex::<core::cell::RefCell<core::option::Option<sdmmc::Sdmmc>>>::new(move _1) -> bb2; // scope 0 at src\main.rs:17:54: 17:84
                                         // ty::Const
                                         // + ty: fn(core::cell::RefCell<core::option::Option<sdmmc::Sdmmc>>) -> cortex_m::interrupt::Mutex<core::cell::RefCell<core::option::Option<sdmmc::Sdmmc>>> {cortex_m::interrupt::Mutex::<core::cell::RefCell<core::option::Option<sdmmc::Sdmmc>>>::new}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:17:54: 17:64
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::cell::RefCell<core::option::Option<sdmmc::Sdmmc>>) -> cortex_m::interrupt::Mutex<core::cell::RefCell<core::option::Option<sdmmc::Sdmmc>>> {cortex_m::interrupt::Mutex::<core::cell::RefCell<core::option::Option<sdmmc::Sdmmc>>>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at src\main.rs:17:1: 17:85
    }
}

fn logger::<impl at src\logger.rs:19:1: 30:2>::log(_1: &logger::Logger, _2: &log::Record) -> () {
    debug self => _1;                    // in scope 0 at src\logger.rs:25:12: 25:17
    debug record => _2;                  // in scope 0 at src\logger.rs:25:19: 25:25
    let mut _0: ();                      // return place in scope 0 at src\logger.rs:25:36: 25:36
    let _3: ();                          // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:9: 167:86
    let mut _4: core::fmt::Arguments;    // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:42: 167:85
    let mut _5: &[&str];                 // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:55: 167:74
    let mut _6: &[&str; 3];              // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:55: 167:74
    let _7: &[&str; 3];                  // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:55: 167:74
    let mut _8: &[core::fmt::ArgumentV1]; // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:42: 167:85
    let mut _9: &[core::fmt::ArgumentV1; 2]; // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:42: 167:85
    let _10: &[core::fmt::ArgumentV1; 2]; // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:42: 167:85
    let _11: [core::fmt::ArgumentV1; 2]; // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:42: 167:85
    let mut _12: (&log::Level, &&core::fmt::Arguments); // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:42: 167:85
    let mut _13: &log::Level;            // in scope 0 at src\logger.rs:26:30: 26:44
    let _14: log::Level;                 // in scope 0 at src\logger.rs:26:30: 26:44
    let mut _15: &log::Record;           // in scope 0 at src\logger.rs:26:30: 26:36
    let mut _16: &&core::fmt::Arguments; // in scope 0 at src\logger.rs:26:46: 26:59
    let _17: &core::fmt::Arguments;      // in scope 0 at src\logger.rs:26:46: 26:59
    let mut _18: &log::Record;           // in scope 0 at src\logger.rs:26:46: 26:52
    let _19: &log::Level;                // in scope 0 at src\logger.rs:26:30: 26:44
    let _20: &&core::fmt::Arguments;     // in scope 0 at src\logger.rs:26:46: 26:59
    let mut _21: core::fmt::ArgumentV1;  // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:42: 167:85
    let mut _22: &log::Level;            // in scope 0 at src\logger.rs:26:30: 26:44
    let mut _23: for<'r, 's, 't0> fn(&'r log::Level, &'s mut core::fmt::Formatter<'t0>) -> core::result::Result<(), core::fmt::Error>; // in scope 0 at src\logger.rs:26:30: 26:44
    let mut _24: core::fmt::ArgumentV1;  // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:42: 167:85
    let mut _25: &&core::fmt::Arguments; // in scope 0 at src\logger.rs:26:46: 26:59
    let mut _26: for<'r, 's, 't0> fn(&'r &core::fmt::Arguments, &'s mut core::fmt::Formatter<'t0>) -> core::result::Result<(), core::fmt::Error>; // in scope 0 at src\logger.rs:26:46: 26:59
    let mut _27: &[&str; 3];             // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:55: 167:74
    scope 1 {
        debug arg0 => _19;               // in scope 1 at src\logger.rs:26:30: 26:44
        debug arg1 => _20;               // in scope 1 at src\logger.rs:26:46: 26:59
    }

    bb0: {
        StorageLive(_3);                 // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:9: 167:86
        StorageLive(_4);                 // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:42: 167:85
        StorageLive(_5);                 // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:55: 167:74
        StorageLive(_6);                 // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:55: 167:74
        StorageLive(_7);                 // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:55: 167:74
        _27 = const <logger::Logger as log::Log>::log::promoted[0]; // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:55: 167:74
                                         // ty::Const
                                         // + ty: &[&str; 3]
                                         // + val: Unevaluated(DefId(0:21 ~ miscomp_repro[978e]::logger[0]::{{impl}}[0]::log[0]), [], Some(promoted[0]))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:55: 167:74
                                         // + literal: Const { ty: &[&str; 3], val: Unevaluated(DefId(0:21 ~ miscomp_repro[978e]::logger[0]::{{impl}}[0]::log[0]), [], Some(promoted[0])) }
        _7 = _27;                        // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:55: 167:74
        _6 = _7;                         // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:55: 167:74
        _5 = move _6 as &[&str] (Pointer(Unsize)); // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:55: 167:74
        StorageDead(_6);                 // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:73: 167:74
        StorageLive(_8);                 // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:42: 167:85
        StorageLive(_9);                 // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:42: 167:85
        StorageLive(_10);                // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:42: 167:85
        StorageLive(_11);                // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:42: 167:85
        StorageLive(_12);                // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:42: 167:85
        StorageLive(_13);                // scope 0 at src\logger.rs:26:30: 26:44
        StorageLive(_14);                // scope 0 at src\logger.rs:26:30: 26:44
        StorageLive(_15);                // scope 0 at src\logger.rs:26:30: 26:36
        _15 = _2;                        // scope 0 at src\logger.rs:26:30: 26:36
        _14 = const log::Record::level(move _15) -> bb1; // scope 0 at src\logger.rs:26:30: 26:44
                                         // ty::Const
                                         // + ty: for<'r> fn(&'r log::Record) -> log::Level {log::Record::level}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\logger.rs:26:37: 26:42
                                         // + literal: Const { ty: for<'r> fn(&'r log::Record) -> log::Level {log::Record::level}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_15);                // scope 0 at src\logger.rs:26:43: 26:44
        _13 = &_14;                      // scope 0 at src\logger.rs:26:30: 26:44
        StorageLive(_16);                // scope 0 at src\logger.rs:26:46: 26:59
        StorageLive(_17);                // scope 0 at src\logger.rs:26:46: 26:59
        StorageLive(_18);                // scope 0 at src\logger.rs:26:46: 26:52
        _18 = _2;                        // scope 0 at src\logger.rs:26:46: 26:52
        _17 = const log::Record::args(move _18) -> bb2; // scope 0 at src\logger.rs:26:46: 26:59
                                         // ty::Const
                                         // + ty: for<'r> fn(&'r log::Record) -> &'r core::fmt::Arguments {log::Record::args}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\logger.rs:26:53: 26:57
                                         // + literal: Const { ty: for<'r> fn(&'r log::Record) -> &'r core::fmt::Arguments {log::Record::args}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_18);                // scope 0 at src\logger.rs:26:58: 26:59
        _16 = &_17;                      // scope 0 at src\logger.rs:26:46: 26:59
        (_12.0: &log::Level) = move _13; // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:42: 167:85
        (_12.1: &&core::fmt::Arguments) = move _16; // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:42: 167:85
        StorageDead(_16);                // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:84: 167:85
        StorageDead(_13);                // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:84: 167:85
        StorageLive(_19);                // scope 0 at src\logger.rs:26:30: 26:44
        _19 = (_12.0: &log::Level);      // scope 0 at src\logger.rs:26:30: 26:44
        StorageLive(_20);                // scope 0 at src\logger.rs:26:46: 26:59
        _20 = (_12.1: &&core::fmt::Arguments); // scope 0 at src\logger.rs:26:46: 26:59
        StorageLive(_21);                // scope 1 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:42: 167:85
        StorageLive(_22);                // scope 1 at src\logger.rs:26:30: 26:44
        _22 = _19;                       // scope 1 at src\logger.rs:26:30: 26:44
        StorageLive(_23);                // scope 1 at src\logger.rs:26:30: 26:44
        _23 = const <log::Level as core::fmt::Display>::fmt as for<'r, 's, 't0> fn(&'r log::Level, &'s mut core::fmt::Formatter<'t0>) -> core::result::Result<(), core::fmt::Error> (Pointer(ReifyFnPointer)); // scope 1 at src\logger.rs:26:30: 26:44
                                         // ty::Const
                                         // + ty: for<'r, 's, 't0> fn(&'r log::Level, &'s mut core::fmt::Formatter<'t0>) -> core::result::Result<(), core::fmt::Error> {<log::Level as core::fmt::Display>::fmt}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\logger.rs:26:30: 26:44
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r log::Level, &'s mut core::fmt::Formatter<'t0>) -> core::result::Result<(), core::fmt::Error> {<log::Level as core::fmt::Display>::fmt}, val: Value(Scalar(<ZST>)) }
        _21 = const core::fmt::ArgumentV1::new::<log::Level>(move _22, move _23) -> bb3; // scope 1 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:42: 167:85
                                         // ty::Const
                                         // + ty: for<'b> fn(&'b log::Level, for<'r, 's, 't0> fn(&'r log::Level, &'s mut core::fmt::Formatter<'t0>) -> core::result::Result<(), core::fmt::Error>) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::new::<log::Level>}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:42: 167:85
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b log::Level, for<'r, 's, 't0> fn(&'r log::Level, &'s mut core::fmt::Formatter<'t0>) -> core::result::Result<(), core::fmt::Error>) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::new::<log::Level>}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        StorageDead(_23);                // scope 1 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:84: 167:85
        StorageDead(_22);                // scope 1 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:84: 167:85
        StorageLive(_24);                // scope 1 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:42: 167:85
        StorageLive(_25);                // scope 1 at src\logger.rs:26:46: 26:59
        _25 = _20;                       // scope 1 at src\logger.rs:26:46: 26:59
        StorageLive(_26);                // scope 1 at src\logger.rs:26:46: 26:59
        _26 = const <&core::fmt::Arguments as core::fmt::Display>::fmt as for<'r, 's, 't0> fn(&'r &core::fmt::Arguments, &'s mut core::fmt::Formatter<'t0>) -> core::result::Result<(), core::fmt::Error> (Pointer(ReifyFnPointer)); // scope 1 at src\logger.rs:26:46: 26:59
                                         // ty::Const
                                         // + ty: for<'r, 's, 't0> fn(&'r &core::fmt::Arguments, &'s mut core::fmt::Formatter<'t0>) -> core::result::Result<(), core::fmt::Error> {<&core::fmt::Arguments as core::fmt::Display>::fmt}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\logger.rs:26:46: 26:59
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &core::fmt::Arguments, &'s mut core::fmt::Formatter<'t0>) -> core::result::Result<(), core::fmt::Error> {<&core::fmt::Arguments as core::fmt::Display>::fmt}, val: Value(Scalar(<ZST>)) }
        _24 = const core::fmt::ArgumentV1::new::<&core::fmt::Arguments>(move _25, move _26) -> bb4; // scope 1 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:42: 167:85
                                         // ty::Const
                                         // + ty: for<'b> fn(&'b &core::fmt::Arguments, for<'r, 's, 't0> fn(&'r &core::fmt::Arguments, &'s mut core::fmt::Formatter<'t0>) -> core::result::Result<(), core::fmt::Error>) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::new::<&core::fmt::Arguments>}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:42: 167:85
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b &core::fmt::Arguments, for<'r, 's, 't0> fn(&'r &core::fmt::Arguments, &'s mut core::fmt::Formatter<'t0>) -> core::result::Result<(), core::fmt::Error>) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::new::<&core::fmt::Arguments>}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_26);                // scope 1 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:84: 167:85
        StorageDead(_25);                // scope 1 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:84: 167:85
        _11 = [move _21, move _24];      // scope 1 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:42: 167:85
        StorageDead(_24);                // scope 1 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:84: 167:85
        StorageDead(_21);                // scope 1 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:84: 167:85
        StorageDead(_20);                // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:84: 167:85
        StorageDead(_19);                // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:84: 167:85
        _10 = &_11;                      // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:42: 167:85
        _9 = _10;                        // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:42: 167:85
        _8 = move _9 as &[core::fmt::ArgumentV1] (Pointer(Unsize)); // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:42: 167:85
        StorageDead(_9);                 // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:84: 167:85
        _4 = const core::fmt::Arguments::new_v1(move _5, move _8) -> bb5; // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:42: 167:85
                                         // ty::Const
                                         // + ty: fn(&[&str], &[core::fmt::ArgumentV1]) -> core::fmt::Arguments {core::fmt::Arguments::new_v1}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:42: 167:85
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&str], &[core::fmt::ArgumentV1]) -> core::fmt::Arguments {core::fmt::Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        StorageDead(_8);                 // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:84: 167:85
        StorageDead(_5);                 // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:84: 167:85
        _3 = const rtt_target::print_impl::write_fmt(const 0_u8, move _4) -> bb6; // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:9: 167:86
                                         // ty::Const
                                         // + ty: for<'r> fn(u8, core::fmt::Arguments<'r>) {rtt_target::print_impl::write_fmt}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:9: 167:38
                                         // + literal: Const { ty: for<'r> fn(u8, core::fmt::Arguments<'r>) {rtt_target::print_impl::write_fmt}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: u8
                                         // + val: Value(Scalar(0x00))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:39: 167:40
                                         // + literal: Const { ty: u8, val: Value(Scalar(0x00)) }
    }

    bb6: {
        StorageDead(_4);                 // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:85: 167:86
        StorageDead(_17);                // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:86: 167:87
        StorageDead(_14);                // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:86: 167:87
        StorageDead(_12);                // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:86: 167:87
        StorageDead(_11);                // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:86: 167:87
        StorageDead(_10);                // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:86: 167:87
        StorageDead(_7);                 // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:86: 167:87
        StorageDead(_3);                 // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:86: 167:87
        _0 = const ();                   // scope 0 at src\logger.rs:25:36: 27:6
                                         // ty::Const
                                         // + ty: ()
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\logger.rs:25:36: 27:6
                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }
        return;                          // scope 0 at src\logger.rs:27:6: 27:6
    }
}

promoted[0] in logger::<impl at src\logger.rs:19:1: 30:2>::log: &[&str; 3] = {
    let mut _0: &[&str; 3];              // return place in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:55: 167:74
    let mut _1: [&str; 3];               // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:55: 167:74
    let mut _2: &str;                    // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:55: 167:74
    let mut _3: &str;                    // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:55: 167:74
    let mut _4: &str;                    // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:55: 167:74
    let mut _5: &str;                    // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:55: 167:74
    let mut _6: &str;                    // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:55: 167:74
    let mut _7: &str;                    // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:55: 167:74
    scope 1 {
    }

    bb0: {
        _3 = const "";                   // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:55: 167:74
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [], len: Size { raw: 0 } }, size: Size { raw: 0 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 0 })
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:55: 167:74
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [], len: Size { raw: 0 } }, size: Size { raw: 0 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 0 }) }
        _2 = _3;                         // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:55: 167:74
        _5 = const " - ";                // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:55: 167:74
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [32, 45, 32], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [7], len: Size { raw: 3 } }, size: Size { raw: 3 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 3 })
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:55: 167:74
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [32, 45, 32], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [7], len: Size { raw: 3 } }, size: Size { raw: 3 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 3 }) }
        _4 = _5;                         // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:55: 167:74
        _7 = const "\n";                 // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:55: 167:74
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [10], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, size: Size { raw: 1 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:55: 167:74
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [10], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, size: Size { raw: 1 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }
        _6 = _7;                         // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:55: 167:74
        _1 = [move _2, move _4, move _6]; // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:55: 167:74
        _0 = &_1;                        // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:55: 167:74
        return;                          // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\rtt-target-0.2.2\src\print.rs:167:55: 167:74
    }
}

fn logger::init::{{closure}}#0(_1: [closure@src\logger.rs:16:34: 16:76], _2: ()) -> () {
    let mut _0: ();                      // return place in scope 0 at src\logger.rs:16:39: 16:39
    let mut _3: log::LevelFilter;        // in scope 0 at src\logger.rs:16:58: 16:75

    bb0: {
        StorageLive(_3);                 // scope 0 at src\logger.rs:16:58: 16:75
        _3 = const log::LevelFilter::Info; // scope 0 at src\logger.rs:16:58: 16:75
                                         // ty::Const
                                         // + ty: log::LevelFilter
                                         // + val: Value(Scalar(0x00000003))
                                         // mir::Constant
                                         // + span: src\logger.rs:16:58: 16:75
                                         // + literal: Const { ty: log::LevelFilter, val: Value(Scalar(0x00000003)) }
        _0 = const log::set_max_level(move _3) -> bb1; // scope 0 at src\logger.rs:16:39: 16:76
                                         // ty::Const
                                         // + ty: fn(log::LevelFilter) {log::set_max_level}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\logger.rs:16:39: 16:57
                                         // + literal: Const { ty: fn(log::LevelFilter) {log::set_max_level}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_3);                 // scope 0 at src\logger.rs:16:75: 16:76
        return;                          // scope 0 at src\logger.rs:16:76: 16:76
    }
}

fn __cortex_m_rt_EXTI9_5::{{closure}}#0(_1: [closure@src\main.rs:81:31: 92:6], _2: &cortex_m::interrupt::CriticalSection) -> () {
    debug cs => _2;                      // in scope 0 at src\main.rs:81:32: 81:34
    let mut _0: ();                      // return place in scope 0 at src\main.rs:81:36: 81:36
    let mut _3: core::cell::RefMut<core::option::Option<sdmmc::Sdmmc>>; // in scope 0 at src\main.rs:82:13: 82:22
    let mut _4: &core::cell::RefCell<core::option::Option<sdmmc::Sdmmc>>; // in scope 0 at src\main.rs:82:25: 82:41
    let _5: &core::cell::RefCell<core::option::Option<sdmmc::Sdmmc>>; // in scope 0 at src\main.rs:82:25: 82:41
    let mut _6: &cortex_m::interrupt::Mutex<core::cell::RefCell<core::option::Option<sdmmc::Sdmmc>>>; // in scope 0 at src\main.rs:82:25: 82:30
    let _7: &cortex_m::interrupt::Mutex<core::cell::RefCell<core::option::Option<sdmmc::Sdmmc>>>; // in scope 0 at src\main.rs:82:25: 82:30
    let mut _8: &cortex_m::interrupt::CriticalSection; // in scope 0 at src\main.rs:82:38: 82:40
    let mut _10: core::option::Option<&mut sdmmc::Sdmmc>; // in scope 0 at src\main.rs:83:21: 83:35
    let mut _11: &mut core::option::Option<sdmmc::Sdmmc>; // in scope 0 at src\main.rs:83:21: 83:26
    let mut _12: &mut core::option::Option<sdmmc::Sdmmc>; // in scope 0 at src\main.rs:83:21: 83:26
    let mut _13: &mut core::cell::RefMut<core::option::Option<sdmmc::Sdmmc>>; // in scope 0 at src\main.rs:83:21: 83:26
    let mut _14: bool;                   // in scope 0 at src\main.rs:84:12: 84:33
    let mut _15: &mut sdmmc::Sdmmc;      // in scope 0 at src\main.rs:84:12: 84:17
    let mut _17: bool;                   // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:73
    let mut _18: bool;                   // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:43
    let mut _19: &log::Level;            // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:15
    let mut _20: &log::LevelFilter;      // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:19: 34:43
    let mut _21: bool;                   // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:47: 34:73
    let mut _22: &log::Level;            // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:47: 34:50
    let mut _23: &log::LevelFilter;      // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:54: 34:73
    let _24: log::LevelFilter;           // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:54: 34:73
    let mut _25: core::fmt::Arguments;   // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
    let mut _26: &[&str];                // in scope 0 at src\main.rs:85:19: 85:42
    let mut _27: &[&str; 1];             // in scope 0 at src\main.rs:85:19: 85:42
    let _28: &[&str; 1];                 // in scope 0 at src\main.rs:85:19: 85:42
    let mut _29: &[core::fmt::ArgumentV1]; // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
    let mut _30: &[core::fmt::ArgumentV1; 0]; // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
    let _31: &[core::fmt::ArgumentV1; 0]; // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
    let _32: ();                         // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:37:13: 41:14
    let mut _33: &str;                   // in scope 0 at src\main.rs:85:19: 85:42
    let _34: &str;                       // in scope 0 at src\main.rs:85:19: 85:42
    let mut _35: log::Level;             // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:39:17: 39:20
    let mut _36: &(&str, &str, &str, u32); // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:17: 40:79
    let _37: &(&str, &str, &str, u32);   // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:17: 40:79
    let mut _38: core::result::Result<(), stm32h7xx_hal::sdmmc::Error>; // in scope 0 at src\main.rs:86:29: 86:46
    let mut _39: &mut sdmmc::Sdmmc;      // in scope 0 at src\main.rs:86:29: 86:34
    let mut _40: isize;                  // in scope 0 at src\main.rs:86:20: 86:26
    let mut _43: bool;                   // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:12: 46:73
    let mut _44: bool;                   // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:12: 46:43
    let mut _45: &log::Level;            // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:12: 46:15
    let mut _46: &log::LevelFilter;      // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:19: 46:43
    let mut _47: bool;                   // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:47: 46:73
    let mut _48: &log::Level;            // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:47: 46:50
    let mut _49: &log::LevelFilter;      // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:54: 46:73
    let _50: log::LevelFilter;           // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:54: 46:73
    let _51: ();                         // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:47:13: 51:14
    let mut _52: core::fmt::Arguments;   // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
    let mut _53: &[&str];                // in scope 0 at src\main.rs:87:24: 87:64
    let mut _54: &[&str; 1];             // in scope 0 at src\main.rs:87:24: 87:64
    let _55: &[&str; 1];                 // in scope 0 at src\main.rs:87:24: 87:64
    let mut _56: &[core::fmt::ArgumentV1]; // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
    let mut _57: &[core::fmt::ArgumentV1; 1]; // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
    let _58: &[core::fmt::ArgumentV1; 1]; // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
    let _59: [core::fmt::ArgumentV1; 1]; // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
    let mut _60: (&stm32h7xx_hal::sdmmc::Error,); // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
    let mut _61: &stm32h7xx_hal::sdmmc::Error; // in scope 0 at src\main.rs:87:66: 87:67
    let mut _63: core::fmt::ArgumentV1;  // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
    let mut _64: &stm32h7xx_hal::sdmmc::Error; // in scope 0 at src\main.rs:87:66: 87:67
    let mut _65: for<'r, 's, 't0> fn(&'r stm32h7xx_hal::sdmmc::Error, &'s mut core::fmt::Formatter<'t0>) -> core::result::Result<(), core::fmt::Error>; // in scope 0 at src\main.rs:87:66: 87:67
    let mut _66: log::Level;             // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:49:17: 49:20
    let mut _67: &(&str, &str, &str, u32); // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:50:17: 50:79
    let _68: &(&str, &str, &str, u32);   // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:50:17: 50:79
    let mut _70: bool;                   // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:73
    let mut _71: bool;                   // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:43
    let mut _72: &log::Level;            // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:15
    let mut _73: &log::LevelFilter;      // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:19: 34:43
    let mut _74: bool;                   // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:47: 34:73
    let mut _75: &log::Level;            // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:47: 34:50
    let mut _76: &log::LevelFilter;      // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:54: 34:73
    let _77: log::LevelFilter;           // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:54: 34:73
    let mut _78: core::fmt::Arguments;   // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
    let mut _79: &[&str];                // in scope 0 at src\main.rs:90:19: 90:41
    let mut _80: &[&str; 1];             // in scope 0 at src\main.rs:90:19: 90:41
    let _81: &[&str; 1];                 // in scope 0 at src\main.rs:90:19: 90:41
    let mut _82: &[core::fmt::ArgumentV1]; // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
    let mut _83: &[core::fmt::ArgumentV1; 0]; // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
    let _84: &[core::fmt::ArgumentV1; 0]; // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
    let _85: ();                         // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:37:13: 41:14
    let mut _86: &str;                   // in scope 0 at src\main.rs:90:19: 90:41
    let _87: &str;                       // in scope 0 at src\main.rs:90:19: 90:41
    let mut _88: log::Level;             // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:39:17: 39:20
    let mut _89: &(&str, &str, &str, u32); // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:17: 40:79
    let _90: &(&str, &str, &str, u32);   // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:17: 40:79
    scope 1 {
        debug sdmmc => _3;               // in scope 1 at src\main.rs:82:13: 82:22
        let _9: &mut sdmmc::Sdmmc;       // in scope 1 at src\main.rs:83:13: 83:18
        scope 2 {
            debug sdmmc => _9;           // in scope 2 at src\main.rs:83:13: 83:18
            let _16: log::Level;         // in scope 2 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:33:13: 33:16
            let _41: stm32h7xx_hal::sdmmc::Error; // in scope 2 at src\main.rs:86:24: 86:25
            let _69: log::Level;         // in scope 2 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:33:13: 33:16
            scope 3 {
                debug lvl => _16;        // in scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:33:13: 33:16
                let mut _99: &[core::fmt::ArgumentV1; 0]; // in scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
                let mut _100: &[&str; 1]; // in scope 3 at src\main.rs:85:19: 85:42
                let mut _101: &log::LevelFilter; // in scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:19: 34:43
                scope 4 {
                    let mut _98: &(&str, &str, &str, u32); // in scope 4 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:17: 40:79
                }
            }
            scope 5 {
                debug e => _41;          // in scope 5 at src\main.rs:86:24: 86:25
                let _42: log::Level;     // in scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:45:13: 45:16
                scope 6 {
                    debug lvl => _42;    // in scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:45:13: 45:16
                    let _62: &stm32h7xx_hal::sdmmc::Error; // in scope 6 at src\main.rs:87:66: 87:67
                    let mut _95: &(&str, &str, &str, u32); // in scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:50:17: 50:79
                    let mut _96: &[&str; 1]; // in scope 6 at src\main.rs:87:24: 87:64
                    let mut _97: &log::LevelFilter; // in scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:19: 46:43
                    scope 7 {
                        debug arg0 => _62; // in scope 7 at src\main.rs:87:66: 87:67
                    }
                }
            }
            scope 8 {
                debug lvl => _69;        // in scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:33:13: 33:16
                let mut _92: &[core::fmt::ArgumentV1; 0]; // in scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
                let mut _93: &[&str; 1]; // in scope 8 at src\main.rs:90:19: 90:41
                let mut _94: &log::LevelFilter; // in scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:19: 34:43
                scope 9 {
                    let mut _91: &(&str, &str, &str, u32); // in scope 9 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:17: 40:79
                }
            }
        }
    }

    bb0: {
        StorageLive(_3);                 // scope 0 at src\main.rs:82:13: 82:22
        StorageLive(_4);                 // scope 0 at src\main.rs:82:25: 82:41
        StorageLive(_5);                 // scope 0 at src\main.rs:82:25: 82:41
        StorageLive(_6);                 // scope 0 at src\main.rs:82:25: 82:30
        StorageLive(_7);                 // scope 0 at src\main.rs:82:25: 82:30
        _7 = const {alloc1: &cortex_m::interrupt::Mutex<core::cell::RefCell<core::option::Option<sdmmc::Sdmmc>>>}; // scope 0 at src\main.rs:82:25: 82:30
                                         // ty::Const
                                         // + ty: &cortex_m::interrupt::Mutex<core::cell::RefCell<core::option::Option<sdmmc::Sdmmc>>>
                                         // + val: Value(Scalar(alloc1))
                                         // mir::Constant
                                         // + span: src\main.rs:82:25: 82:30
                                         // + literal: Const { ty: &cortex_m::interrupt::Mutex<core::cell::RefCell<core::option::Option<sdmmc::Sdmmc>>>, val: Value(Scalar(alloc1)) }
        _6 = _7;                         // scope 0 at src\main.rs:82:25: 82:30
        StorageLive(_8);                 // scope 0 at src\main.rs:82:38: 82:40
        _8 = _2;                         // scope 0 at src\main.rs:82:38: 82:40
        _5 = const cortex_m::interrupt::Mutex::<core::cell::RefCell<core::option::Option<sdmmc::Sdmmc>>>::borrow(move _6, move _8) -> bb1; // scope 0 at src\main.rs:82:25: 82:41
                                         // ty::Const
                                         // + ty: for<'cs> fn(&'cs cortex_m::interrupt::Mutex<core::cell::RefCell<core::option::Option<sdmmc::Sdmmc>>>, &'cs cortex_m::interrupt::CriticalSection) -> &'cs core::cell::RefCell<core::option::Option<sdmmc::Sdmmc>> {cortex_m::interrupt::Mutex::<core::cell::RefCell<core::option::Option<sdmmc::Sdmmc>>>::borrow}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:82:31: 82:37
                                         // + literal: Const { ty: for<'cs> fn(&'cs cortex_m::interrupt::Mutex<core::cell::RefCell<core::option::Option<sdmmc::Sdmmc>>>, &'cs cortex_m::interrupt::CriticalSection) -> &'cs core::cell::RefCell<core::option::Option<sdmmc::Sdmmc>> {cortex_m::interrupt::Mutex::<core::cell::RefCell<core::option::Option<sdmmc::Sdmmc>>>::borrow}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _4 = _5;                         // scope 0 at src\main.rs:82:25: 82:41
        StorageDead(_8);                 // scope 0 at src\main.rs:82:40: 82:41
        StorageDead(_6);                 // scope 0 at src\main.rs:82:40: 82:41
        _3 = const core::cell::RefCell::<core::option::Option<sdmmc::Sdmmc>>::borrow_mut(move _4) -> bb2; // scope 0 at src\main.rs:82:25: 82:54
                                         // ty::Const
                                         // + ty: for<'r> fn(&'r core::cell::RefCell<core::option::Option<sdmmc::Sdmmc>>) -> core::cell::RefMut<'r, core::option::Option<sdmmc::Sdmmc>> {core::cell::RefCell::<core::option::Option<sdmmc::Sdmmc>>::borrow_mut}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:82:42: 82:52
                                         // + literal: Const { ty: for<'r> fn(&'r core::cell::RefCell<core::option::Option<sdmmc::Sdmmc>>) -> core::cell::RefMut<'r, core::option::Option<sdmmc::Sdmmc>> {core::cell::RefCell::<core::option::Option<sdmmc::Sdmmc>>::borrow_mut}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_4);                 // scope 0 at src\main.rs:82:53: 82:54
        StorageDead(_7);                 // scope 0 at src\main.rs:82:54: 82:55
        StorageDead(_5);                 // scope 0 at src\main.rs:82:54: 82:55
        StorageLive(_9);                 // scope 1 at src\main.rs:83:13: 83:18
        StorageLive(_10);                // scope 1 at src\main.rs:83:21: 83:35
        StorageLive(_11);                // scope 1 at src\main.rs:83:21: 83:26
        StorageLive(_12);                // scope 1 at src\main.rs:83:21: 83:26
        StorageLive(_13);                // scope 1 at src\main.rs:83:21: 83:26
        _13 = &mut _3;                   // scope 1 at src\main.rs:83:21: 83:26
        _12 = const <core::cell::RefMut<core::option::Option<sdmmc::Sdmmc>> as core::ops::DerefMut>::deref_mut(move _13) -> bb3; // scope 1 at src\main.rs:83:21: 83:26
                                         // ty::Const
                                         // + ty: for<'r> fn(&'r mut core::cell::RefMut<core::option::Option<sdmmc::Sdmmc>>) -> &'r mut <core::cell::RefMut<core::option::Option<sdmmc::Sdmmc>> as core::ops::Deref>::Target {<core::cell::RefMut<core::option::Option<sdmmc::Sdmmc>> as core::ops::DerefMut>::deref_mut}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:83:21: 83:26
                                         // + literal: Const { ty: for<'r> fn(&'r mut core::cell::RefMut<core::option::Option<sdmmc::Sdmmc>>) -> &'r mut <core::cell::RefMut<core::option::Option<sdmmc::Sdmmc>> as core::ops::Deref>::Target {<core::cell::RefMut<core::option::Option<sdmmc::Sdmmc>> as core::ops::DerefMut>::deref_mut}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _11 = &mut (*_12);               // scope 1 at src\main.rs:83:21: 83:26
        StorageDead(_13);                // scope 1 at src\main.rs:83:25: 83:26
        _10 = const core::option::Option::<sdmmc::Sdmmc>::as_mut(move _11) -> bb4; // scope 1 at src\main.rs:83:21: 83:35
                                         // ty::Const
                                         // + ty: for<'r> fn(&'r mut core::option::Option<sdmmc::Sdmmc>) -> core::option::Option<&'r mut sdmmc::Sdmmc> {core::option::Option::<sdmmc::Sdmmc>::as_mut}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:83:27: 83:33
                                         // + literal: Const { ty: for<'r> fn(&'r mut core::option::Option<sdmmc::Sdmmc>) -> core::option::Option<&'r mut sdmmc::Sdmmc> {core::option::Option::<sdmmc::Sdmmc>::as_mut}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_11);                // scope 1 at src\main.rs:83:34: 83:35
        _9 = const core::option::Option::<&mut sdmmc::Sdmmc>::unwrap(move _10) -> bb5; // scope 1 at src\main.rs:83:21: 83:44
                                         // ty::Const
                                         // + ty: fn(core::option::Option<&mut sdmmc::Sdmmc>) -> &mut sdmmc::Sdmmc {core::option::Option::<&mut sdmmc::Sdmmc>::unwrap}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:83:36: 83:42
                                         // + literal: Const { ty: fn(core::option::Option<&mut sdmmc::Sdmmc>) -> &mut sdmmc::Sdmmc {core::option::Option::<&mut sdmmc::Sdmmc>::unwrap}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        StorageDead(_10);                // scope 1 at src\main.rs:83:43: 83:44
        StorageDead(_12);                // scope 1 at src\main.rs:83:44: 83:45
        StorageLive(_14);                // scope 2 at src\main.rs:84:12: 84:33
        StorageLive(_15);                // scope 2 at src\main.rs:84:12: 84:17
        _15 = &mut (*_9);                // scope 2 at src\main.rs:84:12: 84:17
        _14 = const sdmmc::Sdmmc::handle_detect(move _15) -> bb6; // scope 2 at src\main.rs:84:12: 84:33
                                         // ty::Const
                                         // + ty: for<'r> fn(&'r mut sdmmc::Sdmmc) -> bool {sdmmc::Sdmmc::handle_detect}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:84:18: 84:31
                                         // + literal: Const { ty: for<'r> fn(&'r mut sdmmc::Sdmmc) -> bool {sdmmc::Sdmmc::handle_detect}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        StorageDead(_15);                // scope 2 at src\main.rs:84:32: 84:33
        switchInt(_14) -> [false: bb7, otherwise: bb8]; // scope 2 at src\main.rs:84:9: 91:10
    }

    bb7: {
        StorageLive(_69);                // scope 2 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:33:13: 33:16
        _69 = const log::Level::Info;    // scope 2 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:127:14: 127:33
                                         // ty::Const
                                         // + ty: log::Level
                                         // + val: Value(Scalar(0x00000003))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:127:14: 127:33
                                         // + literal: Const { ty: log::Level, val: Value(Scalar(0x00000003)) }
        StorageLive(_70);                // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:73
        StorageLive(_71);                // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:43
        StorageLive(_72);                // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:15
        _72 = &_69;                      // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:15
        StorageLive(_73);                // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:19: 34:43
        _94 = const __cortex_m_rt_EXTI9_5::{{closure}}#0::promoted[3]; // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:19: 34:43
                                         // ty::Const
                                         // + ty: &log::LevelFilter
                                         // + val: Unevaluated(DefId(0:79 ~ miscomp_repro[978e]::__cortex_m_rt_EXTI9_5[0]::{{closure}}[0]), [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[3]))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:19: 34:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(DefId(0:79 ~ miscomp_repro[978e]::__cortex_m_rt_EXTI9_5[0]::{{closure}}[0]), [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[3])) }
        _73 = _94;                       // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:19: 34:43
        _71 = const <log::Level as core::cmp::PartialOrd<log::LevelFilter>>::le(move _72, move _73) -> bb42; // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:43
                                         // ty::Const
                                         // + ty: for<'r, 's> fn(&'r log::Level, &'s log::LevelFilter) -> bool {<log::Level as core::cmp::PartialOrd<log::LevelFilter>>::le}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:43
                                         // + literal: Const { ty: for<'r, 's> fn(&'r log::Level, &'s log::LevelFilter) -> bool {<log::Level as core::cmp::PartialOrd<log::LevelFilter>>::le}, val: Value(Scalar(<ZST>)) }
    }

    bb8: {
        StorageLive(_16);                // scope 2 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:33:13: 33:16
        _16 = const log::Level::Info;    // scope 2 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:127:14: 127:33
                                         // ty::Const
                                         // + ty: log::Level
                                         // + val: Value(Scalar(0x00000003))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:127:14: 127:33
                                         // + literal: Const { ty: log::Level, val: Value(Scalar(0x00000003)) }
        StorageLive(_17);                // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:73
        StorageLive(_18);                // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:43
        StorageLive(_19);                // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:15
        _19 = &_16;                      // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:15
        StorageLive(_20);                // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:19: 34:43
        _101 = const __cortex_m_rt_EXTI9_5::{{closure}}#0::promoted[10]; // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:19: 34:43
                                         // ty::Const
                                         // + ty: &log::LevelFilter
                                         // + val: Unevaluated(DefId(0:79 ~ miscomp_repro[978e]::__cortex_m_rt_EXTI9_5[0]::{{closure}}[0]), [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[10]))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:19: 34:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(DefId(0:79 ~ miscomp_repro[978e]::__cortex_m_rt_EXTI9_5[0]::{{closure}}[0]), [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[10])) }
        _20 = _101;                      // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:19: 34:43
        _18 = const <log::Level as core::cmp::PartialOrd<log::LevelFilter>>::le(move _19, move _20) -> bb13; // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:43
                                         // ty::Const
                                         // + ty: for<'r, 's> fn(&'r log::Level, &'s log::LevelFilter) -> bool {<log::Level as core::cmp::PartialOrd<log::LevelFilter>>::le}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:43
                                         // + literal: Const { ty: for<'r, 's> fn(&'r log::Level, &'s log::LevelFilter) -> bool {<log::Level as core::cmp::PartialOrd<log::LevelFilter>>::le}, val: Value(Scalar(<ZST>)) }
    }

    bb9: {
        _17 = const true;                // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:73
                                         // ty::Const
                                         // + ty: bool
                                         // + val: Value(Scalar(0x01))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:73
                                         // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }
        goto -> bb12;                    // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:73
    }

    bb10: {
        _17 = const false;               // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:73
                                         // ty::Const
                                         // + ty: bool
                                         // + val: Value(Scalar(0x00))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:73
                                         // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }
        goto -> bb12;                    // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:73
    }

    bb11: {
        StorageLive(_21);                // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:47: 34:73
        StorageLive(_22);                // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:47: 34:50
        _22 = &_16;                      // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:47: 34:50
        StorageLive(_23);                // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:54: 34:73
        StorageLive(_24);                // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:54: 34:73
        _24 = const log::max_level() -> bb14; // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:54: 34:73
                                         // ty::Const
                                         // + ty: fn() -> log::LevelFilter {log::max_level}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:54: 34:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(Scalar(<ZST>)) }
    }

    bb12: {
        StorageDead(_21);                // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:72: 34:73
        StorageDead(_18);                // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:72: 34:73
        switchInt(_17) -> [false: bb16, otherwise: bb17]; // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:9: 42:10
    }

    bb13: {
        StorageDead(_20);                // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:42: 34:43
        StorageDead(_19);                // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:42: 34:43
        switchInt(move _18) -> [false: bb10, otherwise: bb11]; // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:73
    }

    bb14: {
        _23 = &_24;                      // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:54: 34:73
        _21 = const <log::Level as core::cmp::PartialOrd<log::LevelFilter>>::le(move _22, move _23) -> bb15; // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:47: 34:73
                                         // ty::Const
                                         // + ty: for<'r, 's> fn(&'r log::Level, &'s log::LevelFilter) -> bool {<log::Level as core::cmp::PartialOrd<log::LevelFilter>>::le}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:47: 34:73
                                         // + literal: Const { ty: for<'r, 's> fn(&'r log::Level, &'s log::LevelFilter) -> bool {<log::Level as core::cmp::PartialOrd<log::LevelFilter>>::le}, val: Value(Scalar(<ZST>)) }
    }

    bb15: {
        StorageDead(_24);                // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:72: 34:73
        StorageDead(_23);                // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:72: 34:73
        StorageDead(_22);                // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:72: 34:73
        switchInt(move _21) -> [false: bb10, otherwise: bb9]; // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:73
    }

    bb16: {
        goto -> bb20;                    // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:9: 42:10
    }

    bb17: {
        StorageLive(_25);                // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        StorageLive(_26);                // scope 3 at src\main.rs:85:19: 85:42
        StorageLive(_27);                // scope 3 at src\main.rs:85:19: 85:42
        StorageLive(_28);                // scope 3 at src\main.rs:85:19: 85:42
        _100 = const __cortex_m_rt_EXTI9_5::{{closure}}#0::promoted[9]; // scope 3 at src\main.rs:85:19: 85:42
                                         // ty::Const
                                         // + ty: &[&str; 1]
                                         // + val: Unevaluated(DefId(0:79 ~ miscomp_repro[978e]::__cortex_m_rt_EXTI9_5[0]::{{closure}}[0]), [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[9]))
                                         // mir::Constant
                                         // + span: src\main.rs:85:19: 85:42
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(DefId(0:79 ~ miscomp_repro[978e]::__cortex_m_rt_EXTI9_5[0]::{{closure}}[0]), [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[9])) }
        _28 = _100;                      // scope 3 at src\main.rs:85:19: 85:42
        _27 = _28;                       // scope 3 at src\main.rs:85:19: 85:42
        _26 = move _27 as &[&str] (Pointer(Unsize)); // scope 3 at src\main.rs:85:19: 85:42
        StorageDead(_27);                // scope 3 at src\main.rs:85:41: 85:42
        StorageLive(_29);                // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        StorageLive(_30);                // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        StorageLive(_31);                // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        _99 = const __cortex_m_rt_EXTI9_5::{{closure}}#0::promoted[8]; // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
                                         // ty::Const
                                         // + ty: &[core::fmt::ArgumentV1; 0]
                                         // + val: Unevaluated(DefId(0:79 ~ miscomp_repro[978e]::__cortex_m_rt_EXTI9_5[0]::{{closure}}[0]), [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[8]))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
                                         // + literal: Const { ty: &[core::fmt::ArgumentV1; 0], val: Unevaluated(DefId(0:79 ~ miscomp_repro[978e]::__cortex_m_rt_EXTI9_5[0]::{{closure}}[0]), [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[8])) }
        _31 = _99;                       // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        _30 = _31;                       // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        _29 = move _30 as &[core::fmt::ArgumentV1] (Pointer(Unsize)); // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        StorageDead(_30);                // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:31: 236:32
        _25 = const core::fmt::Arguments::new_v1(move _26, move _29) -> bb18; // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
                                         // ty::Const
                                         // + ty: fn(&[&str], &[core::fmt::ArgumentV1]) -> core::fmt::Arguments {core::fmt::Arguments::new_v1}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&str], &[core::fmt::ArgumentV1]) -> core::fmt::Arguments {core::fmt::Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
    }

    bb18: {
        StorageDead(_29);                // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:31: 236:32
        StorageDead(_26);                // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:31: 236:32
        StorageDead(_31);                // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:36:49: 36:50
        StorageDead(_28);                // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:36:49: 36:50
        StorageDead(_25);                // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:36:49: 36:50
        StorageLive(_32);                // scope 4 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:37:13: 41:14
        StorageLive(_33);                // scope 4 at src\main.rs:85:19: 85:42
        StorageLive(_34);                // scope 4 at src\main.rs:85:19: 85:42
        _34 = const "MicroSD card inserted"; // scope 4 at src\main.rs:85:19: 85:42
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [77, 105, 99, 114, 111, 83, 68, 32, 99, 97, 114, 100, 32, 105, 110, 115, 101, 114, 116, 101, 100], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2097151], len: Size { raw: 21 } }, size: Size { raw: 21 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 21 })
                                         // mir::Constant
                                         // + span: src\main.rs:85:19: 85:42
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [77, 105, 99, 114, 111, 83, 68, 32, 99, 97, 114, 100, 32, 105, 110, 115, 101, 114, 116, 101, 100], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2097151], len: Size { raw: 21 } }, size: Size { raw: 21 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 21 }) }
        _33 = _34;                       // scope 4 at src\main.rs:85:19: 85:42
        StorageLive(_35);                // scope 4 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:39:17: 39:20
        _35 = _16;                       // scope 4 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:39:17: 39:20
        StorageLive(_36);                // scope 4 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:17: 40:79
        StorageLive(_37);                // scope 4 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:17: 40:79
        _98 = const __cortex_m_rt_EXTI9_5::{{closure}}#0::promoted[7]; // scope 4 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:17: 40:79
                                         // ty::Const
                                         // + ty: &(&str, &str, &str, u32)
                                         // + val: Unevaluated(DefId(0:79 ~ miscomp_repro[978e]::__cortex_m_rt_EXTI9_5[0]::{{closure}}[0]), [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[7]))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(DefId(0:79 ~ miscomp_repro[978e]::__cortex_m_rt_EXTI9_5[0]::{{closure}}[0]), [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[7])) }
        _37 = _98;                       // scope 4 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:17: 40:79
        _36 = _37;                       // scope 4 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:17: 40:79
        _32 = const log::__private_api_log_lit(move _33, move _35, move _36) -> bb19; // scope 4 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:37:13: 41:14
                                         // ty::Const
                                         // + ty: for<'r, 's, 't0> fn(&'r str, log::Level, &'s (&'t0 str, &'static str, &'static str, u32)) {log::__private_api_log_lit}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:37:13: 37:42
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r str, log::Level, &'s (&'t0 str, &'static str, &'static str, u32)) {log::__private_api_log_lit}, val: Value(Scalar(<ZST>)) }
    }

    bb19: {
        StorageDead(_36);                // scope 4 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:41:13: 41:14
        StorageDead(_35);                // scope 4 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:41:13: 41:14
        StorageDead(_33);                // scope 4 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:41:13: 41:14
        StorageDead(_37);                // scope 4 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:41:14: 41:15
        StorageDead(_34);                // scope 4 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:41:14: 41:15
        StorageDead(_32);                // scope 4 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:41:14: 41:15
        goto -> bb20;                    // scope 3 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:9: 42:10
    }

    bb20: {
        StorageDead(_16);                // scope 2 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:43:5: 43:6
        StorageDead(_17);                // scope 2 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:43:5: 43:6
        StorageLive(_38);                // scope 2 at src\main.rs:86:29: 86:46
        StorageLive(_39);                // scope 2 at src\main.rs:86:29: 86:34
        _39 = &mut (*_9);                // scope 2 at src\main.rs:86:29: 86:34
        _38 = const sdmmc::Sdmmc::init_card(move _39) -> bb21; // scope 2 at src\main.rs:86:29: 86:46
                                         // ty::Const
                                         // + ty: for<'r> fn(&'r mut sdmmc::Sdmmc) -> core::result::Result<(), stm32h7xx_hal::sdmmc::Error> {sdmmc::Sdmmc::init_card}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:86:35: 86:44
                                         // + literal: Const { ty: for<'r> fn(&'r mut sdmmc::Sdmmc) -> core::result::Result<(), stm32h7xx_hal::sdmmc::Error> {sdmmc::Sdmmc::init_card}, val: Value(Scalar(<ZST>)) }
    }

    bb21: {
        StorageDead(_39);                // scope 2 at src\main.rs:86:45: 86:46
        _40 = discriminant(_38);         // scope 2 at src\main.rs:86:20: 86:26
        switchInt(move _40) -> [1_isize: bb23, otherwise: bb22]; // scope 2 at src\main.rs:86:20: 86:26
    }

    bb22: {
        _0 = const ();                   // scope 2 at src\main.rs:86:13: 88:14
                                         // ty::Const
                                         // + ty: ()
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:86:13: 88:14
                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }
        goto -> bb37;                    // scope 2 at src\main.rs:86:13: 88:14
    }

    bb23: {
        StorageLive(_41);                // scope 2 at src\main.rs:86:24: 86:25
        _41 = ((_38 as Err).0: stm32h7xx_hal::sdmmc::Error); // scope 2 at src\main.rs:86:24: 86:25
        StorageLive(_42);                // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:45:13: 45:16
        _42 = const log::Level::Error;   // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:77:14: 77:34
                                         // ty::Const
                                         // + ty: log::Level
                                         // + val: Value(Scalar(0x00000001))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:77:14: 77:34
                                         // + literal: Const { ty: log::Level, val: Value(Scalar(0x00000001)) }
        StorageLive(_43);                // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:12: 46:73
        StorageLive(_44);                // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:12: 46:43
        StorageLive(_45);                // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:12: 46:15
        _45 = &_42;                      // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:12: 46:15
        StorageLive(_46);                // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:19: 46:43
        _97 = const __cortex_m_rt_EXTI9_5::{{closure}}#0::promoted[6]; // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:19: 46:43
                                         // ty::Const
                                         // + ty: &log::LevelFilter
                                         // + val: Unevaluated(DefId(0:79 ~ miscomp_repro[978e]::__cortex_m_rt_EXTI9_5[0]::{{closure}}[0]), [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[6]))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:19: 46:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(DefId(0:79 ~ miscomp_repro[978e]::__cortex_m_rt_EXTI9_5[0]::{{closure}}[0]), [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[6])) }
        _46 = _97;                       // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:19: 46:43
        _44 = const <log::Level as core::cmp::PartialOrd<log::LevelFilter>>::le(move _45, move _46) -> bb28; // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:12: 46:43
                                         // ty::Const
                                         // + ty: for<'r, 's> fn(&'r log::Level, &'s log::LevelFilter) -> bool {<log::Level as core::cmp::PartialOrd<log::LevelFilter>>::le}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:12: 46:43
                                         // + literal: Const { ty: for<'r, 's> fn(&'r log::Level, &'s log::LevelFilter) -> bool {<log::Level as core::cmp::PartialOrd<log::LevelFilter>>::le}, val: Value(Scalar(<ZST>)) }
    }

    bb24: {
        _43 = const true;                // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:12: 46:73
                                         // ty::Const
                                         // + ty: bool
                                         // + val: Value(Scalar(0x01))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:12: 46:73
                                         // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }
        goto -> bb27;                    // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:12: 46:73
    }

    bb25: {
        _43 = const false;               // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:12: 46:73
                                         // ty::Const
                                         // + ty: bool
                                         // + val: Value(Scalar(0x00))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:12: 46:73
                                         // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }
        goto -> bb27;                    // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:12: 46:73
    }

    bb26: {
        StorageLive(_47);                // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:47: 46:73
        StorageLive(_48);                // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:47: 46:50
        _48 = &_42;                      // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:47: 46:50
        StorageLive(_49);                // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:54: 46:73
        StorageLive(_50);                // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:54: 46:73
        _50 = const log::max_level() -> bb29; // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:54: 46:73
                                         // ty::Const
                                         // + ty: fn() -> log::LevelFilter {log::max_level}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:54: 46:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(Scalar(<ZST>)) }
    }

    bb27: {
        StorageDead(_47);                // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:72: 46:73
        StorageDead(_44);                // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:72: 46:73
        switchInt(_43) -> [false: bb31, otherwise: bb32]; // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:9: 52:10
    }

    bb28: {
        StorageDead(_46);                // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:42: 46:43
        StorageDead(_45);                // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:42: 46:43
        switchInt(move _44) -> [false: bb25, otherwise: bb26]; // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:12: 46:73
    }

    bb29: {
        _49 = &_50;                      // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:54: 46:73
        _47 = const <log::Level as core::cmp::PartialOrd<log::LevelFilter>>::le(move _48, move _49) -> bb30; // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:47: 46:73
                                         // ty::Const
                                         // + ty: for<'r, 's> fn(&'r log::Level, &'s log::LevelFilter) -> bool {<log::Level as core::cmp::PartialOrd<log::LevelFilter>>::le}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:47: 46:73
                                         // + literal: Const { ty: for<'r, 's> fn(&'r log::Level, &'s log::LevelFilter) -> bool {<log::Level as core::cmp::PartialOrd<log::LevelFilter>>::le}, val: Value(Scalar(<ZST>)) }
    }

    bb30: {
        StorageDead(_50);                // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:72: 46:73
        StorageDead(_49);                // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:72: 46:73
        StorageDead(_48);                // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:72: 46:73
        switchInt(move _47) -> [false: bb25, otherwise: bb24]; // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:12: 46:73
    }

    bb31: {
        goto -> bb36;                    // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:9: 52:10
    }

    bb32: {
        StorageLive(_51);                // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:47:13: 51:14
        StorageLive(_52);                // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        StorageLive(_53);                // scope 6 at src\main.rs:87:24: 87:64
        StorageLive(_54);                // scope 6 at src\main.rs:87:24: 87:64
        StorageLive(_55);                // scope 6 at src\main.rs:87:24: 87:64
        _96 = const __cortex_m_rt_EXTI9_5::{{closure}}#0::promoted[5]; // scope 6 at src\main.rs:87:24: 87:64
                                         // ty::Const
                                         // + ty: &[&str; 1]
                                         // + val: Unevaluated(DefId(0:79 ~ miscomp_repro[978e]::__cortex_m_rt_EXTI9_5[0]::{{closure}}[0]), [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[5]))
                                         // mir::Constant
                                         // + span: src\main.rs:87:24: 87:64
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(DefId(0:79 ~ miscomp_repro[978e]::__cortex_m_rt_EXTI9_5[0]::{{closure}}[0]), [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[5])) }
        _55 = _96;                       // scope 6 at src\main.rs:87:24: 87:64
        _54 = _55;                       // scope 6 at src\main.rs:87:24: 87:64
        _53 = move _54 as &[&str] (Pointer(Unsize)); // scope 6 at src\main.rs:87:24: 87:64
        StorageDead(_54);                // scope 6 at src\main.rs:87:63: 87:64
        StorageLive(_56);                // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        StorageLive(_57);                // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        StorageLive(_58);                // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        StorageLive(_59);                // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        StorageLive(_60);                // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        StorageLive(_61);                // scope 6 at src\main.rs:87:66: 87:67
        _61 = &_41;                      // scope 6 at src\main.rs:87:66: 87:67
        (_60.0: &stm32h7xx_hal::sdmmc::Error) = move _61; // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        StorageDead(_61);                // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:31: 236:32
        StorageLive(_62);                // scope 6 at src\main.rs:87:66: 87:67
        _62 = (_60.0: &stm32h7xx_hal::sdmmc::Error); // scope 6 at src\main.rs:87:66: 87:67
        StorageLive(_63);                // scope 7 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        StorageLive(_64);                // scope 7 at src\main.rs:87:66: 87:67
        _64 = _62;                       // scope 7 at src\main.rs:87:66: 87:67
        StorageLive(_65);                // scope 7 at src\main.rs:87:66: 87:67
        _65 = const <stm32h7xx_hal::sdmmc::Error as core::fmt::Debug>::fmt as for<'r, 's, 't0> fn(&'r stm32h7xx_hal::sdmmc::Error, &'s mut core::fmt::Formatter<'t0>) -> core::result::Result<(), core::fmt::Error> (Pointer(ReifyFnPointer)); // scope 7 at src\main.rs:87:66: 87:67
                                         // ty::Const
                                         // + ty: for<'r, 's, 't0> fn(&'r stm32h7xx_hal::sdmmc::Error, &'s mut core::fmt::Formatter<'t0>) -> core::result::Result<(), core::fmt::Error> {<stm32h7xx_hal::sdmmc::Error as core::fmt::Debug>::fmt}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:87:66: 87:67
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r stm32h7xx_hal::sdmmc::Error, &'s mut core::fmt::Formatter<'t0>) -> core::result::Result<(), core::fmt::Error> {<stm32h7xx_hal::sdmmc::Error as core::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }
        _63 = const core::fmt::ArgumentV1::new::<stm32h7xx_hal::sdmmc::Error>(move _64, move _65) -> bb33; // scope 7 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
                                         // ty::Const
                                         // + ty: for<'b> fn(&'b stm32h7xx_hal::sdmmc::Error, for<'r, 's, 't0> fn(&'r stm32h7xx_hal::sdmmc::Error, &'s mut core::fmt::Formatter<'t0>) -> core::result::Result<(), core::fmt::Error>) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::new::<stm32h7xx_hal::sdmmc::Error>}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b stm32h7xx_hal::sdmmc::Error, for<'r, 's, 't0> fn(&'r stm32h7xx_hal::sdmmc::Error, &'s mut core::fmt::Formatter<'t0>) -> core::result::Result<(), core::fmt::Error>) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::new::<stm32h7xx_hal::sdmmc::Error>}, val: Value(Scalar(<ZST>)) }
    }

    bb33: {
        StorageDead(_65);                // scope 7 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:31: 236:32
        StorageDead(_64);                // scope 7 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:31: 236:32
        _59 = [move _63];                // scope 7 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        StorageDead(_63);                // scope 7 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:31: 236:32
        StorageDead(_62);                // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:31: 236:32
        _58 = &_59;                      // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        _57 = _58;                       // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        _56 = move _57 as &[core::fmt::ArgumentV1] (Pointer(Unsize)); // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        StorageDead(_57);                // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:31: 236:32
        _52 = const core::fmt::Arguments::new_v1(move _53, move _56) -> bb34; // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
                                         // ty::Const
                                         // + ty: fn(&[&str], &[core::fmt::ArgumentV1]) -> core::fmt::Arguments {core::fmt::Arguments::new_v1}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&[&str], &[core::fmt::ArgumentV1]) -> core::fmt::Arguments {core::fmt::Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
    }

    bb34: {
        StorageDead(_56);                // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:31: 236:32
        StorageDead(_53);                // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:31: 236:32
        StorageLive(_66);                // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:49:17: 49:20
        _66 = _42;                       // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:49:17: 49:20
        StorageLive(_67);                // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:50:17: 50:79
        StorageLive(_68);                // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:50:17: 50:79
        _95 = const __cortex_m_rt_EXTI9_5::{{closure}}#0::promoted[4]; // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:50:17: 50:79
                                         // ty::Const
                                         // + ty: &(&str, &str, &str, u32)
                                         // + val: Unevaluated(DefId(0:79 ~ miscomp_repro[978e]::__cortex_m_rt_EXTI9_5[0]::{{closure}}[0]), [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[4]))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:50:17: 50:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(DefId(0:79 ~ miscomp_repro[978e]::__cortex_m_rt_EXTI9_5[0]::{{closure}}[0]), [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[4])) }
        _68 = _95;                       // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:50:17: 50:79
        _67 = _68;                       // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:50:17: 50:79
        _51 = const log::__private_api_log(move _52, move _66, move _67) -> bb35; // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:47:13: 51:14
                                         // ty::Const
                                         // + ty: for<'r, 's, 't0> fn(core::fmt::Arguments<'r>, log::Level, &'s (&'t0 str, &'static str, &'static str, u32)) {log::__private_api_log}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:47:13: 47:38
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(core::fmt::Arguments<'r>, log::Level, &'s (&'t0 str, &'static str, &'static str, u32)) {log::__private_api_log}, val: Value(Scalar(<ZST>)) }
    }

    bb35: {
        StorageDead(_67);                // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:51:13: 51:14
        StorageDead(_66);                // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:51:13: 51:14
        StorageDead(_52);                // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:51:13: 51:14
        StorageDead(_68);                // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:51:14: 51:15
        StorageDead(_60);                // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:51:14: 51:15
        StorageDead(_59);                // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:51:14: 51:15
        StorageDead(_58);                // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:51:14: 51:15
        StorageDead(_55);                // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:51:14: 51:15
        StorageDead(_51);                // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:51:14: 51:15
        goto -> bb36;                    // scope 6 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:9: 52:10
    }

    bb36: {
        StorageDead(_42);                // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:53:5: 53:6
        StorageDead(_43);                // scope 5 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:53:5: 53:6
        _0 = const ();                   // scope 5 at src\main.rs:86:47: 88:14
                                         // ty::Const
                                         // + ty: ()
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:86:47: 88:14
                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }
        StorageDead(_41);                // scope 2 at src\main.rs:88:13: 88:14
        goto -> bb37;                    // scope 2 at src\main.rs:86:13: 88:14
    }

    bb37: {
        StorageDead(_38);                // scope 2 at src\main.rs:89:9: 89:10
        goto -> bb50;                    // scope 2 at src\main.rs:84:9: 91:10
    }

    bb38: {
        _70 = const true;                // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:73
                                         // ty::Const
                                         // + ty: bool
                                         // + val: Value(Scalar(0x01))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:73
                                         // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }
        goto -> bb41;                    // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:73
    }

    bb39: {
        _70 = const false;               // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:73
                                         // ty::Const
                                         // + ty: bool
                                         // + val: Value(Scalar(0x00))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:73
                                         // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }
        goto -> bb41;                    // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:73
    }

    bb40: {
        StorageLive(_74);                // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:47: 34:73
        StorageLive(_75);                // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:47: 34:50
        _75 = &_69;                      // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:47: 34:50
        StorageLive(_76);                // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:54: 34:73
        StorageLive(_77);                // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:54: 34:73
        _77 = const log::max_level() -> bb43; // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:54: 34:73
                                         // ty::Const
                                         // + ty: fn() -> log::LevelFilter {log::max_level}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:54: 34:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(Scalar(<ZST>)) }
    }

    bb41: {
        StorageDead(_74);                // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:72: 34:73
        StorageDead(_71);                // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:72: 34:73
        switchInt(_70) -> [false: bb45, otherwise: bb46]; // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:9: 42:10
    }

    bb42: {
        StorageDead(_73);                // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:42: 34:43
        StorageDead(_72);                // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:42: 34:43
        switchInt(move _71) -> [false: bb39, otherwise: bb40]; // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:73
    }

    bb43: {
        _76 = &_77;                      // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:54: 34:73
        _74 = const <log::Level as core::cmp::PartialOrd<log::LevelFilter>>::le(move _75, move _76) -> bb44; // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:47: 34:73
                                         // ty::Const
                                         // + ty: for<'r, 's> fn(&'r log::Level, &'s log::LevelFilter) -> bool {<log::Level as core::cmp::PartialOrd<log::LevelFilter>>::le}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:47: 34:73
                                         // + literal: Const { ty: for<'r, 's> fn(&'r log::Level, &'s log::LevelFilter) -> bool {<log::Level as core::cmp::PartialOrd<log::LevelFilter>>::le}, val: Value(Scalar(<ZST>)) }
    }

    bb44: {
        StorageDead(_77);                // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:72: 34:73
        StorageDead(_76);                // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:72: 34:73
        StorageDead(_75);                // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:72: 34:73
        switchInt(move _74) -> [false: bb39, otherwise: bb38]; // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:12: 34:73
    }

    bb45: {
        goto -> bb49;                    // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:9: 42:10
    }

    bb46: {
        StorageLive(_78);                // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        StorageLive(_79);                // scope 8 at src\main.rs:90:19: 90:41
        StorageLive(_80);                // scope 8 at src\main.rs:90:19: 90:41
        StorageLive(_81);                // scope 8 at src\main.rs:90:19: 90:41
        _93 = const __cortex_m_rt_EXTI9_5::{{closure}}#0::promoted[2]; // scope 8 at src\main.rs:90:19: 90:41
                                         // ty::Const
                                         // + ty: &[&str; 1]
                                         // + val: Unevaluated(DefId(0:79 ~ miscomp_repro[978e]::__cortex_m_rt_EXTI9_5[0]::{{closure}}[0]), [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[2]))
                                         // mir::Constant
                                         // + span: src\main.rs:90:19: 90:41
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(DefId(0:79 ~ miscomp_repro[978e]::__cortex_m_rt_EXTI9_5[0]::{{closure}}[0]), [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[2])) }
        _81 = _93;                       // scope 8 at src\main.rs:90:19: 90:41
        _80 = _81;                       // scope 8 at src\main.rs:90:19: 90:41
        _79 = move _80 as &[&str] (Pointer(Unsize)); // scope 8 at src\main.rs:90:19: 90:41
        StorageDead(_80);                // scope 8 at src\main.rs:90:40: 90:41
        StorageLive(_82);                // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        StorageLive(_83);                // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        StorageLive(_84);                // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        _92 = const __cortex_m_rt_EXTI9_5::{{closure}}#0::promoted[1]; // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
                                         // ty::Const
                                         // + ty: &[core::fmt::ArgumentV1; 0]
                                         // + val: Unevaluated(DefId(0:79 ~ miscomp_repro[978e]::__cortex_m_rt_EXTI9_5[0]::{{closure}}[0]), [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[1]))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
                                         // + literal: Const { ty: &[core::fmt::ArgumentV1; 0], val: Unevaluated(DefId(0:79 ~ miscomp_repro[978e]::__cortex_m_rt_EXTI9_5[0]::{{closure}}[0]), [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[1])) }
        _84 = _92;                       // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        _83 = _84;                       // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        _82 = move _83 as &[core::fmt::ArgumentV1] (Pointer(Unsize)); // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        StorageDead(_83);                // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:31: 236:32
        _78 = const core::fmt::Arguments::new_v1(move _79, move _82) -> bb47; // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
                                         // ty::Const
                                         // + ty: fn(&[&str], &[core::fmt::ArgumentV1]) -> core::fmt::Arguments {core::fmt::Arguments::new_v1}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(&[&str], &[core::fmt::ArgumentV1]) -> core::fmt::Arguments {core::fmt::Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
    }

    bb47: {
        StorageDead(_82);                // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:31: 236:32
        StorageDead(_79);                // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:31: 236:32
        StorageDead(_84);                // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:36:49: 36:50
        StorageDead(_81);                // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:36:49: 36:50
        StorageDead(_78);                // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:36:49: 36:50
        StorageLive(_85);                // scope 9 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:37:13: 41:14
        StorageLive(_86);                // scope 9 at src\main.rs:90:19: 90:41
        StorageLive(_87);                // scope 9 at src\main.rs:90:19: 90:41
        _87 = const "MicroSD card removed"; // scope 9 at src\main.rs:90:19: 90:41
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [77, 105, 99, 114, 111, 83, 68, 32, 99, 97, 114, 100, 32, 114, 101, 109, 111, 118, 101, 100], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1048575], len: Size { raw: 20 } }, size: Size { raw: 20 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 20 })
                                         // mir::Constant
                                         // + span: src\main.rs:90:19: 90:41
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [77, 105, 99, 114, 111, 83, 68, 32, 99, 97, 114, 100, 32, 114, 101, 109, 111, 118, 101, 100], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1048575], len: Size { raw: 20 } }, size: Size { raw: 20 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 20 }) }
        _86 = _87;                       // scope 9 at src\main.rs:90:19: 90:41
        StorageLive(_88);                // scope 9 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:39:17: 39:20
        _88 = _69;                       // scope 9 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:39:17: 39:20
        StorageLive(_89);                // scope 9 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:17: 40:79
        StorageLive(_90);                // scope 9 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:17: 40:79
        _91 = const __cortex_m_rt_EXTI9_5::{{closure}}#0::promoted[0]; // scope 9 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:17: 40:79
                                         // ty::Const
                                         // + ty: &(&str, &str, &str, u32)
                                         // + val: Unevaluated(DefId(0:79 ~ miscomp_repro[978e]::__cortex_m_rt_EXTI9_5[0]::{{closure}}[0]), [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0]))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(DefId(0:79 ~ miscomp_repro[978e]::__cortex_m_rt_EXTI9_5[0]::{{closure}}[0]), [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _90 = _91;                       // scope 9 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:17: 40:79
        _89 = _90;                       // scope 9 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:17: 40:79
        _85 = const log::__private_api_log_lit(move _86, move _88, move _89) -> bb48; // scope 9 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:37:13: 41:14
                                         // ty::Const
                                         // + ty: for<'r, 's, 't0> fn(&'r str, log::Level, &'s (&'t0 str, &'static str, &'static str, u32)) {log::__private_api_log_lit}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:37:13: 37:42
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r str, log::Level, &'s (&'t0 str, &'static str, &'static str, u32)) {log::__private_api_log_lit}, val: Value(Scalar(<ZST>)) }
    }

    bb48: {
        StorageDead(_89);                // scope 9 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:41:13: 41:14
        StorageDead(_88);                // scope 9 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:41:13: 41:14
        StorageDead(_86);                // scope 9 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:41:13: 41:14
        StorageDead(_90);                // scope 9 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:41:14: 41:15
        StorageDead(_87);                // scope 9 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:41:14: 41:15
        StorageDead(_85);                // scope 9 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:41:14: 41:15
        goto -> bb49;                    // scope 8 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:9: 42:10
    }

    bb49: {
        StorageDead(_69);                // scope 2 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:43:5: 43:6
        StorageDead(_70);                // scope 2 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:43:5: 43:6
        _0 = const ();                   // scope 2 at src\main.rs:89:16: 91:10
                                         // ty::Const
                                         // + ty: ()
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:89:16: 91:10
                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }
        goto -> bb50;                    // scope 2 at src\main.rs:84:9: 91:10
    }

    bb50: {
        StorageDead(_9);                 // scope 1 at src\main.rs:92:5: 92:6
        drop(_3) -> bb51;                // scope 0 at src\main.rs:92:5: 92:6
    }

    bb51: {
        StorageDead(_3);                 // scope 0 at src\main.rs:92:5: 92:6
        StorageDead(_14);                // scope 0 at src\main.rs:92:5: 92:6
        return;                          // scope 0 at src\main.rs:92:6: 92:6
    }
}

alloc1 (static: SDMMC, size: 160, align: 8) {
    0x00 │ 00 00 00 00 __ __ __ __ __ __ __ __ __ __ __ __ │ ....░░░░░░░░░░░░
    0x10 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x20 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x30 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x40 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x50 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x60 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x70 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x80 │ __ __ __ __ __ __ __ __ 03 __ __ __ __ __ __ __ │ ░░░░░░░░.░░░░░░░
    0x90 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
}

promoted[0] in __cortex_m_rt_EXTI9_5::{{closure}}#0: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:244:9: 244:23
    let mut _3: &str;                    // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:244:9: 244:23
    scope 1 {
        scope 2 {
            scope 3 {
                scope 4 {
                }
            }
            scope 5 {
                scope 6 {
                    scope 7 {
                    }
                }
            }
            scope 8 {
                scope 9 {
                }
            }
        }
    }

    bb0: {
        _3 = const "miscomp_repro";      // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:244:9: 244:23
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [109, 105, 115, 99, 111, 109, 112, 95, 114, 101, 112, 114, 111], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8191], len: Size { raw: 13 } }, size: Size { raw: 13 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 13 })
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:244:9: 244:23
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [109, 105, 115, 99, 111, 109, 112, 95, 114, 101, 112, 114, 111], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8191], len: Size { raw: 13 } }, size: Size { raw: 13 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 13 }) }
        _2 = _3;                         // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:244:9: 244:23
        (_1.0: &str) = move _2;          // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:18: 40:79
        (_1.1: &str) = const "miscomp_repro"; // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:18: 40:79
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [109, 105, 115, 99, 111, 109, 112, 95, 114, 101, 112, 114, 111], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8191], len: Size { raw: 13 } }, size: Size { raw: 13 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 13 })
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:244:9: 244:23
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [109, 105, 115, 99, 111, 109, 112, 95, 114, 101, 112, 114, 111], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8191], len: Size { raw: 13 } }, size: Size { raw: 13 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 13 }) }
        (_1.2: &str) = const "src\\main.rs"; // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:18: 40:79
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [115, 114, 99, 92, 109, 97, 105, 110, 46, 114, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2047], len: Size { raw: 11 } }, size: Size { raw: 11 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 11 })
                                         // mir::Constant
                                         // + span: src\main.rs:90:13: 90:43
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [115, 114, 99, 92, 109, 97, 105, 110, 46, 114, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2047], len: Size { raw: 11 } }, size: Size { raw: 11 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 11 }) }
        (_1.3: u32) = const 90_u32;      // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:18: 40:79
                                         // ty::Const
                                         // + ty: u32
                                         // + val: Value(Scalar(0x0000005a))
                                         // mir::Constant
                                         // + span: src\main.rs:90:13: 90:43
                                         // + literal: Const { ty: u32, val: Value(Scalar(0x0000005a)) }
        _0 = &_1;                        // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:17: 40:79
        return;                          // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:17: 40:79
    }
}

promoted[1] in __cortex_m_rt_EXTI9_5::{{closure}}#0: &[core::fmt::ArgumentV1; 0] = {
    let mut _0: &[core::fmt::ArgumentV1; 0]; // return place in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
    let mut _1: [core::fmt::ArgumentV1; 0]; // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
    scope 1 {
        scope 2 {
            scope 3 {
                scope 4 {
                }
            }
            scope 5 {
                scope 6 {
                    scope 7 {
                    }
                }
            }
            scope 8 {
                scope 9 {
                }
            }
        }
    }

    bb0: {
        _1 = [];                         // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        _0 = &_1;                        // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        return;                          // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
    }
}

promoted[2] in __cortex_m_rt_EXTI9_5::{{closure}}#0: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at src\main.rs:90:19: 90:41
    let mut _1: [&str; 1];               // in scope 0 at src\main.rs:90:19: 90:41
    let mut _2: &str;                    // in scope 0 at src\main.rs:90:19: 90:41
    let mut _3: &str;                    // in scope 0 at src\main.rs:90:19: 90:41
    scope 1 {
        scope 2 {
            scope 3 {
                scope 4 {
                }
            }
            scope 5 {
                scope 6 {
                    scope 7 {
                    }
                }
            }
            scope 8 {
                scope 9 {
                }
            }
        }
    }

    bb0: {
        _3 = const "MicroSD card removed"; // scope 0 at src\main.rs:90:19: 90:41
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [77, 105, 99, 114, 111, 83, 68, 32, 99, 97, 114, 100, 32, 114, 101, 109, 111, 118, 101, 100], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1048575], len: Size { raw: 20 } }, size: Size { raw: 20 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 20 })
                                         // mir::Constant
                                         // + span: src\main.rs:90:19: 90:41
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [77, 105, 99, 114, 111, 83, 68, 32, 99, 97, 114, 100, 32, 114, 101, 109, 111, 118, 101, 100], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1048575], len: Size { raw: 20 } }, size: Size { raw: 20 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 20 }) }
        _2 = _3;                         // scope 0 at src\main.rs:90:19: 90:41
        _1 = [move _2];                  // scope 0 at src\main.rs:90:19: 90:41
        _0 = &_1;                        // scope 0 at src\main.rs:90:19: 90:41
        return;                          // scope 0 at src\main.rs:90:19: 90:41
    }
}

promoted[3] in __cortex_m_rt_EXTI9_5::{{closure}}#0: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:19: 34:43
    let mut _1: log::LevelFilter;        // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:19: 34:43
    scope 1 {
        scope 2 {
            scope 3 {
                scope 4 {
                }
            }
            scope 5 {
                scope 6 {
                    scope 7 {
                    }
                }
            }
            scope 8 {
                scope 9 {
                }
            }
        }
    }

    bb0: {
        _1 = const log::STATIC_MAX_LEVEL; // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:19: 34:43
                                         // ty::Const
                                         // + ty: log::LevelFilter
                                         // + val: Unevaluated(DefId(18:171 ~ log[9998]::STATIC_MAX_LEVEL[0]), [], None)
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:19: 34:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(DefId(18:171 ~ log[9998]::STATIC_MAX_LEVEL[0]), [], None) }
        _0 = &_1;                        // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:19: 34:43
        return;                          // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:19: 34:43
    }
}

promoted[4] in __cortex_m_rt_EXTI9_5::{{closure}}#0: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:50:17: 50:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:50:18: 50:79
    let mut _2: &str;                    // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:244:9: 244:23
    let mut _3: &str;                    // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:244:9: 244:23
    scope 1 {
        scope 2 {
            scope 3 {
                scope 4 {
                }
            }
            scope 5 {
                scope 6 {
                    scope 7 {
                    }
                }
            }
            scope 8 {
                scope 9 {
                }
            }
        }
    }

    bb0: {
        _3 = const "miscomp_repro";      // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:244:9: 244:23
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [109, 105, 115, 99, 111, 109, 112, 95, 114, 101, 112, 114, 111], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8191], len: Size { raw: 13 } }, size: Size { raw: 13 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 13 })
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:244:9: 244:23
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [109, 105, 115, 99, 111, 109, 112, 95, 114, 101, 112, 114, 111], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8191], len: Size { raw: 13 } }, size: Size { raw: 13 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 13 }) }
        _2 = _3;                         // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:244:9: 244:23
        (_1.0: &str) = move _2;          // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:50:18: 50:79
        (_1.1: &str) = const "miscomp_repro"; // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:50:18: 50:79
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [109, 105, 115, 99, 111, 109, 112, 95, 114, 101, 112, 114, 111], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8191], len: Size { raw: 13 } }, size: Size { raw: 13 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 13 })
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:244:9: 244:23
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [109, 105, 115, 99, 111, 109, 112, 95, 114, 101, 112, 114, 111], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8191], len: Size { raw: 13 } }, size: Size { raw: 13 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 13 }) }
        (_1.2: &str) = const "src\\main.rs"; // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:50:18: 50:79
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [115, 114, 99, 92, 109, 97, 105, 110, 46, 114, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2047], len: Size { raw: 11 } }, size: Size { raw: 11 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 11 })
                                         // mir::Constant
                                         // + span: src\main.rs:87:17: 87:69
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [115, 114, 99, 92, 109, 97, 105, 110, 46, 114, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2047], len: Size { raw: 11 } }, size: Size { raw: 11 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 11 }) }
        (_1.3: u32) = const 87_u32;      // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:50:18: 50:79
                                         // ty::Const
                                         // + ty: u32
                                         // + val: Value(Scalar(0x00000057))
                                         // mir::Constant
                                         // + span: src\main.rs:87:17: 87:69
                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000057)) }
        _0 = &_1;                        // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:50:17: 50:79
        return;                          // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:50:17: 50:79
    }
}

promoted[5] in __cortex_m_rt_EXTI9_5::{{closure}}#0: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at src\main.rs:87:24: 87:64
    let mut _1: [&str; 1];               // in scope 0 at src\main.rs:87:24: 87:64
    let mut _2: &str;                    // in scope 0 at src\main.rs:87:24: 87:64
    let mut _3: &str;                    // in scope 0 at src\main.rs:87:24: 87:64
    scope 1 {
        scope 2 {
            scope 3 {
                scope 4 {
                }
            }
            scope 5 {
                scope 6 {
                    scope 7 {
                    }
                }
            }
            scope 8 {
                scope 9 {
                }
            }
        }
    }

    bb0: {
        _3 = const "Error connecting to MicroSD card: "; // scope 0 at src\main.rs:87:24: 87:64
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [69, 114, 114, 111, 114, 32, 99, 111, 110, 110, 101, 99, 116, 105, 110, 103, 32, 116, 111, 32, 77, 105, 99, 114, 111, 83, 68, 32, 99, 97, 114, 100, 58, 32], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [17179869183], len: Size { raw: 34 } }, size: Size { raw: 34 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 34 })
                                         // mir::Constant
                                         // + span: src\main.rs:87:24: 87:64
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [69, 114, 114, 111, 114, 32, 99, 111, 110, 110, 101, 99, 116, 105, 110, 103, 32, 116, 111, 32, 77, 105, 99, 114, 111, 83, 68, 32, 99, 97, 114, 100, 58, 32], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [17179869183], len: Size { raw: 34 } }, size: Size { raw: 34 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 34 }) }
        _2 = _3;                         // scope 0 at src\main.rs:87:24: 87:64
        _1 = [move _2];                  // scope 0 at src\main.rs:87:24: 87:64
        _0 = &_1;                        // scope 0 at src\main.rs:87:24: 87:64
        return;                          // scope 0 at src\main.rs:87:24: 87:64
    }
}

promoted[6] in __cortex_m_rt_EXTI9_5::{{closure}}#0: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:19: 46:43
    let mut _1: log::LevelFilter;        // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:19: 46:43
    scope 1 {
        scope 2 {
            scope 3 {
                scope 4 {
                }
            }
            scope 5 {
                scope 6 {
                    scope 7 {
                    }
                }
            }
            scope 8 {
                scope 9 {
                }
            }
        }
    }

    bb0: {
        _1 = const log::STATIC_MAX_LEVEL; // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:19: 46:43
                                         // ty::Const
                                         // + ty: log::LevelFilter
                                         // + val: Unevaluated(DefId(18:171 ~ log[9998]::STATIC_MAX_LEVEL[0]), [], None)
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:19: 46:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(DefId(18:171 ~ log[9998]::STATIC_MAX_LEVEL[0]), [], None) }
        _0 = &_1;                        // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:19: 46:43
        return;                          // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:46:19: 46:43
    }
}

promoted[7] in __cortex_m_rt_EXTI9_5::{{closure}}#0: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:244:9: 244:23
    let mut _3: &str;                    // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:244:9: 244:23
    scope 1 {
        scope 2 {
            scope 3 {
                scope 4 {
                }
            }
            scope 5 {
                scope 6 {
                    scope 7 {
                    }
                }
            }
            scope 8 {
                scope 9 {
                }
            }
        }
    }

    bb0: {
        _3 = const "miscomp_repro";      // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:244:9: 244:23
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [109, 105, 115, 99, 111, 109, 112, 95, 114, 101, 112, 114, 111], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8191], len: Size { raw: 13 } }, size: Size { raw: 13 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 13 })
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:244:9: 244:23
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [109, 105, 115, 99, 111, 109, 112, 95, 114, 101, 112, 114, 111], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8191], len: Size { raw: 13 } }, size: Size { raw: 13 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 13 }) }
        _2 = _3;                         // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:244:9: 244:23
        (_1.0: &str) = move _2;          // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:18: 40:79
        (_1.1: &str) = const "miscomp_repro"; // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:18: 40:79
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [109, 105, 115, 99, 111, 109, 112, 95, 114, 101, 112, 114, 111], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8191], len: Size { raw: 13 } }, size: Size { raw: 13 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 13 })
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:244:9: 244:23
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [109, 105, 115, 99, 111, 109, 112, 95, 114, 101, 112, 114, 111], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8191], len: Size { raw: 13 } }, size: Size { raw: 13 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 13 }) }
        (_1.2: &str) = const "src\\main.rs"; // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:18: 40:79
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [115, 114, 99, 92, 109, 97, 105, 110, 46, 114, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2047], len: Size { raw: 11 } }, size: Size { raw: 11 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 11 })
                                         // mir::Constant
                                         // + span: src\main.rs:85:13: 85:44
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [115, 114, 99, 92, 109, 97, 105, 110, 46, 114, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2047], len: Size { raw: 11 } }, size: Size { raw: 11 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 11 }) }
        (_1.3: u32) = const 85_u32;      // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:18: 40:79
                                         // ty::Const
                                         // + ty: u32
                                         // + val: Value(Scalar(0x00000055))
                                         // mir::Constant
                                         // + span: src\main.rs:85:13: 85:44
                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000055)) }
        _0 = &_1;                        // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:17: 40:79
        return;                          // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:40:17: 40:79
    }
}

promoted[8] in __cortex_m_rt_EXTI9_5::{{closure}}#0: &[core::fmt::ArgumentV1; 0] = {
    let mut _0: &[core::fmt::ArgumentV1; 0]; // return place in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
    let mut _1: [core::fmt::ArgumentV1; 0]; // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
    scope 1 {
        scope 2 {
            scope 3 {
                scope 4 {
                }
            }
            scope 5 {
                scope 6 {
                    scope 7 {
                    }
                }
            }
            scope 8 {
                scope 9 {
                }
            }
        }
    }

    bb0: {
        _1 = [];                         // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        _0 = &_1;                        // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
        return;                          // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:236:9: 236:32
    }
}

promoted[9] in __cortex_m_rt_EXTI9_5::{{closure}}#0: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at src\main.rs:85:19: 85:42
    let mut _1: [&str; 1];               // in scope 0 at src\main.rs:85:19: 85:42
    let mut _2: &str;                    // in scope 0 at src\main.rs:85:19: 85:42
    let mut _3: &str;                    // in scope 0 at src\main.rs:85:19: 85:42
    scope 1 {
        scope 2 {
            scope 3 {
                scope 4 {
                }
            }
            scope 5 {
                scope 6 {
                    scope 7 {
                    }
                }
            }
            scope 8 {
                scope 9 {
                }
            }
        }
    }

    bb0: {
        _3 = const "MicroSD card inserted"; // scope 0 at src\main.rs:85:19: 85:42
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [77, 105, 99, 114, 111, 83, 68, 32, 99, 97, 114, 100, 32, 105, 110, 115, 101, 114, 116, 101, 100], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2097151], len: Size { raw: 21 } }, size: Size { raw: 21 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 21 })
                                         // mir::Constant
                                         // + span: src\main.rs:85:19: 85:42
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [77, 105, 99, 114, 111, 83, 68, 32, 99, 97, 114, 100, 32, 105, 110, 115, 101, 114, 116, 101, 100], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2097151], len: Size { raw: 21 } }, size: Size { raw: 21 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 21 }) }
        _2 = _3;                         // scope 0 at src\main.rs:85:19: 85:42
        _1 = [move _2];                  // scope 0 at src\main.rs:85:19: 85:42
        _0 = &_1;                        // scope 0 at src\main.rs:85:19: 85:42
        return;                          // scope 0 at src\main.rs:85:19: 85:42
    }
}

promoted[10] in __cortex_m_rt_EXTI9_5::{{closure}}#0: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:19: 34:43
    let mut _1: log::LevelFilter;        // in scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:19: 34:43
    scope 1 {
        scope 2 {
            scope 3 {
                scope 4 {
                }
            }
            scope 5 {
                scope 6 {
                    scope 7 {
                    }
                }
            }
            scope 8 {
                scope 9 {
                }
            }
        }
    }

    bb0: {
        _1 = const log::STATIC_MAX_LEVEL; // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:19: 34:43
                                         // ty::Const
                                         // + ty: log::LevelFilter
                                         // + val: Unevaluated(DefId(18:171 ~ log[9998]::STATIC_MAX_LEVEL[0]), [], None)
                                         // mir::Constant
                                         // + span: C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:19: 34:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(DefId(18:171 ~ log[9998]::STATIC_MAX_LEVEL[0]), [], None) }
        _0 = &_1;                        // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:19: 34:43
        return;                          // scope 0 at C:\Users\matth\.cargo\registry\src\github.com-1ecc6299db9ec823\log-0.4.11\src\macros.rs:34:19: 34:43
    }
}

fn __cortex_m_rt_EXTI9_5_trampoline() -> () {
    let mut _0: ();                      // return place in scope 0 at src\main.rs:79:1: 79:1

    bb0: {
        _0 = const __cortex_m_rt_EXTI9_5() -> bb1; // scope 0 at src\main.rs:79:1: 79:13
                                         // ty::Const
                                         // + ty: fn() {__cortex_m_rt_EXTI9_5}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:79:1: 79:13
                                         // + literal: Const { ty: fn() {__cortex_m_rt_EXTI9_5}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at src\main.rs:79:13: 79:13
    }
}

fn __cortex_m_rt_main_trampoline() -> () {
    let mut _0: ();                      // return place in scope 0 at src\main.rs:19:1: 19:1

    bb0: {
        const __cortex_m_rt_main();      // scope 0 at src\main.rs:19:1: 19:9
                                         // ty::Const
                                         // + ty: fn() -> ! {__cortex_m_rt_main}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\main.rs:19:1: 19:9
                                         // + literal: Const { ty: fn() -> ! {__cortex_m_rt_main}, val: Value(Scalar(<ZST>)) }
    }
}

fn sdmmc::<impl at src\sdmmc.rs:11:1: 70:2>::new(_1: stm32h7xx_hal::gpio::gpioc::PC12<stm32h7xx_hal::gpio::Analog>, _2: stm32h7xx_hal::gpio::gpiod::PD2<stm32h7xx_hal::gpio::Analog>, _3: stm32h7xx_hal::gpio::gpioc::PC8<stm32h7xx_hal::gpio::Analog>, _4: stm32h7xx_hal::gpio::gpioc::PC9<stm32h7xx_hal::gpio::Analog>, _5: stm32h7xx_hal::gpio::gpioc::PC10<stm32h7xx_hal::gpio::Analog>, _6: stm32h7xx_hal::gpio::gpioc::PC11<stm32h7xx_hal::gpio::Analog>, _7: stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Analog>, _8: stm32h7xx_hal::gpio::gpioa::PA11<stm32h7xx_hal::gpio::Analog>, _9: stm32h7xx_hal::stm32::SDMMC1, _10: stm32h7xx_hal::rcc::rec::Sdmmc1, _11: &mut stm32h7xx_hal::stm32::SYSCFG, _12: &mut stm32h7xx_hal::stm32::EXTI, _13: &stm32h7xx_hal::rcc::CoreClocks) -> sdmmc::Sdmmc {
    debug clk => _1;                     // in scope 0 at src\sdmmc.rs:13:9: 13:12
    debug cmd => _2;                     // in scope 0 at src\sdmmc.rs:14:9: 14:12
    debug d0 => _3;                      // in scope 0 at src\sdmmc.rs:15:9: 15:11
    debug d1 => _4;                      // in scope 0 at src\sdmmc.rs:16:9: 16:11
    debug d2 => _5;                      // in scope 0 at src\sdmmc.rs:17:9: 17:11
    debug d3 => _6;                      // in scope 0 at src\sdmmc.rs:18:9: 18:11
    debug detect => _7;                  // in scope 0 at src\sdmmc.rs:19:9: 19:15
    debug led => _8;                     // in scope 0 at src\sdmmc.rs:20:9: 20:12
    debug sdmmc => _9;                   // in scope 0 at src\sdmmc.rs:21:9: 21:14
    debug sdprec => _10;                 // in scope 0 at src\sdmmc.rs:22:9: 22:15
    debug syscfg => _11;                 // in scope 0 at src\sdmmc.rs:23:9: 23:15
    debug exti => _12;                   // in scope 0 at src\sdmmc.rs:24:9: 24:13
    debug clocks => _13;                 // in scope 0 at src\sdmmc.rs:25:9: 25:15
    let mut _0: sdmmc::Sdmmc;            // return place in scope 0 at src\sdmmc.rs:26:10: 26:14
    let _14: stm32h7xx_hal::gpio::gpioc::PC12<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>; // in scope 0 at src\sdmmc.rs:27:13: 27:16
    let mut _15: stm32h7xx_hal::gpio::gpioc::PC12<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>; // in scope 0 at src\sdmmc.rs:27:19: 27:44
    let mut _16: stm32h7xx_hal::gpio::gpioc::PC12<stm32h7xx_hal::gpio::Analog>; // in scope 0 at src\sdmmc.rs:27:19: 27:22
    let mut _17: stm32h7xx_hal::gpio::Speed; // in scope 0 at src\sdmmc.rs:27:55: 27:70
    let mut _19: stm32h7xx_hal::gpio::gpiod::PD2<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>; // in scope 0 at src\sdmmc.rs:28:19: 28:44
    let mut _20: stm32h7xx_hal::gpio::gpiod::PD2<stm32h7xx_hal::gpio::Analog>; // in scope 0 at src\sdmmc.rs:28:19: 28:22
    let mut _21: stm32h7xx_hal::gpio::Speed; // in scope 0 at src\sdmmc.rs:28:55: 28:70
    let mut _23: stm32h7xx_hal::gpio::gpioc::PC8<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>; // in scope 0 at src\sdmmc.rs:29:18: 29:42
    let mut _24: stm32h7xx_hal::gpio::gpioc::PC8<stm32h7xx_hal::gpio::Analog>; // in scope 0 at src\sdmmc.rs:29:18: 29:20
    let mut _25: stm32h7xx_hal::gpio::Speed; // in scope 0 at src\sdmmc.rs:29:53: 29:68
    let mut _27: stm32h7xx_hal::gpio::gpioc::PC9<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>; // in scope 0 at src\sdmmc.rs:30:18: 30:42
    let mut _28: stm32h7xx_hal::gpio::gpioc::PC9<stm32h7xx_hal::gpio::Analog>; // in scope 0 at src\sdmmc.rs:30:18: 30:20
    let mut _29: stm32h7xx_hal::gpio::Speed; // in scope 0 at src\sdmmc.rs:30:53: 30:68
    let mut _31: stm32h7xx_hal::gpio::gpioc::PC10<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>; // in scope 0 at src\sdmmc.rs:31:18: 31:42
    let mut _32: stm32h7xx_hal::gpio::gpioc::PC10<stm32h7xx_hal::gpio::Analog>; // in scope 0 at src\sdmmc.rs:31:18: 31:20
    let mut _33: stm32h7xx_hal::gpio::Speed; // in scope 0 at src\sdmmc.rs:31:53: 31:68
    let mut _35: stm32h7xx_hal::gpio::gpioc::PC11<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>; // in scope 0 at src\sdmmc.rs:32:18: 32:42
    let mut _36: stm32h7xx_hal::gpio::gpioc::PC11<stm32h7xx_hal::gpio::Analog>; // in scope 0 at src\sdmmc.rs:32:18: 32:20
    let mut _37: stm32h7xx_hal::gpio::Speed; // in scope 0 at src\sdmmc.rs:32:53: 32:68
    let mut _39: stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Analog>; // in scope 0 at src\sdmmc.rs:34:26: 34:32
    let _40: ();                         // in scope 0 at src\sdmmc.rs:35:9: 35:45
    let mut _41: &mut stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>>; // in scope 0 at src\sdmmc.rs:35:9: 35:15
    let mut _42: &mut stm32h7xx_hal::stm32::SYSCFG; // in scope 0 at src\sdmmc.rs:35:38: 35:44
    let _43: ();                         // in scope 0 at src\sdmmc.rs:36:9: 36:59
    let mut _44: &mut stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>>; // in scope 0 at src\sdmmc.rs:36:9: 36:15
    let mut _45: &mut stm32h7xx_hal::stm32::EXTI; // in scope 0 at src\sdmmc.rs:36:32: 36:36
    let mut _46: stm32h7xx_hal::gpio::Edge; // in scope 0 at src\sdmmc.rs:36:38: 36:58
    let _47: ();                         // in scope 0 at src\sdmmc.rs:37:9: 37:38
    let mut _48: &mut stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>>; // in scope 0 at src\sdmmc.rs:37:9: 37:15
    let mut _49: &mut stm32h7xx_hal::stm32::EXTI; // in scope 0 at src\sdmmc.rs:37:33: 37:37
    let mut _51: stm32h7xx_hal::gpio::gpioa::PA11<stm32h7xx_hal::gpio::Analog>; // in scope 0 at src\sdmmc.rs:39:23: 39:26
    let _52: ();                         // in scope 0 at src\sdmmc.rs:40:9: 40:32
    let mut _53: core::result::Result<(), stm32h7xx_hal::Never>; // in scope 0 at src\sdmmc.rs:40:9: 40:23
    let mut _54: &mut stm32h7xx_hal::gpio::gpioa::PA11<stm32h7xx_hal::gpio::Output<stm32h7xx_hal::gpio::OpenDrain>>; // in scope 0 at src\sdmmc.rs:40:9: 40:12
    let mut _56: stm32h7xx_hal::stm32::SDMMC1; // in scope 0 at src\sdmmc.rs:42:21: 42:26
    let mut _57: (stm32h7xx_hal::gpio::gpioc::PC12<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>, stm32h7xx_hal::gpio::gpiod::PD2<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>, stm32h7xx_hal::gpio::gpioc::PC8<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>, stm32h7xx_hal::gpio::gpioc::PC9<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>, stm32h7xx_hal::gpio::gpioc::PC10<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>, stm32h7xx_hal::gpio::gpioc::PC11<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>); // in scope 0 at src\sdmmc.rs:42:33: 42:59
    let mut _58: stm32h7xx_hal::rcc::rec::Sdmmc1; // in scope 0 at src\sdmmc.rs:42:61: 42:67
    let mut _59: &stm32h7xx_hal::rcc::CoreClocks; // in scope 0 at src\sdmmc.rs:42:69: 42:75
    let mut _60: stm32h7xx_hal::sdmmc::Sdmmc<stm32h7xx_hal::stm32::SDMMC1>; // in scope 0 at src\sdmmc.rs:44:17: 44:22
    let mut _61: stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>>; // in scope 0 at src\sdmmc.rs:44:24: 44:30
    let mut _62: stm32h7xx_hal::gpio::gpioa::PA11<stm32h7xx_hal::gpio::Output<stm32h7xx_hal::gpio::OpenDrain>>; // in scope 0 at src\sdmmc.rs:44:32: 44:35
    scope 1 {
        debug clk => _14;                // in scope 1 at src\sdmmc.rs:27:13: 27:16
        let _18: stm32h7xx_hal::gpio::gpiod::PD2<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>; // in scope 1 at src\sdmmc.rs:28:13: 28:16
        scope 2 {
            debug cmd => _18;            // in scope 2 at src\sdmmc.rs:28:13: 28:16
            let _22: stm32h7xx_hal::gpio::gpioc::PC8<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>; // in scope 2 at src\sdmmc.rs:29:13: 29:15
            scope 3 {
                debug d0 => _22;         // in scope 3 at src\sdmmc.rs:29:13: 29:15
                let _26: stm32h7xx_hal::gpio::gpioc::PC9<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>; // in scope 3 at src\sdmmc.rs:30:13: 30:15
                scope 4 {
                    debug d1 => _26;     // in scope 4 at src\sdmmc.rs:30:13: 30:15
                    let _30: stm32h7xx_hal::gpio::gpioc::PC10<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>; // in scope 4 at src\sdmmc.rs:31:13: 31:15
                    scope 5 {
                        debug d2 => _30; // in scope 5 at src\sdmmc.rs:31:13: 31:15
                        let _34: stm32h7xx_hal::gpio::gpioc::PC11<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>; // in scope 5 at src\sdmmc.rs:32:13: 32:15
                        scope 6 {
                            debug d3 => _34; // in scope 6 at src\sdmmc.rs:32:13: 32:15
                            let mut _38: stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>>; // in scope 6 at src\sdmmc.rs:34:13: 34:23
                            scope 7 {
                                debug detect => _38; // in scope 7 at src\sdmmc.rs:34:13: 34:23
                                let mut _50: stm32h7xx_hal::gpio::gpioa::PA11<stm32h7xx_hal::gpio::Output<stm32h7xx_hal::gpio::OpenDrain>>; // in scope 7 at src\sdmmc.rs:39:13: 39:20
                                scope 8 {
                                    debug led => _50; // in scope 8 at src\sdmmc.rs:39:13: 39:20
                                    let _55: stm32h7xx_hal::sdmmc::Sdmmc<stm32h7xx_hal::stm32::SDMMC1>; // in scope 8 at src\sdmmc.rs:42:13: 42:18
                                    scope 9 {
                                        debug sdmmc => _55; // in scope 9 at src\sdmmc.rs:42:13: 42:18
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_14);                // scope 0 at src\sdmmc.rs:27:13: 27:16
        StorageLive(_15);                // scope 0 at src\sdmmc.rs:27:19: 27:44
        StorageLive(_16);                // scope 0 at src\sdmmc.rs:27:19: 27:22
        _16 = const stm32h7xx_hal::gpio::gpioc::PC12::<stm32h7xx_hal::gpio::Analog> { _mode: core::marker::PhantomData::<stm32h7xx_hal::gpio::Analog> }; // scope 0 at src\sdmmc.rs:27:19: 27:22
                                         // ty::Const
                                         // + ty: stm32h7xx_hal::gpio::gpioc::PC12<stm32h7xx_hal::gpio::Analog>
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:27:19: 27:22
                                         // + literal: Const { ty: stm32h7xx_hal::gpio::gpioc::PC12<stm32h7xx_hal::gpio::Analog>, val: Value(Scalar(<ZST>)) }
        _15 = const stm32h7xx_hal::gpio::gpioc::PC12::<stm32h7xx_hal::gpio::Analog>::into_alternate_af12(move _16) -> bb1; // scope 0 at src\sdmmc.rs:27:19: 27:44
                                         // ty::Const
                                         // + ty: fn(stm32h7xx_hal::gpio::gpioc::PC12<stm32h7xx_hal::gpio::Analog>) -> stm32h7xx_hal::gpio::gpioc::PC12<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>> {stm32h7xx_hal::gpio::gpioc::PC12::<stm32h7xx_hal::gpio::Analog>::into_alternate_af12}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:27:23: 27:42
                                         // + literal: Const { ty: fn(stm32h7xx_hal::gpio::gpioc::PC12<stm32h7xx_hal::gpio::Analog>) -> stm32h7xx_hal::gpio::gpioc::PC12<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>> {stm32h7xx_hal::gpio::gpioc::PC12::<stm32h7xx_hal::gpio::Analog>::into_alternate_af12}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_16);                // scope 0 at src\sdmmc.rs:27:43: 27:44
        StorageLive(_17);                // scope 0 at src\sdmmc.rs:27:55: 27:70
        _17 = const stm32h7xx_hal::gpio::Speed::VeryHigh; // scope 0 at src\sdmmc.rs:27:55: 27:70
                                         // ty::Const
                                         // + ty: stm32h7xx_hal::gpio::Speed
                                         // + val: Value(Scalar(0x03))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:27:55: 27:70
                                         // + literal: Const { ty: stm32h7xx_hal::gpio::Speed, val: Value(Scalar(0x03)) }
        _14 = const stm32h7xx_hal::gpio::gpioc::PC12::<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>::set_speed(move _15, move _17) -> bb2; // scope 0 at src\sdmmc.rs:27:19: 27:71
                                         // ty::Const
                                         // + ty: fn(stm32h7xx_hal::gpio::gpioc::PC12<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>, stm32h7xx_hal::gpio::Speed) -> stm32h7xx_hal::gpio::gpioc::PC12<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>> {stm32h7xx_hal::gpio::gpioc::PC12::<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>::set_speed}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:27:45: 27:54
                                         // + literal: Const { ty: fn(stm32h7xx_hal::gpio::gpioc::PC12<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>, stm32h7xx_hal::gpio::Speed) -> stm32h7xx_hal::gpio::gpioc::PC12<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>> {stm32h7xx_hal::gpio::gpioc::PC12::<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>::set_speed}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_17);                // scope 0 at src\sdmmc.rs:27:70: 27:71
        StorageDead(_15);                // scope 0 at src\sdmmc.rs:27:70: 27:71
        StorageLive(_18);                // scope 1 at src\sdmmc.rs:28:13: 28:16
        StorageLive(_19);                // scope 1 at src\sdmmc.rs:28:19: 28:44
        StorageLive(_20);                // scope 1 at src\sdmmc.rs:28:19: 28:22
        _20 = const stm32h7xx_hal::gpio::gpiod::PD2::<stm32h7xx_hal::gpio::Analog> { _mode: core::marker::PhantomData::<stm32h7xx_hal::gpio::Analog> }; // scope 1 at src\sdmmc.rs:28:19: 28:22
                                         // ty::Const
                                         // + ty: stm32h7xx_hal::gpio::gpiod::PD2<stm32h7xx_hal::gpio::Analog>
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:28:19: 28:22
                                         // + literal: Const { ty: stm32h7xx_hal::gpio::gpiod::PD2<stm32h7xx_hal::gpio::Analog>, val: Value(Scalar(<ZST>)) }
        _19 = const stm32h7xx_hal::gpio::gpiod::PD2::<stm32h7xx_hal::gpio::Analog>::into_alternate_af12(move _20) -> bb3; // scope 1 at src\sdmmc.rs:28:19: 28:44
                                         // ty::Const
                                         // + ty: fn(stm32h7xx_hal::gpio::gpiod::PD2<stm32h7xx_hal::gpio::Analog>) -> stm32h7xx_hal::gpio::gpiod::PD2<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>> {stm32h7xx_hal::gpio::gpiod::PD2::<stm32h7xx_hal::gpio::Analog>::into_alternate_af12}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:28:23: 28:42
                                         // + literal: Const { ty: fn(stm32h7xx_hal::gpio::gpiod::PD2<stm32h7xx_hal::gpio::Analog>) -> stm32h7xx_hal::gpio::gpiod::PD2<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>> {stm32h7xx_hal::gpio::gpiod::PD2::<stm32h7xx_hal::gpio::Analog>::into_alternate_af12}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        StorageDead(_20);                // scope 1 at src\sdmmc.rs:28:43: 28:44
        StorageLive(_21);                // scope 1 at src\sdmmc.rs:28:55: 28:70
        _21 = const stm32h7xx_hal::gpio::Speed::VeryHigh; // scope 1 at src\sdmmc.rs:28:55: 28:70
                                         // ty::Const
                                         // + ty: stm32h7xx_hal::gpio::Speed
                                         // + val: Value(Scalar(0x03))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:28:55: 28:70
                                         // + literal: Const { ty: stm32h7xx_hal::gpio::Speed, val: Value(Scalar(0x03)) }
        _18 = const stm32h7xx_hal::gpio::gpiod::PD2::<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>::set_speed(move _19, move _21) -> bb4; // scope 1 at src\sdmmc.rs:28:19: 28:71
                                         // ty::Const
                                         // + ty: fn(stm32h7xx_hal::gpio::gpiod::PD2<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>, stm32h7xx_hal::gpio::Speed) -> stm32h7xx_hal::gpio::gpiod::PD2<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>> {stm32h7xx_hal::gpio::gpiod::PD2::<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>::set_speed}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:28:45: 28:54
                                         // + literal: Const { ty: fn(stm32h7xx_hal::gpio::gpiod::PD2<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>, stm32h7xx_hal::gpio::Speed) -> stm32h7xx_hal::gpio::gpiod::PD2<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>> {stm32h7xx_hal::gpio::gpiod::PD2::<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>::set_speed}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_21);                // scope 1 at src\sdmmc.rs:28:70: 28:71
        StorageDead(_19);                // scope 1 at src\sdmmc.rs:28:70: 28:71
        StorageLive(_22);                // scope 2 at src\sdmmc.rs:29:13: 29:15
        StorageLive(_23);                // scope 2 at src\sdmmc.rs:29:18: 29:42
        StorageLive(_24);                // scope 2 at src\sdmmc.rs:29:18: 29:20
        _24 = const stm32h7xx_hal::gpio::gpioc::PC8::<stm32h7xx_hal::gpio::Analog> { _mode: core::marker::PhantomData::<stm32h7xx_hal::gpio::Analog> }; // scope 2 at src\sdmmc.rs:29:18: 29:20
                                         // ty::Const
                                         // + ty: stm32h7xx_hal::gpio::gpioc::PC8<stm32h7xx_hal::gpio::Analog>
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:29:18: 29:20
                                         // + literal: Const { ty: stm32h7xx_hal::gpio::gpioc::PC8<stm32h7xx_hal::gpio::Analog>, val: Value(Scalar(<ZST>)) }
        _23 = const stm32h7xx_hal::gpio::gpioc::PC8::<stm32h7xx_hal::gpio::Analog>::into_alternate_af12(move _24) -> bb5; // scope 2 at src\sdmmc.rs:29:18: 29:42
                                         // ty::Const
                                         // + ty: fn(stm32h7xx_hal::gpio::gpioc::PC8<stm32h7xx_hal::gpio::Analog>) -> stm32h7xx_hal::gpio::gpioc::PC8<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>> {stm32h7xx_hal::gpio::gpioc::PC8::<stm32h7xx_hal::gpio::Analog>::into_alternate_af12}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:29:21: 29:40
                                         // + literal: Const { ty: fn(stm32h7xx_hal::gpio::gpioc::PC8<stm32h7xx_hal::gpio::Analog>) -> stm32h7xx_hal::gpio::gpioc::PC8<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>> {stm32h7xx_hal::gpio::gpioc::PC8::<stm32h7xx_hal::gpio::Analog>::into_alternate_af12}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        StorageDead(_24);                // scope 2 at src\sdmmc.rs:29:41: 29:42
        StorageLive(_25);                // scope 2 at src\sdmmc.rs:29:53: 29:68
        _25 = const stm32h7xx_hal::gpio::Speed::VeryHigh; // scope 2 at src\sdmmc.rs:29:53: 29:68
                                         // ty::Const
                                         // + ty: stm32h7xx_hal::gpio::Speed
                                         // + val: Value(Scalar(0x03))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:29:53: 29:68
                                         // + literal: Const { ty: stm32h7xx_hal::gpio::Speed, val: Value(Scalar(0x03)) }
        _22 = const stm32h7xx_hal::gpio::gpioc::PC8::<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>::set_speed(move _23, move _25) -> bb6; // scope 2 at src\sdmmc.rs:29:18: 29:69
                                         // ty::Const
                                         // + ty: fn(stm32h7xx_hal::gpio::gpioc::PC8<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>, stm32h7xx_hal::gpio::Speed) -> stm32h7xx_hal::gpio::gpioc::PC8<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>> {stm32h7xx_hal::gpio::gpioc::PC8::<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>::set_speed}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:29:43: 29:52
                                         // + literal: Const { ty: fn(stm32h7xx_hal::gpio::gpioc::PC8<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>, stm32h7xx_hal::gpio::Speed) -> stm32h7xx_hal::gpio::gpioc::PC8<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>> {stm32h7xx_hal::gpio::gpioc::PC8::<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>::set_speed}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        StorageDead(_25);                // scope 2 at src\sdmmc.rs:29:68: 29:69
        StorageDead(_23);                // scope 2 at src\sdmmc.rs:29:68: 29:69
        StorageLive(_26);                // scope 3 at src\sdmmc.rs:30:13: 30:15
        StorageLive(_27);                // scope 3 at src\sdmmc.rs:30:18: 30:42
        StorageLive(_28);                // scope 3 at src\sdmmc.rs:30:18: 30:20
        _28 = const stm32h7xx_hal::gpio::gpioc::PC9::<stm32h7xx_hal::gpio::Analog> { _mode: core::marker::PhantomData::<stm32h7xx_hal::gpio::Analog> }; // scope 3 at src\sdmmc.rs:30:18: 30:20
                                         // ty::Const
                                         // + ty: stm32h7xx_hal::gpio::gpioc::PC9<stm32h7xx_hal::gpio::Analog>
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:30:18: 30:20
                                         // + literal: Const { ty: stm32h7xx_hal::gpio::gpioc::PC9<stm32h7xx_hal::gpio::Analog>, val: Value(Scalar(<ZST>)) }
        _27 = const stm32h7xx_hal::gpio::gpioc::PC9::<stm32h7xx_hal::gpio::Analog>::into_alternate_af12(move _28) -> bb7; // scope 3 at src\sdmmc.rs:30:18: 30:42
                                         // ty::Const
                                         // + ty: fn(stm32h7xx_hal::gpio::gpioc::PC9<stm32h7xx_hal::gpio::Analog>) -> stm32h7xx_hal::gpio::gpioc::PC9<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>> {stm32h7xx_hal::gpio::gpioc::PC9::<stm32h7xx_hal::gpio::Analog>::into_alternate_af12}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:30:21: 30:40
                                         // + literal: Const { ty: fn(stm32h7xx_hal::gpio::gpioc::PC9<stm32h7xx_hal::gpio::Analog>) -> stm32h7xx_hal::gpio::gpioc::PC9<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>> {stm32h7xx_hal::gpio::gpioc::PC9::<stm32h7xx_hal::gpio::Analog>::into_alternate_af12}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        StorageDead(_28);                // scope 3 at src\sdmmc.rs:30:41: 30:42
        StorageLive(_29);                // scope 3 at src\sdmmc.rs:30:53: 30:68
        _29 = const stm32h7xx_hal::gpio::Speed::VeryHigh; // scope 3 at src\sdmmc.rs:30:53: 30:68
                                         // ty::Const
                                         // + ty: stm32h7xx_hal::gpio::Speed
                                         // + val: Value(Scalar(0x03))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:30:53: 30:68
                                         // + literal: Const { ty: stm32h7xx_hal::gpio::Speed, val: Value(Scalar(0x03)) }
        _26 = const stm32h7xx_hal::gpio::gpioc::PC9::<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>::set_speed(move _27, move _29) -> bb8; // scope 3 at src\sdmmc.rs:30:18: 30:69
                                         // ty::Const
                                         // + ty: fn(stm32h7xx_hal::gpio::gpioc::PC9<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>, stm32h7xx_hal::gpio::Speed) -> stm32h7xx_hal::gpio::gpioc::PC9<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>> {stm32h7xx_hal::gpio::gpioc::PC9::<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>::set_speed}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:30:43: 30:52
                                         // + literal: Const { ty: fn(stm32h7xx_hal::gpio::gpioc::PC9<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>, stm32h7xx_hal::gpio::Speed) -> stm32h7xx_hal::gpio::gpioc::PC9<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>> {stm32h7xx_hal::gpio::gpioc::PC9::<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>::set_speed}, val: Value(Scalar(<ZST>)) }
    }

    bb8: {
        StorageDead(_29);                // scope 3 at src\sdmmc.rs:30:68: 30:69
        StorageDead(_27);                // scope 3 at src\sdmmc.rs:30:68: 30:69
        StorageLive(_30);                // scope 4 at src\sdmmc.rs:31:13: 31:15
        StorageLive(_31);                // scope 4 at src\sdmmc.rs:31:18: 31:42
        StorageLive(_32);                // scope 4 at src\sdmmc.rs:31:18: 31:20
        _32 = const stm32h7xx_hal::gpio::gpioc::PC10::<stm32h7xx_hal::gpio::Analog> { _mode: core::marker::PhantomData::<stm32h7xx_hal::gpio::Analog> }; // scope 4 at src\sdmmc.rs:31:18: 31:20
                                         // ty::Const
                                         // + ty: stm32h7xx_hal::gpio::gpioc::PC10<stm32h7xx_hal::gpio::Analog>
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:31:18: 31:20
                                         // + literal: Const { ty: stm32h7xx_hal::gpio::gpioc::PC10<stm32h7xx_hal::gpio::Analog>, val: Value(Scalar(<ZST>)) }
        _31 = const stm32h7xx_hal::gpio::gpioc::PC10::<stm32h7xx_hal::gpio::Analog>::into_alternate_af12(move _32) -> bb9; // scope 4 at src\sdmmc.rs:31:18: 31:42
                                         // ty::Const
                                         // + ty: fn(stm32h7xx_hal::gpio::gpioc::PC10<stm32h7xx_hal::gpio::Analog>) -> stm32h7xx_hal::gpio::gpioc::PC10<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>> {stm32h7xx_hal::gpio::gpioc::PC10::<stm32h7xx_hal::gpio::Analog>::into_alternate_af12}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:31:21: 31:40
                                         // + literal: Const { ty: fn(stm32h7xx_hal::gpio::gpioc::PC10<stm32h7xx_hal::gpio::Analog>) -> stm32h7xx_hal::gpio::gpioc::PC10<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>> {stm32h7xx_hal::gpio::gpioc::PC10::<stm32h7xx_hal::gpio::Analog>::into_alternate_af12}, val: Value(Scalar(<ZST>)) }
    }

    bb9: {
        StorageDead(_32);                // scope 4 at src\sdmmc.rs:31:41: 31:42
        StorageLive(_33);                // scope 4 at src\sdmmc.rs:31:53: 31:68
        _33 = const stm32h7xx_hal::gpio::Speed::VeryHigh; // scope 4 at src\sdmmc.rs:31:53: 31:68
                                         // ty::Const
                                         // + ty: stm32h7xx_hal::gpio::Speed
                                         // + val: Value(Scalar(0x03))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:31:53: 31:68
                                         // + literal: Const { ty: stm32h7xx_hal::gpio::Speed, val: Value(Scalar(0x03)) }
        _30 = const stm32h7xx_hal::gpio::gpioc::PC10::<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>::set_speed(move _31, move _33) -> bb10; // scope 4 at src\sdmmc.rs:31:18: 31:69
                                         // ty::Const
                                         // + ty: fn(stm32h7xx_hal::gpio::gpioc::PC10<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>, stm32h7xx_hal::gpio::Speed) -> stm32h7xx_hal::gpio::gpioc::PC10<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>> {stm32h7xx_hal::gpio::gpioc::PC10::<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>::set_speed}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:31:43: 31:52
                                         // + literal: Const { ty: fn(stm32h7xx_hal::gpio::gpioc::PC10<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>, stm32h7xx_hal::gpio::Speed) -> stm32h7xx_hal::gpio::gpioc::PC10<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>> {stm32h7xx_hal::gpio::gpioc::PC10::<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>::set_speed}, val: Value(Scalar(<ZST>)) }
    }

    bb10: {
        StorageDead(_33);                // scope 4 at src\sdmmc.rs:31:68: 31:69
        StorageDead(_31);                // scope 4 at src\sdmmc.rs:31:68: 31:69
        StorageLive(_34);                // scope 5 at src\sdmmc.rs:32:13: 32:15
        StorageLive(_35);                // scope 5 at src\sdmmc.rs:32:18: 32:42
        StorageLive(_36);                // scope 5 at src\sdmmc.rs:32:18: 32:20
        _36 = const stm32h7xx_hal::gpio::gpioc::PC11::<stm32h7xx_hal::gpio::Analog> { _mode: core::marker::PhantomData::<stm32h7xx_hal::gpio::Analog> }; // scope 5 at src\sdmmc.rs:32:18: 32:20
                                         // ty::Const
                                         // + ty: stm32h7xx_hal::gpio::gpioc::PC11<stm32h7xx_hal::gpio::Analog>
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:32:18: 32:20
                                         // + literal: Const { ty: stm32h7xx_hal::gpio::gpioc::PC11<stm32h7xx_hal::gpio::Analog>, val: Value(Scalar(<ZST>)) }
        _35 = const stm32h7xx_hal::gpio::gpioc::PC11::<stm32h7xx_hal::gpio::Analog>::into_alternate_af12(move _36) -> bb11; // scope 5 at src\sdmmc.rs:32:18: 32:42
                                         // ty::Const
                                         // + ty: fn(stm32h7xx_hal::gpio::gpioc::PC11<stm32h7xx_hal::gpio::Analog>) -> stm32h7xx_hal::gpio::gpioc::PC11<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>> {stm32h7xx_hal::gpio::gpioc::PC11::<stm32h7xx_hal::gpio::Analog>::into_alternate_af12}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:32:21: 32:40
                                         // + literal: Const { ty: fn(stm32h7xx_hal::gpio::gpioc::PC11<stm32h7xx_hal::gpio::Analog>) -> stm32h7xx_hal::gpio::gpioc::PC11<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>> {stm32h7xx_hal::gpio::gpioc::PC11::<stm32h7xx_hal::gpio::Analog>::into_alternate_af12}, val: Value(Scalar(<ZST>)) }
    }

    bb11: {
        StorageDead(_36);                // scope 5 at src\sdmmc.rs:32:41: 32:42
        StorageLive(_37);                // scope 5 at src\sdmmc.rs:32:53: 32:68
        _37 = const stm32h7xx_hal::gpio::Speed::VeryHigh; // scope 5 at src\sdmmc.rs:32:53: 32:68
                                         // ty::Const
                                         // + ty: stm32h7xx_hal::gpio::Speed
                                         // + val: Value(Scalar(0x03))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:32:53: 32:68
                                         // + literal: Const { ty: stm32h7xx_hal::gpio::Speed, val: Value(Scalar(0x03)) }
        _34 = const stm32h7xx_hal::gpio::gpioc::PC11::<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>::set_speed(move _35, move _37) -> bb12; // scope 5 at src\sdmmc.rs:32:18: 32:69
                                         // ty::Const
                                         // + ty: fn(stm32h7xx_hal::gpio::gpioc::PC11<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>, stm32h7xx_hal::gpio::Speed) -> stm32h7xx_hal::gpio::gpioc::PC11<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>> {stm32h7xx_hal::gpio::gpioc::PC11::<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>::set_speed}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:32:43: 32:52
                                         // + literal: Const { ty: fn(stm32h7xx_hal::gpio::gpioc::PC11<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>, stm32h7xx_hal::gpio::Speed) -> stm32h7xx_hal::gpio::gpioc::PC11<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>> {stm32h7xx_hal::gpio::gpioc::PC11::<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>::set_speed}, val: Value(Scalar(<ZST>)) }
    }

    bb12: {
        StorageDead(_37);                // scope 5 at src\sdmmc.rs:32:68: 32:69
        StorageDead(_35);                // scope 5 at src\sdmmc.rs:32:68: 32:69
        StorageLive(_38);                // scope 6 at src\sdmmc.rs:34:13: 34:23
        StorageLive(_39);                // scope 6 at src\sdmmc.rs:34:26: 34:32
        _39 = const stm32h7xx_hal::gpio::gpioc::PC6::<stm32h7xx_hal::gpio::Analog> { _mode: core::marker::PhantomData::<stm32h7xx_hal::gpio::Analog> }; // scope 6 at src\sdmmc.rs:34:26: 34:32
                                         // ty::Const
                                         // + ty: stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Analog>
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:34:26: 34:32
                                         // + literal: Const { ty: stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Analog>, val: Value(Scalar(<ZST>)) }
        _38 = const stm32h7xx_hal::gpio::gpioc::PC6::<stm32h7xx_hal::gpio::Analog>::into_pull_down_input(move _39) -> bb13; // scope 6 at src\sdmmc.rs:34:26: 34:55
                                         // ty::Const
                                         // + ty: fn(stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Analog>) -> stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>> {stm32h7xx_hal::gpio::gpioc::PC6::<stm32h7xx_hal::gpio::Analog>::into_pull_down_input}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:34:33: 34:53
                                         // + literal: Const { ty: fn(stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Analog>) -> stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>> {stm32h7xx_hal::gpio::gpioc::PC6::<stm32h7xx_hal::gpio::Analog>::into_pull_down_input}, val: Value(Scalar(<ZST>)) }
    }

    bb13: {
        StorageDead(_39);                // scope 6 at src\sdmmc.rs:34:54: 34:55
        StorageLive(_40);                // scope 7 at src\sdmmc.rs:35:9: 35:45
        StorageLive(_41);                // scope 7 at src\sdmmc.rs:35:9: 35:15
        _41 = &mut _38;                  // scope 7 at src\sdmmc.rs:35:9: 35:15
        StorageLive(_42);                // scope 7 at src\sdmmc.rs:35:38: 35:44
        _42 = &mut (*_11);               // scope 7 at src\sdmmc.rs:35:38: 35:44
        _40 = const <stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>> as stm32h7xx_hal::gpio::ExtiPin>::make_interrupt_source(move _41, move _42) -> bb14; // scope 7 at src\sdmmc.rs:35:9: 35:45
                                         // ty::Const
                                         // + ty: for<'r, 's> fn(&'r mut stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>>, &'s mut stm32h7xx_hal::stm32::SYSCFG) {<stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>> as stm32h7xx_hal::gpio::ExtiPin>::make_interrupt_source}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:35:16: 35:37
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>>, &'s mut stm32h7xx_hal::stm32::SYSCFG) {<stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>> as stm32h7xx_hal::gpio::ExtiPin>::make_interrupt_source}, val: Value(Scalar(<ZST>)) }
    }

    bb14: {
        StorageDead(_42);                // scope 7 at src\sdmmc.rs:35:44: 35:45
        StorageDead(_41);                // scope 7 at src\sdmmc.rs:35:44: 35:45
        StorageDead(_40);                // scope 7 at src\sdmmc.rs:35:45: 35:46
        StorageLive(_43);                // scope 7 at src\sdmmc.rs:36:9: 36:59
        StorageLive(_44);                // scope 7 at src\sdmmc.rs:36:9: 36:15
        _44 = &mut _38;                  // scope 7 at src\sdmmc.rs:36:9: 36:15
        StorageLive(_45);                // scope 7 at src\sdmmc.rs:36:32: 36:36
        _45 = &mut (*_12);               // scope 7 at src\sdmmc.rs:36:32: 36:36
        StorageLive(_46);                // scope 7 at src\sdmmc.rs:36:38: 36:58
        _46 = const stm32h7xx_hal::gpio::Edge::RISING_FALLING; // scope 7 at src\sdmmc.rs:36:38: 36:58
                                         // ty::Const
                                         // + ty: stm32h7xx_hal::gpio::Edge
                                         // + val: Value(Scalar(0x02))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:36:38: 36:58
                                         // + literal: Const { ty: stm32h7xx_hal::gpio::Edge, val: Value(Scalar(0x02)) }
        _43 = const <stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>> as stm32h7xx_hal::gpio::ExtiPin>::trigger_on_edge(move _44, move _45, move _46) -> bb15; // scope 7 at src\sdmmc.rs:36:9: 36:59
                                         // ty::Const
                                         // + ty: for<'r, 's> fn(&'r mut stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>>, &'s mut stm32h7xx_hal::stm32::EXTI, stm32h7xx_hal::gpio::Edge) {<stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>> as stm32h7xx_hal::gpio::ExtiPin>::trigger_on_edge}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:36:16: 36:31
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>>, &'s mut stm32h7xx_hal::stm32::EXTI, stm32h7xx_hal::gpio::Edge) {<stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>> as stm32h7xx_hal::gpio::ExtiPin>::trigger_on_edge}, val: Value(Scalar(<ZST>)) }
    }

    bb15: {
        StorageDead(_46);                // scope 7 at src\sdmmc.rs:36:58: 36:59
        StorageDead(_45);                // scope 7 at src\sdmmc.rs:36:58: 36:59
        StorageDead(_44);                // scope 7 at src\sdmmc.rs:36:58: 36:59
        StorageDead(_43);                // scope 7 at src\sdmmc.rs:36:59: 36:60
        StorageLive(_47);                // scope 7 at src\sdmmc.rs:37:9: 37:38
        StorageLive(_48);                // scope 7 at src\sdmmc.rs:37:9: 37:15
        _48 = &mut _38;                  // scope 7 at src\sdmmc.rs:37:9: 37:15
        StorageLive(_49);                // scope 7 at src\sdmmc.rs:37:33: 37:37
        _49 = &mut (*_12);               // scope 7 at src\sdmmc.rs:37:33: 37:37
        _47 = const <stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>> as stm32h7xx_hal::gpio::ExtiPin>::enable_interrupt(move _48, move _49) -> bb16; // scope 7 at src\sdmmc.rs:37:9: 37:38
                                         // ty::Const
                                         // + ty: for<'r, 's> fn(&'r mut stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>>, &'s mut stm32h7xx_hal::stm32::EXTI) {<stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>> as stm32h7xx_hal::gpio::ExtiPin>::enable_interrupt}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:37:16: 37:32
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>>, &'s mut stm32h7xx_hal::stm32::EXTI) {<stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>> as stm32h7xx_hal::gpio::ExtiPin>::enable_interrupt}, val: Value(Scalar(<ZST>)) }
    }

    bb16: {
        StorageDead(_49);                // scope 7 at src\sdmmc.rs:37:37: 37:38
        StorageDead(_48);                // scope 7 at src\sdmmc.rs:37:37: 37:38
        StorageDead(_47);                // scope 7 at src\sdmmc.rs:37:38: 37:39
        StorageLive(_50);                // scope 7 at src\sdmmc.rs:39:13: 39:20
        StorageLive(_51);                // scope 7 at src\sdmmc.rs:39:23: 39:26
        _51 = const stm32h7xx_hal::gpio::gpioa::PA11::<stm32h7xx_hal::gpio::Analog> { _mode: core::marker::PhantomData::<stm32h7xx_hal::gpio::Analog> }; // scope 7 at src\sdmmc.rs:39:23: 39:26
                                         // ty::Const
                                         // + ty: stm32h7xx_hal::gpio::gpioa::PA11<stm32h7xx_hal::gpio::Analog>
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:39:23: 39:26
                                         // + literal: Const { ty: stm32h7xx_hal::gpio::gpioa::PA11<stm32h7xx_hal::gpio::Analog>, val: Value(Scalar(<ZST>)) }
        _50 = const stm32h7xx_hal::gpio::gpioa::PA11::<stm32h7xx_hal::gpio::Analog>::into_open_drain_output(move _51) -> bb17; // scope 7 at src\sdmmc.rs:39:23: 39:51
                                         // ty::Const
                                         // + ty: fn(stm32h7xx_hal::gpio::gpioa::PA11<stm32h7xx_hal::gpio::Analog>) -> stm32h7xx_hal::gpio::gpioa::PA11<stm32h7xx_hal::gpio::Output<stm32h7xx_hal::gpio::OpenDrain>> {stm32h7xx_hal::gpio::gpioa::PA11::<stm32h7xx_hal::gpio::Analog>::into_open_drain_output}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:39:27: 39:49
                                         // + literal: Const { ty: fn(stm32h7xx_hal::gpio::gpioa::PA11<stm32h7xx_hal::gpio::Analog>) -> stm32h7xx_hal::gpio::gpioa::PA11<stm32h7xx_hal::gpio::Output<stm32h7xx_hal::gpio::OpenDrain>> {stm32h7xx_hal::gpio::gpioa::PA11::<stm32h7xx_hal::gpio::Analog>::into_open_drain_output}, val: Value(Scalar(<ZST>)) }
    }

    bb17: {
        StorageDead(_51);                // scope 7 at src\sdmmc.rs:39:50: 39:51
        StorageLive(_52);                // scope 8 at src\sdmmc.rs:40:9: 40:32
        StorageLive(_53);                // scope 8 at src\sdmmc.rs:40:9: 40:23
        StorageLive(_54);                // scope 8 at src\sdmmc.rs:40:9: 40:12
        _54 = &mut _50;                  // scope 8 at src\sdmmc.rs:40:9: 40:12
        _53 = const <stm32h7xx_hal::gpio::gpioa::PA11<stm32h7xx_hal::gpio::Output<stm32h7xx_hal::gpio::OpenDrain>> as stm32h7xx_hal::embedded_hal::digital::v2::OutputPin>::set_high(move _54) -> bb18; // scope 8 at src\sdmmc.rs:40:9: 40:23
                                         // ty::Const
                                         // + ty: for<'r> fn(&'r mut stm32h7xx_hal::gpio::gpioa::PA11<stm32h7xx_hal::gpio::Output<stm32h7xx_hal::gpio::OpenDrain>>) -> core::result::Result<(), <stm32h7xx_hal::gpio::gpioa::PA11<stm32h7xx_hal::gpio::Output<stm32h7xx_hal::gpio::OpenDrain>> as stm32h7xx_hal::embedded_hal::digital::v2::OutputPin>::Error> {<stm32h7xx_hal::gpio::gpioa::PA11<stm32h7xx_hal::gpio::Output<stm32h7xx_hal::gpio::OpenDrain>> as stm32h7xx_hal::embedded_hal::digital::v2::OutputPin>::set_high}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:40:13: 40:21
                                         // + literal: Const { ty: for<'r> fn(&'r mut stm32h7xx_hal::gpio::gpioa::PA11<stm32h7xx_hal::gpio::Output<stm32h7xx_hal::gpio::OpenDrain>>) -> core::result::Result<(), <stm32h7xx_hal::gpio::gpioa::PA11<stm32h7xx_hal::gpio::Output<stm32h7xx_hal::gpio::OpenDrain>> as stm32h7xx_hal::embedded_hal::digital::v2::OutputPin>::Error> {<stm32h7xx_hal::gpio::gpioa::PA11<stm32h7xx_hal::gpio::Output<stm32h7xx_hal::gpio::OpenDrain>> as stm32h7xx_hal::embedded_hal::digital::v2::OutputPin>::set_high}, val: Value(Scalar(<ZST>)) }
    }

    bb18: {
        StorageDead(_54);                // scope 8 at src\sdmmc.rs:40:22: 40:23
        _52 = const core::result::Result::<(), stm32h7xx_hal::Never>::unwrap(move _53) -> bb19; // scope 8 at src\sdmmc.rs:40:9: 40:32
                                         // ty::Const
                                         // + ty: fn(core::result::Result<(), stm32h7xx_hal::Never>) {core::result::Result::<(), stm32h7xx_hal::Never>::unwrap}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:40:24: 40:30
                                         // + literal: Const { ty: fn(core::result::Result<(), stm32h7xx_hal::Never>) {core::result::Result::<(), stm32h7xx_hal::Never>::unwrap}, val: Value(Scalar(<ZST>)) }
    }

    bb19: {
        StorageDead(_53);                // scope 8 at src\sdmmc.rs:40:31: 40:32
        StorageDead(_52);                // scope 8 at src\sdmmc.rs:40:32: 40:33
        StorageLive(_55);                // scope 8 at src\sdmmc.rs:42:13: 42:18
        StorageLive(_56);                // scope 8 at src\sdmmc.rs:42:21: 42:26
        _56 = const stm32h7xx_hal::stm32::SDMMC1 { _marker: core::marker::PhantomData::<*const ()> }; // scope 8 at src\sdmmc.rs:42:21: 42:26
                                         // ty::Const
                                         // + ty: stm32h7xx_hal::stm32::SDMMC1
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:42:21: 42:26
                                         // + literal: Const { ty: stm32h7xx_hal::stm32::SDMMC1, val: Value(Scalar(<ZST>)) }
        StorageLive(_57);                // scope 8 at src\sdmmc.rs:42:33: 42:59
        _57 = const (stm32h7xx_hal::gpio::gpioc::PC12::<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>> { _mode: core::marker::PhantomData::<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>> }, stm32h7xx_hal::gpio::gpiod::PD2::<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>> { _mode: core::marker::PhantomData::<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>> }, stm32h7xx_hal::gpio::gpioc::PC8::<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>> { _mode: core::marker::PhantomData::<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>> }, stm32h7xx_hal::gpio::gpioc::PC9::<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>> { _mode: core::marker::PhantomData::<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>> }, stm32h7xx_hal::gpio::gpioc::PC10::<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>> { _mode: core::marker::PhantomData::<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>> }, stm32h7xx_hal::gpio::gpioc::PC11::<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>> { _mode: core::marker::PhantomData::<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>> }); // scope 8 at src\sdmmc.rs:42:33: 42:59
                                         // ty::Const
                                         // + ty: (stm32h7xx_hal::gpio::gpioc::PC12<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>, stm32h7xx_hal::gpio::gpiod::PD2<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>, stm32h7xx_hal::gpio::gpioc::PC8<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>, stm32h7xx_hal::gpio::gpioc::PC9<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>, stm32h7xx_hal::gpio::gpioc::PC10<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>, stm32h7xx_hal::gpio::gpioc::PC11<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>)
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:42:33: 42:59
                                         // + literal: Const { ty: (stm32h7xx_hal::gpio::gpioc::PC12<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>, stm32h7xx_hal::gpio::gpiod::PD2<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>, stm32h7xx_hal::gpio::gpioc::PC8<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>, stm32h7xx_hal::gpio::gpioc::PC9<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>, stm32h7xx_hal::gpio::gpioc::PC10<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>, stm32h7xx_hal::gpio::gpioc::PC11<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>), val: Value(Scalar(<ZST>)) }
        StorageLive(_58);                // scope 8 at src\sdmmc.rs:42:61: 42:67
        _58 = const stm32h7xx_hal::rcc::rec::Sdmmc1 { _marker: core::marker::PhantomData::<*const ()> }; // scope 8 at src\sdmmc.rs:42:61: 42:67
                                         // ty::Const
                                         // + ty: stm32h7xx_hal::rcc::rec::Sdmmc1
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:42:61: 42:67
                                         // + literal: Const { ty: stm32h7xx_hal::rcc::rec::Sdmmc1, val: Value(Scalar(<ZST>)) }
        StorageLive(_59);                // scope 8 at src\sdmmc.rs:42:69: 42:75
        _59 = _13;                       // scope 8 at src\sdmmc.rs:42:69: 42:75
        _55 = const <stm32h7xx_hal::stm32::SDMMC1 as stm32h7xx_hal::prelude::_stm32h7xx_hal_sdmmc_SdmmcExt<stm32h7xx_hal::stm32::SDMMC1>>::sdmmc::<(stm32h7xx_hal::gpio::gpioc::PC12<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>, stm32h7xx_hal::gpio::gpiod::PD2<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>, stm32h7xx_hal::gpio::gpioc::PC8<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>, stm32h7xx_hal::gpio::gpioc::PC9<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>, stm32h7xx_hal::gpio::gpioc::PC10<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>, stm32h7xx_hal::gpio::gpioc::PC11<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>)>(move _56, move _57, move _58, move _59) -> bb20; // scope 8 at src\sdmmc.rs:42:21: 42:76
                                         // ty::Const
                                         // + ty: for<'r> fn(stm32h7xx_hal::stm32::SDMMC1, (stm32h7xx_hal::gpio::gpioc::PC12<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>, stm32h7xx_hal::gpio::gpiod::PD2<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>, stm32h7xx_hal::gpio::gpioc::PC8<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>, stm32h7xx_hal::gpio::gpioc::PC9<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>, stm32h7xx_hal::gpio::gpioc::PC10<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>, stm32h7xx_hal::gpio::gpioc::PC11<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>), <stm32h7xx_hal::stm32::SDMMC1 as stm32h7xx_hal::prelude::_stm32h7xx_hal_sdmmc_SdmmcExt<stm32h7xx_hal::stm32::SDMMC1>>::Rec, &'r stm32h7xx_hal::rcc::CoreClocks) -> stm32h7xx_hal::sdmmc::Sdmmc<stm32h7xx_hal::stm32::SDMMC1> {<stm32h7xx_hal::stm32::SDMMC1 as stm32h7xx_hal::prelude::_stm32h7xx_hal_sdmmc_SdmmcExt<stm32h7xx_hal::stm32::SDMMC1>>::sdmmc::<(stm32h7xx_hal::gpio::gpioc::PC12<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>, stm32h7xx_hal::gpio::gpiod::PD2<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>, stm32h7xx_hal::gpio::gpioc::PC8<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>, stm32h7xx_hal::gpio::gpioc::PC9<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>, stm32h7xx_hal::gpio::gpioc::PC10<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>, stm32h7xx_hal::gpio::gpioc::PC11<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>)>}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:42:27: 42:32
                                         // + literal: Const { ty: for<'r> fn(stm32h7xx_hal::stm32::SDMMC1, (stm32h7xx_hal::gpio::gpioc::PC12<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>, stm32h7xx_hal::gpio::gpiod::PD2<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>, stm32h7xx_hal::gpio::gpioc::PC8<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>, stm32h7xx_hal::gpio::gpioc::PC9<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>, stm32h7xx_hal::gpio::gpioc::PC10<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>, stm32h7xx_hal::gpio::gpioc::PC11<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>), <stm32h7xx_hal::stm32::SDMMC1 as stm32h7xx_hal::prelude::_stm32h7xx_hal_sdmmc_SdmmcExt<stm32h7xx_hal::stm32::SDMMC1>>::Rec, &'r stm32h7xx_hal::rcc::CoreClocks) -> stm32h7xx_hal::sdmmc::Sdmmc<stm32h7xx_hal::stm32::SDMMC1> {<stm32h7xx_hal::stm32::SDMMC1 as stm32h7xx_hal::prelude::_stm32h7xx_hal_sdmmc_SdmmcExt<stm32h7xx_hal::stm32::SDMMC1>>::sdmmc::<(stm32h7xx_hal::gpio::gpioc::PC12<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>, stm32h7xx_hal::gpio::gpiod::PD2<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>, stm32h7xx_hal::gpio::gpioc::PC8<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>, stm32h7xx_hal::gpio::gpioc::PC9<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>, stm32h7xx_hal::gpio::gpioc::PC10<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>, stm32h7xx_hal::gpio::gpioc::PC11<stm32h7xx_hal::gpio::Alternate<stm32h7xx_hal::gpio::AF12>>)>}, val: Value(Scalar(<ZST>)) }
    }

    bb20: {
        StorageDead(_59);                // scope 8 at src\sdmmc.rs:42:75: 42:76
        StorageDead(_58);                // scope 8 at src\sdmmc.rs:42:75: 42:76
        StorageDead(_57);                // scope 8 at src\sdmmc.rs:42:75: 42:76
        StorageDead(_56);                // scope 8 at src\sdmmc.rs:42:75: 42:76
        StorageLive(_60);                // scope 9 at src\sdmmc.rs:44:17: 44:22
        _60 = move _55;                  // scope 9 at src\sdmmc.rs:44:17: 44:22
        StorageLive(_61);                // scope 9 at src\sdmmc.rs:44:24: 44:30
        _61 = const stm32h7xx_hal::gpio::gpioc::PC6::<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>> { _mode: core::marker::PhantomData::<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>> }; // scope 9 at src\sdmmc.rs:44:24: 44:30
                                         // ty::Const
                                         // + ty: stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>>
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:44:24: 44:30
                                         // + literal: Const { ty: stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>>, val: Value(Scalar(<ZST>)) }
        StorageLive(_62);                // scope 9 at src\sdmmc.rs:44:32: 44:35
        _62 = const stm32h7xx_hal::gpio::gpioa::PA11::<stm32h7xx_hal::gpio::Output<stm32h7xx_hal::gpio::OpenDrain>> { _mode: core::marker::PhantomData::<stm32h7xx_hal::gpio::Output<stm32h7xx_hal::gpio::OpenDrain>> }; // scope 9 at src\sdmmc.rs:44:32: 44:35
                                         // ty::Const
                                         // + ty: stm32h7xx_hal::gpio::gpioa::PA11<stm32h7xx_hal::gpio::Output<stm32h7xx_hal::gpio::OpenDrain>>
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:44:32: 44:35
                                         // + literal: Const { ty: stm32h7xx_hal::gpio::gpioa::PA11<stm32h7xx_hal::gpio::Output<stm32h7xx_hal::gpio::OpenDrain>>, val: Value(Scalar(<ZST>)) }
        (_0.0: stm32h7xx_hal::sdmmc::Sdmmc<stm32h7xx_hal::stm32::SDMMC1>) = move _60; // scope 9 at src\sdmmc.rs:44:9: 44:37
        (_0.1: stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>>) = move _61; // scope 9 at src\sdmmc.rs:44:9: 44:37
        (_0.2: stm32h7xx_hal::gpio::gpioa::PA11<stm32h7xx_hal::gpio::Output<stm32h7xx_hal::gpio::OpenDrain>>) = move _62; // scope 9 at src\sdmmc.rs:44:9: 44:37
        StorageDead(_62);                // scope 9 at src\sdmmc.rs:44:36: 44:37
        StorageDead(_61);                // scope 9 at src\sdmmc.rs:44:36: 44:37
        StorageDead(_60);                // scope 9 at src\sdmmc.rs:44:36: 44:37
        StorageDead(_55);                // scope 8 at src\sdmmc.rs:45:5: 45:6
        StorageDead(_50);                // scope 7 at src\sdmmc.rs:45:5: 45:6
        StorageDead(_38);                // scope 6 at src\sdmmc.rs:45:5: 45:6
        StorageDead(_34);                // scope 5 at src\sdmmc.rs:45:5: 45:6
        StorageDead(_30);                // scope 4 at src\sdmmc.rs:45:5: 45:6
        StorageDead(_26);                // scope 3 at src\sdmmc.rs:45:5: 45:6
        StorageDead(_22);                // scope 2 at src\sdmmc.rs:45:5: 45:6
        StorageDead(_18);                // scope 1 at src\sdmmc.rs:45:5: 45:6
        StorageDead(_14);                // scope 0 at src\sdmmc.rs:45:5: 45:6
        return;                          // scope 0 at src\sdmmc.rs:45:6: 45:6
    }
}

fn sdmmc::<impl at src\sdmmc.rs:11:1: 70:2>::handle_detect(_1: &mut sdmmc::Sdmmc) -> bool {
    debug self => _1;                    // in scope 0 at src\sdmmc.rs:66:26: 66:35
    let mut _0: bool;                    // return place in scope 0 at src\sdmmc.rs:66:40: 66:44
    let _2: ();                          // in scope 0 at src\sdmmc.rs:67:9: 67:50
    let mut _3: &mut stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>>; // in scope 0 at src\sdmmc.rs:67:9: 67:20
    let mut _4: core::result::Result<bool, stm32h7xx_hal::Never>; // in scope 0 at src\sdmmc.rs:68:9: 68:30
    let mut _5: &stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>>; // in scope 0 at src\sdmmc.rs:68:9: 68:20

    bb0: {
        StorageLive(_2);                 // scope 0 at src\sdmmc.rs:67:9: 67:50
        StorageLive(_3);                 // scope 0 at src\sdmmc.rs:67:9: 67:20
        _3 = &mut ((*_1).1: stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>>); // scope 0 at src\sdmmc.rs:67:9: 67:20
        _2 = const <stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>> as stm32h7xx_hal::gpio::ExtiPin>::clear_interrupt_pending_bit(move _3) -> bb1; // scope 0 at src\sdmmc.rs:67:9: 67:50
                                         // ty::Const
                                         // + ty: for<'r> fn(&'r mut stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>>) {<stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>> as stm32h7xx_hal::gpio::ExtiPin>::clear_interrupt_pending_bit}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:67:21: 67:48
                                         // + literal: Const { ty: for<'r> fn(&'r mut stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>>) {<stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>> as stm32h7xx_hal::gpio::ExtiPin>::clear_interrupt_pending_bit}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_3);                 // scope 0 at src\sdmmc.rs:67:49: 67:50
        StorageDead(_2);                 // scope 0 at src\sdmmc.rs:67:50: 67:51
        StorageLive(_4);                 // scope 0 at src\sdmmc.rs:68:9: 68:30
        StorageLive(_5);                 // scope 0 at src\sdmmc.rs:68:9: 68:20
        _5 = &((*_1).1: stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>>); // scope 0 at src\sdmmc.rs:68:9: 68:20
        _4 = const <stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>> as stm32h7xx_hal::embedded_hal::digital::v2::InputPin>::is_high(move _5) -> bb2; // scope 0 at src\sdmmc.rs:68:9: 68:30
                                         // ty::Const
                                         // + ty: for<'r> fn(&'r stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>>) -> core::result::Result<bool, <stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>> as stm32h7xx_hal::embedded_hal::digital::v2::InputPin>::Error> {<stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>> as stm32h7xx_hal::embedded_hal::digital::v2::InputPin>::is_high}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:68:21: 68:28
                                         // + literal: Const { ty: for<'r> fn(&'r stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>>) -> core::result::Result<bool, <stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>> as stm32h7xx_hal::embedded_hal::digital::v2::InputPin>::Error> {<stm32h7xx_hal::gpio::gpioc::PC6<stm32h7xx_hal::gpio::Input<stm32h7xx_hal::gpio::PullDown>> as stm32h7xx_hal::embedded_hal::digital::v2::InputPin>::is_high}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_5);                 // scope 0 at src\sdmmc.rs:68:29: 68:30
        _0 = const core::result::Result::<bool, stm32h7xx_hal::Never>::unwrap(move _4) -> bb3; // scope 0 at src\sdmmc.rs:68:9: 68:39
                                         // ty::Const
                                         // + ty: fn(core::result::Result<bool, stm32h7xx_hal::Never>) -> bool {core::result::Result::<bool, stm32h7xx_hal::Never>::unwrap}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: src\sdmmc.rs:68:31: 68:37
                                         // + literal: Const { ty: fn(core::result::Result<bool, stm32h7xx_hal::Never>) -> bool {core::result::Result::<bool, stm32h7xx_hal::Never>::unwrap}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        StorageDead(_4);                 // scope 0 at src\sdmmc.rs:68:38: 68:39
        return;                          // scope 0 at src\sdmmc.rs:69:6: 69:6
    }
}
